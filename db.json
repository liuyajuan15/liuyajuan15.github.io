{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/weipayimg.png","path":"images/donate/weipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/aggregation.jpg","path":"img/aggregation.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/appkey.png","path":"img/appkey.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/association.jpg","path":"img/association.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/association2.jpg","path":"img/association2.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/class.png","path":"img/class.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/composition.jpg","path":"img/composition.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/counter.png","path":"img/counter.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/create.png","path":"img/create.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/dependency.jpg","path":"img/dependency.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/generalization.jpg","path":"img/generalization.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/github2.png","path":"img/github2.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/include.jpg","path":"img/include.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/mysql.jpg","path":"img/mysql.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/php.jpg","path":"img/php.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/realization.jpg","path":"img/realization.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/regex.png","path":"img/regex.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/regex2.png","path":"img/regex2.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/regex3.png","path":"img/regex3.png","modified":0,"renderable":1},{"_id":"themes/pure/source/img/singleton.jpg","path":"img/singleton.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js.map","path":"js/application.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"81df22c745eeed63db34e1d9a3cbab23c5bd15a7","modified":1506139968000},{"_id":"source/.DS_Store","hash":"f8d16c42d14d590762abf2371ef5dc3b11e704ce","modified":1506171698000},{"_id":"source/_posts/.DS_Store","hash":"424bcfbf5f8d713ec91106a167f10dab66d1e5fb","modified":1506171703000},{"_id":"source/_posts/awk.md","hash":"5bd0b5ee125219368fb5e8ed8b68c627925fad7b","modified":1506139968000},{"_id":"source/_posts/busy.md","hash":"e0e37d839096794ea2a9b7cfa9c3b7582e25b6af","modified":1506139968000},{"_id":"source/_posts/copy.md","hash":"c885cae0849d029cb826278f567b34fdfb36008a","modified":1506139968000},{"_id":"source/_posts/first.md","hash":"54c898535d909d850ddfcb05eeadf18ae6e8bd63","modified":1506139968000},{"_id":"source/_posts/git.md","hash":"a2e4430ff65de4a7c5d3ae05fcb25e6caf1e7390","modified":1506139968000},{"_id":"source/_posts/hexo.md","hash":"ea3dda70eb78de782027f3279cb98a94f895bd7e","modified":1506141885000},{"_id":"source/_posts/hexo2.md","hash":"a9ba5d5ee2ca0653356b1cad857c13ecd429fecb","modified":1506139968000},{"_id":"source/_posts/hexo3.md","hash":"0d856711179ab145dde9ed397655b787c97796f5","modified":1506139968000},{"_id":"source/_posts/laravel-3.md","hash":"79cef60bbb2097f2b85ea4ab616d095845b7b642","modified":1506139968000},{"_id":"source/_posts/math.md","hash":"1276cf173717603d674227250b534d7151ff7bda","modified":1506139968000},{"_id":"source/_posts/mysql.md","hash":"33bac5b5592130d9d9006f5f5c8188cc230cb202","modified":1506139968000},{"_id":"source/_posts/regex1.md","hash":"8400f40c58772401cd1b8456df61b3ef172bc80a","modified":1506139968000},{"_id":"source/_posts/regex2.md","hash":"c1f52bd79cd3454a8165b8192465f228db6cf9bb","modified":1506139968000},{"_id":"source/_posts/regex3.md","hash":"73a559a5d424081a99d05b2aafd45848aa9f65fb","modified":1506139968000},{"_id":"source/_posts/regex4.md","hash":"4c55f71c6c8530463602e4b155b13eac2d262879","modified":1506139968000},{"_id":"source/_posts/regex5.md","hash":"37515593903b37aaec166dc9a080dbd89e7e30bf","modified":1506139968000},{"_id":"source/_posts/search.md","hash":"9a581d64c3fe22d1c1feec8abe5ec0904838f1ff","modified":1506139968000},{"_id":"source/_posts/singleton.md","hash":"fdeeed8132af5768f44c3e1969d636fe6b0f1eba","modified":1506139968000},{"_id":"source/_posts/sql-injection.md","hash":"916b04f644dfd5daefb630550e464f340b54a375","modified":1506139968000},{"_id":"source/_posts/string.md","hash":"02652b4654213f3570efcc40bfee6a0845fa1455","modified":1506139968000},{"_id":"source/_posts/uml.md","hash":"20ab85b06d19cd7df1c48b133dbff9479acc209e","modified":1506139968000},{"_id":"source/_posts/used-address.md","hash":"8de0d8117bedb87a05575b9f775fb7cd0ce38aac","modified":1506139968000},{"_id":"source/about/index.md","hash":"5f9f55a377ee4dd22c0121813760b20652a91868","modified":1506139968000},{"_id":"source/categories/index.md","hash":"c0bd3af7df1381f9963b3b5ea0b76c62c3b21494","modified":1506139968000},{"_id":"source/links/index.md","hash":"5b25ccb812d0b3d316b6a5fe2f4ab404aa0d6343","modified":1506139968000},{"_id":"themes/pure/source/.DS_Store","hash":"f76708138c476386b70a17de4139c3966e714640","modified":1505703057000},{"_id":"themes/pure/source/favicon.png","hash":"9014e9812ab90589cbf35b190b5de7ef42169cf7","modified":1504859062000},{"_id":"themes/pure/_source/404/index.md","hash":"d18cc3c0de0f8333c78239bbeecba816f08e0692","modified":1504867005000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1504852925000},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1504852925000},{"_id":"themes/pure/_source/about/index.md","hash":"0ddbb45ebdc9820670d3b29051a6ca2cb52d9b6d","modified":1504852925000},{"_id":"themes/pure/_source/books/index.md","hash":"b689236a3382c27888b79a4e3e772eb740e9c818","modified":1504852925000},{"_id":"themes/pure/_source/categories/index.md","hash":"08fa7d9c7b86a53f86315c184093f918f64d4426","modified":1504852925000},{"_id":"themes/pure/_source/links/index.md","hash":"f0a77dc005376af5e9535c866c4fc89257494a22","modified":1504852925000},{"_id":"themes/pure/_source/repository/index.md","hash":"e2f9a55c1ae9432c1768469b2164dd1929ff8d9a","modified":1504852925000},{"_id":"themes/pure/_source/tags/index.md","hash":"94cb9017e8c8540c1afd77bdb8a7b52e8fbdf4f8","modified":1504852925000},{"_id":"themes/pure/languages/default.yml","hash":"5de022a32038bbf2aa5ed59d1d391a227e8ade6f","modified":1504852925000},{"_id":"themes/pure/languages/en.yml","hash":"5de022a32038bbf2aa5ed59d1d391a227e8ade6f","modified":1504852925000},{"_id":"themes/pure/languages/zh-CN.yml","hash":"d99b317fda0ababf46db31a3831f706e4182a1a4","modified":1504852925000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"100df41740d58b582bce67a90af45788c36ed8b9","modified":1504852925000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1504852925000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1504852925000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1504852925000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1504852925000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1504852925000},{"_id":"themes/pure/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1504852925000},{"_id":"themes/pure/source/img/aggregation.jpg","hash":"5d7a96538c82aa5824e492ed3dc7557d74421fd7","modified":1480389017000},{"_id":"themes/pure/source/img/alipay.png","hash":"09df3d0c187a767be1b22d2f49530e0480b2949f","modified":1504712525000},{"_id":"themes/pure/source/img/association.jpg","hash":"b1065ef35a556a1da598dfb99ff7c860c4069ac5","modified":1480389017000},{"_id":"themes/pure/source/img/association2.jpg","hash":"066fcc3b67d5839399a81b90b7f5c135ffd83851","modified":1480389017000},{"_id":"themes/pure/source/img/composition.jpg","hash":"3e0c40c856156137788f89010fa8726565ed522b","modified":1480389017000},{"_id":"themes/pure/source/img/dependency.jpg","hash":"d67f973f7cc3bf825ff527af9a6452bb6de2a695","modified":1480389017000},{"_id":"themes/pure/source/img/generalization.jpg","hash":"41bdeced1aa83aecdfeb85a69d067b9573fac42a","modified":1480389017000},{"_id":"themes/pure/source/img/include.jpg","hash":"88e8c2dac1b91cc7c1cc75e8c1561eb8cd10ec0f","modified":1498395251000},{"_id":"themes/pure/source/img/mysql.jpg","hash":"3c94ed060fcb1f30d4320fcda9f3a88eace90829","modified":1487838295000},{"_id":"themes/pure/source/img/realization.jpg","hash":"04a689fd8ff707baefa2f3d44426a9764583a98d","modified":1480389017000},{"_id":"themes/pure/source/img/php.jpg","hash":"2bd126fe7b8a1b336c6fbff59fc5a98aebdc7808","modified":1504711565000},{"_id":"themes/pure/source/img/regex2.png","hash":"815fb1785782f153f9d002c783054644152de1bd","modified":1505703023000},{"_id":"themes/pure/source/img/singleton.jpg","hash":"9e2694d9e7debd5c792db1d21cf8ebb797e81125","modified":1480389071000},{"_id":"themes/pure/source/js/application.js","hash":"68f8075dfc6656e1554c225d6da02373e90efd8c","modified":1504852925000},{"_id":"themes/pure/source/js/application.js.map","hash":"fcd293b96808e26adbe00c2d81828e67f0a4ec14","modified":1504852925000},{"_id":"themes/pure/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1504852925000},{"_id":"themes/pure/source/css/style.css","hash":"2da816b890092cb6aa3f02ee6dfcc0b086d67d34","modified":1504852925000},{"_id":"themes/pure/source/img/create.png","hash":"bf2fe2f12fee9af962d509edc4cb4bf3f01c5106","modified":1504764237000},{"_id":"themes/pure/source/img/regex.png","hash":"4678633c1655fbdef3be32f5981e0731cba7b992","modified":1505627512000},{"_id":"themes/pure/source/img/regex3.png","hash":"4678633c1655fbdef3be32f5981e0731cba7b992","modified":1505627512000},{"_id":"themes/pure/source/img/wechat.png","hash":"3ccee1a6ff5cca30542c92403f9c4503098b4de9","modified":1504712555000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1504852925000},{"_id":"themes/pure/source/js/plugin.js","hash":"b5b81aa434cc5e2abd04bab3e5a26fa17606b38d","modified":1504852925000},{"_id":"themes/pure/source/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1504852925000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1504852925000},{"_id":"themes/pure/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1504852925000},{"_id":"themes/pure/source/images/donate/weipayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1504852925000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1504852925000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1504852925000},{"_id":"themes/pure/source/img/appkey.png","hash":"2a99fb7ffdd9a1212f1afca5449f1394fbdd191e","modified":1504763669000},{"_id":"themes/pure/source/img/class.png","hash":"254141c45d30d04a3b2f0df7afac8dfa1888ded1","modified":1504764301000},{"_id":"themes/pure/source/img/counter.png","hash":"ae636c7e652e9d3db5fae79b329aa046e65cfbf0","modified":1504764346000},{"_id":"themes/pure/source/img/github.png","hash":"49cd0511299253e4a2f42b360ba7b9aa5d4a82a1","modified":1505879767000},{"_id":"themes/pure/source/img/github2.png","hash":"27371e3ddaaa04af8f721952a43e5a11d0431e3d","modified":1505880022000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"b701e72ced18c1f7c83ee19c2c54a8699927ff88","modified":1504852925000},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1504852925000},{"_id":"themes/pure/README.md","hash":"0ed626ff0cf4551bf34a20a6644fe8e237ca5d1e","modified":1504852925000},{"_id":"themes/pure/_config.yml","hash":"d528468111add0a92abf9f5713eb0670afcb61e7","modified":1506064447000},{"_id":"themes/pure/_config.yml.example","hash":"467fa33bc2a03fe3e2083198f9659ab9c810f426","modified":1504852925000},{"_id":"themes/pure/.DS_Store","hash":"8468eaf038d71585054ec4d7f5b2d94cd00ff4a8","modified":1506173343000},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1504852925000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1504852925000},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1504852925000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1504852925000},{"_id":"themes/pure/layout/categories.ejs","hash":"4ee888b8c4a6a5094a317d2ab4cdf55a44100306","modified":1504852925000},{"_id":"themes/pure/layout/category.ejs","hash":"77c5f35de6ce3fc9aa90cb004e1cbc9ea5c065b5","modified":1504852925000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1504852925000},{"_id":"themes/pure/layout/layout.ejs","hash":"614be53a4d0db62a6aa8082559dae44c2d7cbad6","modified":1504852925000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1504852925000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1504852925000},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1504852925000},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1504852925000},{"_id":"themes/pure/layout/tag.ejs","hash":"98d9338d29330a06978f282bfcd5a8eb9318bb80","modified":1504852925000},{"_id":"themes/pure/layout/tags.ejs","hash":"728cf9e8d2b2c9ee64282af518ac1b5ae9c28f77","modified":1504852925000},{"_id":"themes/pure/screenshot/pure.png","hash":"306d0ec9938834b2b2c5cab92adbf09c0eb481f6","modified":1504852925000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1504852925000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"8040cb28510ec656bb8743362e5a1d41232e6c01","modified":1504852925000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"9a6a87d510594c136e2f339a6dcc7d299ac36334","modified":1504852925000},{"_id":"themes/pure/layout/_common/plugin.ejs","hash":"b886c542a494ac986cd71512845d6dac9d6e8165","modified":1504852925000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"eb91f079f527769822b883c6b7bf5fb1c7410046","modified":1504852925000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"70b7d1b237ac2f914a8185794ebd7891b259827d","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"753f0edcdee45fc8462a0b0719f2269f69142a99","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"3885bbe5b3f1fa4fc0eb39f0f2f68a4f225fef08","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"eefdbe54ca8fee59756445ba84617d72f7c710e1","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"a84af1262065d42f442d0da7bd3d8dd4caafd09c","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"ae13577f17bd985396607fc73a5f92537a817878","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1504852925000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"fe31bcb9278475c1b8c157ca8b9510ff70d4cd45","modified":1504852925000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"3f727965d5c9f4e76488beabc3ec74e318e70e27","modified":1504852925000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"71115e18dd08df590e990fb5a4a2daf1aa5cfab6","modified":1504852925000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"0bdd0d056a54fc8099b6cc4756acdf0b90754e3e","modified":1504852925000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"7bff50db2d42f0028e0ef722e6819e66dce79798","modified":1504852925000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1504852925000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1504852925000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1504852925000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"d5462cebb2c6d6bedd4079348deda818c177a8ac","modified":1504852925000},{"_id":"themes/pure/layout/_script/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1504852925000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1504852925000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"bd5dbd41017286379c6549405b450227ee4645bc","modified":1504852925000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"234e6a9d8b129dc19e916cb9f927a27b04758180","modified":1504852925000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1504852925000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"b1874ec758a14e67cf5ad4b1d4c181e4bcea664a","modified":1504852925000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"dd97cab1a986793d840da1d290adecedf92528c2","modified":1504852925000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"11c9f839458ac414d09780e065a7b39643cd2810","modified":1504852925000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1504852925000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1504852925000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9d8ade7163bf6c7059e67b3320a33d64fcc5afde","modified":1504852925000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1504852925000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"33857f6d6195bdf3a908be63d2692ecd321dc25e","modified":1504852925000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1504852925000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"b80d594b38a9765f07fb9989652804fb276dd7be","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"a4f8b53225265b0370824eda6b44d4427c98006d","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"8e8ce2bc209ff1621b9a9e5017d158d4f8152aff","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"f7706816c755b2e514ab6dfc0d92ce54c6a91f1c","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"6988f8b38cd26d827bef3bde430f89a549fe06f3","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"4921e638683799889dff2e47cb9a8464041397bb","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"76a7339c1f398621b4601bbf80e2fa11eee52f0e","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1504852925000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"cb8c93f50510de93e4e2fecbbd9058a34e8ca09b","modified":1504852925000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1504852925000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1504852925000},{"_id":"themes/pure/layout/_script/_analytics/script.ejs","hash":"c5aa37346d973437d0a693f8dd345a0b87edfe6f","modified":1504852925000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"dee9c2adc0df37c7e1edb617ba92983eee3f3c8e","modified":1504852925000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"b30ced7d02e63c64227139aa4b99286400d7bcea","modified":1504852925000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"09e66c8bfd1cc0507a0da619f56101423b9e653a","modified":1504852925000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"c951b2fac4e143c0a2fb4fd3369307f23cfe2687","modified":1504852925000},{"_id":"themes/pure/layout/_script/_comment/script.ejs","hash":"ee1cf9c35e51d21a170a7ac5f43e63c2bf777448","modified":1504852925000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"92d897be24e8c520c5a3f8903c542892e2b30a9a","modified":1504852925000},{"_id":"themes/pure/screenshot/pure.psd","hash":"95dcd03e820d49a3d8dada7474244927c33a11f1","modified":1504852925000}],"Category":[{"name":"Linux","_id":"cj7xcb07w00038a9kks17ceok"},{"name":"其他","_id":"cj7xcb08900088a9ktkuyiopz"},{"name":"设计模式","_id":"cj7xcb08f000e8a9ka9xg26w1"},{"name":"杂文","_id":"cj7xcb08j000j8a9kvc25z40a"},{"name":"环境搭建","_id":"cj7xcb08t000v8a9kwc804uxp"},{"name":"框架分析","_id":"cj7xcb099001f8a9kcc1hgh44"},{"name":"MySQL","_id":"cj7xcb09c001m8a9knwoayah4"},{"name":"正则表达式","_id":"cj7xcb09d001q8a9kh1ruoseb"},{"name":"数据结构与算法","_id":"cj7xcb09k002c8a9kfqbof3vk"},{"name":"安全","_id":"cj7xcb09m002h8a9kv4b4ol1v"},{"name":"PHP","_id":"cj7xcb09n002l8a9k9hp1t15x"}],"Data":[],"Page":[{"title":"关于我","date":"2017-09-08T06:55:40.000Z","_content":"\n* Email:liuyajuan15@qq.com\n* Github:https://github.com/liuyajuan15\n* <a class=\" social-share-icon icon-weibo\"href=\"https://weibo.com/p/1005055677293838/home?from=page_100505&mod=TAB#place\">娟娟串珠</a>\n\n\n纸上得来终觉浅，绝知此事要躬行","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-09-08 14:55:40\n---\n\n* Email:liuyajuan15@qq.com\n* Github:https://github.com/liuyajuan15\n* <a class=\" social-share-icon icon-weibo\"href=\"https://weibo.com/p/1005055677293838/home?from=page_100505&mod=TAB#place\">娟娟串珠</a>\n\n\n纸上得来终觉浅，绝知此事要躬行","updated":"2017-09-23T04:12:48.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj7xcb07s00018a9k3vk6o89q","content":"<ul>\n<li>Email:liuyajuan15@qq.com</li>\n<li>Github:<a href=\"https://github.com/liuyajuan15\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15</a></li>\n<li><a class=\" social-share-icon icon-weibo\" href=\"https://weibo.com/p/1005055677293838/home?from=page_100505&mod=TAB#place\" target=\"_blank\" rel=\"external\">娟娟串珠</a></li>\n</ul>\n<p>纸上得来终觉浅，绝知此事要躬行</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Email:liuyajuan15@qq.com</li>\n<li>Github:<a href=\"https://github.com/liuyajuan15\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15</a></li>\n<li><a class=\" social-share-icon icon-weibo\" href=\"https://weibo.com/p/1005055677293838/home?from=page_100505&mod=TAB#place\" target=\"_blank\" rel=\"external\">娟娟串珠</a></li>\n</ul>\n<p>纸上得来终觉浅，绝知此事要躬行</p>\n"},{"title":"categories","date":"2017-09-08T07:22:17.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-09-08 15:22:17\n---\n","updated":"2017-09-23T04:12:48.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj7xcb09x003f8a9kh7qemtol","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2017-09-08T07:28:00.000Z","_content":"- 晓铮大神: http://www.lxzfranky.com/\n- 广训大神: https://zhgxun.github.io","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2017-09-08 15:28:00\n---\n- 晓铮大神: http://www.lxzfranky.com/\n- 广训大神: https://zhgxun.github.io","updated":"2017-09-23T04:12:48.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"cj7xcb09y003g8a9kw8hdjlmm","content":"<ul>\n<li>晓铮大神: <a href=\"http://www.lxzfranky.com/\" target=\"_blank\" rel=\"external\">http://www.lxzfranky.com/</a></li>\n<li>广训大神: <a href=\"https://zhgxun.github.io\" target=\"_blank\" rel=\"external\">https://zhgxun.github.io</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>晓铮大神: <a href=\"http://www.lxzfranky.com/\" target=\"_blank\" rel=\"external\">http://www.lxzfranky.com/</a></li>\n<li>广训大神: <a href=\"https://zhgxun.github.io\" target=\"_blank\" rel=\"external\">https://zhgxun.github.io</a></li>\n</ul>\n"}],"Post":[{"title":"awk学习","date":"2017-03-08T10:17:23.000Z","updated":"2017-03-08T10:17:23.000Z","_content":"awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n使用方法：awk '{pattern + action}' {filenames}\n### 一、书写格式：\n1. 命令行格式 awk -F\":\" '{print $2}’ test.txt   使用较多\n2. 文本格式 \n#!/usr/bin/awk\nBEGIN {FS=\":\"}\n{print $1}\n\n以上为写好的文本格式file.awk\n执行.awk文件的命令为：awk -f file.awk test.txt\n\n### 二、变量：\n常用内置变量\n\n1. $0 全部内容\n2. $1~$n 被分割的第n个字符\n3. FS 分隔符（默认为空格）\n4. RS  输入记录的分隔符(默认为空格)\n5. NF 字段个数\n6. NR 行号\n\n自定义及外部变量\n\n1. awk -v name=$myname 'BEGIN{print name}’    $myname 是自己定义的变量\n2. awk -v host=$HOSTNAME 'BEGIN{print host}’  $HOSTNAME 是系统变量\n3. awk -v name=‘lalalal' 'BEGIN{print name}’   还可以直接定义\n\n### 三、操作符\n1. ~ 匹配\n匹配第7列中是以/bin开头的文件并输出\n╰─>awk -F: '$7 ~ /^\\/bin/{print $0}' /etc/passwd                                                           17-08-16 11:04\nroot:*:0:0:System Administrator:/var/root:/bin/sh\n_mbsetupuser:*:248:248:Setup User:/var/setup:/bin/bash\n2. !~ 不匹配\n匹配第7列中不是以/bin开头的文件并输出\n╰─>awk -F: '$7 !~ /^\\/bin/{print $0}' /etc/passwd                                                           \n\n### 四、输出\n1. print:直接打印\n2. printf:格式化打印\n\n### 五、流程控制\n1. if   seq 10 | awk '{if($0%2==0){print \"ok\"}else{print\"no\"}}’\n2. while  给etc/passwd 中的每一个字段都加上序号\n╭─◆liuyajuan@liuyajuandeMacBook-Pro.local/Users/liuyajuan/Downloads\n╰─>awk -F: '{i=1;while(i<=NF){printf(\" %d:%s \",i,$i);i++}{print \" \" }}' /etc/passwd\n3. for\n\n### 六、BEGIN ,END\n>作用:给程序赋予初始化状态和在程序结束之后执行一些扫尾工作。任何在BEGIN之后列出的操作（在{}内）将在Unix awk开始扫描输入之前执行,而END之后列出的操作将在扫描完全部的输入之后执行因此，通常使用BEGIN来显示变量和预置（初始化）变量，使用END来输出最终结果。\n\n### 七、练习题：\n1. 截取IP地址\n\n```php\n┌─◆<liuyajuan@liuyajuandeMacBook-Pro> \n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> ifconfig en4\nen4: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n\toptions=4<VLAN_MTU>\n\tether 00:e0:4c:36:0b:9c\n\tinet6 fe80::140f:6090:e77a:14ca%en4 prefixlen 64 secured scopeid 0x4\n\tinet 172.19.32.5 netmask 0xffffff00 broadcast 172.19.32.255\n\tnd6 options=201<PERFORMNUD,DAD>\n\tmedia: autoselect (100baseTX <full-duplex>)\n\tstatus: active\n┌─◆<liuyajuan@liuyajuandeMacBook-Pro> \n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> ifconfig en4 | awk -F ' ' '/inet / {print $2}'\n172.19.32.5\n```\n\n2.统计网络连接数\n\n```php\n┌─◆<liuyajuan@liuyajuandeMacBook-Pro> \n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> netstat -an | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}' | column -t\nLISTEN       14\nSYN_SENT     2\nCLOSED       1\nTIME_WAIT    5\nESTABLISHED  12\n```\n\n\n\n\n\n\n","source":"_posts/awk.md","raw":"---\ntitle: awk学习\ndate: 2017-03-08 18:17:23\nupdated: 2017-03-08 18:17:23\ntags: awk\ncategories: Linux\n---\nawk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。\n使用方法：awk '{pattern + action}' {filenames}\n### 一、书写格式：\n1. 命令行格式 awk -F\":\" '{print $2}’ test.txt   使用较多\n2. 文本格式 \n#!/usr/bin/awk\nBEGIN {FS=\":\"}\n{print $1}\n\n以上为写好的文本格式file.awk\n执行.awk文件的命令为：awk -f file.awk test.txt\n\n### 二、变量：\n常用内置变量\n\n1. $0 全部内容\n2. $1~$n 被分割的第n个字符\n3. FS 分隔符（默认为空格）\n4. RS  输入记录的分隔符(默认为空格)\n5. NF 字段个数\n6. NR 行号\n\n自定义及外部变量\n\n1. awk -v name=$myname 'BEGIN{print name}’    $myname 是自己定义的变量\n2. awk -v host=$HOSTNAME 'BEGIN{print host}’  $HOSTNAME 是系统变量\n3. awk -v name=‘lalalal' 'BEGIN{print name}’   还可以直接定义\n\n### 三、操作符\n1. ~ 匹配\n匹配第7列中是以/bin开头的文件并输出\n╰─>awk -F: '$7 ~ /^\\/bin/{print $0}' /etc/passwd                                                           17-08-16 11:04\nroot:*:0:0:System Administrator:/var/root:/bin/sh\n_mbsetupuser:*:248:248:Setup User:/var/setup:/bin/bash\n2. !~ 不匹配\n匹配第7列中不是以/bin开头的文件并输出\n╰─>awk -F: '$7 !~ /^\\/bin/{print $0}' /etc/passwd                                                           \n\n### 四、输出\n1. print:直接打印\n2. printf:格式化打印\n\n### 五、流程控制\n1. if   seq 10 | awk '{if($0%2==0){print \"ok\"}else{print\"no\"}}’\n2. while  给etc/passwd 中的每一个字段都加上序号\n╭─◆liuyajuan@liuyajuandeMacBook-Pro.local/Users/liuyajuan/Downloads\n╰─>awk -F: '{i=1;while(i<=NF){printf(\" %d:%s \",i,$i);i++}{print \" \" }}' /etc/passwd\n3. for\n\n### 六、BEGIN ,END\n>作用:给程序赋予初始化状态和在程序结束之后执行一些扫尾工作。任何在BEGIN之后列出的操作（在{}内）将在Unix awk开始扫描输入之前执行,而END之后列出的操作将在扫描完全部的输入之后执行因此，通常使用BEGIN来显示变量和预置（初始化）变量，使用END来输出最终结果。\n\n### 七、练习题：\n1. 截取IP地址\n\n```php\n┌─◆<liuyajuan@liuyajuandeMacBook-Pro> \n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> ifconfig en4\nen4: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n\toptions=4<VLAN_MTU>\n\tether 00:e0:4c:36:0b:9c\n\tinet6 fe80::140f:6090:e77a:14ca%en4 prefixlen 64 secured scopeid 0x4\n\tinet 172.19.32.5 netmask 0xffffff00 broadcast 172.19.32.255\n\tnd6 options=201<PERFORMNUD,DAD>\n\tmedia: autoselect (100baseTX <full-duplex>)\n\tstatus: active\n┌─◆<liuyajuan@liuyajuandeMacBook-Pro> \n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> ifconfig en4 | awk -F ' ' '/inet / {print $2}'\n172.19.32.5\n```\n\n2.统计网络连接数\n\n```php\n┌─◆<liuyajuan@liuyajuandeMacBook-Pro> \n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> netstat -an | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,\"\\t\",state[key]}' | column -t\nLISTEN       14\nSYN_SENT     2\nCLOSED       1\nTIME_WAIT    5\nESTABLISHED  12\n```\n\n\n\n\n\n\n","slug":"awk","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb07o00008a9kwlgypokg","content":"<p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。<br>使用方法：awk ‘{pattern + action}’ {filenames}</p>\n<h3 id=\"一、书写格式：\"><a href=\"#一、书写格式：\" class=\"headerlink\" title=\"一、书写格式：\"></a>一、书写格式：</h3><ol>\n<li>命令行格式 awk -F”:” ‘{print $2}’ test.txt   使用较多</li>\n<li>文本格式<br>#!/usr/bin/awk<br>BEGIN {FS=”:”}<br>{print $1}</li>\n</ol>\n<p>以上为写好的文本格式file.awk<br>执行.awk文件的命令为：awk -f file.awk test.txt</p>\n<h3 id=\"二、变量：\"><a href=\"#二、变量：\" class=\"headerlink\" title=\"二、变量：\"></a>二、变量：</h3><p>常用内置变量</p>\n<ol>\n<li>$0 全部内容</li>\n<li>$1~$n 被分割的第n个字符</li>\n<li>FS 分隔符（默认为空格）</li>\n<li>RS  输入记录的分隔符(默认为空格)</li>\n<li>NF 字段个数</li>\n<li>NR 行号</li>\n</ol>\n<p>自定义及外部变量</p>\n<ol>\n<li>awk -v name=$myname ‘BEGIN{print name}’    $myname 是自己定义的变量</li>\n<li>awk -v host=$HOSTNAME ‘BEGIN{print host}’  $HOSTNAME 是系统变量</li>\n<li>awk -v name=‘lalalal’ ‘BEGIN{print name}’   还可以直接定义</li>\n</ol>\n<h3 id=\"三、操作符\"><a href=\"#三、操作符\" class=\"headerlink\" title=\"三、操作符\"></a>三、操作符</h3><ol>\n<li>~ 匹配<br>匹配第7列中是以/bin开头的文件并输出<br>╰─&gt;awk -F: ‘$7 ~ /^\\/bin/{print $0}’ /etc/passwd                                                           17-08-16 11:04<br>root:<em>:0:0:System Administrator:/var/root:/bin/sh<br>_mbsetupuser:</em>:248:248:Setup User:/var/setup:/bin/bash</li>\n<li>!~ 不匹配<br>匹配第7列中不是以/bin开头的文件并输出<br>╰─&gt;awk -F: ‘$7 !~ /^\\/bin/{print $0}’ /etc/passwd                                                           </li>\n</ol>\n<h3 id=\"四、输出\"><a href=\"#四、输出\" class=\"headerlink\" title=\"四、输出\"></a>四、输出</h3><ol>\n<li>print:直接打印</li>\n<li>printf:格式化打印</li>\n</ol>\n<h3 id=\"五、流程控制\"><a href=\"#五、流程控制\" class=\"headerlink\" title=\"五、流程控制\"></a>五、流程控制</h3><ol>\n<li>if   seq 10 | awk ‘{if($0%2==0){print “ok”}else{print”no”}}’</li>\n<li>while  给etc/passwd 中的每一个字段都加上序号<br>╭─◆liuyajuan@liuyajuandeMacBook-Pro.local/Users/liuyajuan/Downloads<br>╰─&gt;awk -F: ‘{i=1;while(i&lt;=NF){printf(“ %d:%s “,i,$i);i++}{print “ “ }}’ /etc/passwd</li>\n<li>for</li>\n</ol>\n<h3 id=\"六、BEGIN-END\"><a href=\"#六、BEGIN-END\" class=\"headerlink\" title=\"六、BEGIN ,END\"></a>六、BEGIN ,END</h3><blockquote>\n<p>作用:给程序赋予初始化状态和在程序结束之后执行一些扫尾工作。任何在BEGIN之后列出的操作（在{}内）将在Unix awk开始扫描输入之前执行,而END之后列出的操作将在扫描完全部的输入之后执行因此，通常使用BEGIN来显示变量和预置（初始化）变量，使用END来输出最终结果。</p>\n</blockquote>\n<h3 id=\"七、练习题：\"><a href=\"#七、练习题：\" class=\"headerlink\" title=\"七、练习题：\"></a>七、练习题：</h3><ol>\n<li>截取IP地址</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">┌─◆&lt;liuyajuan@liuyajuandeMacBook-Pro&gt; </div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; ifconfig en4</div><div class=\"line\">en4: flags=<span class=\"number\">8863</span>&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu <span class=\"number\">1500</span></div><div class=\"line\">\toptions=<span class=\"number\">4</span>&lt;VLAN_MTU&gt;</div><div class=\"line\">\tether <span class=\"number\">00</span>:e0:<span class=\"number\">4</span>c:<span class=\"number\">36</span>:<span class=\"number\">0</span>b:<span class=\"number\">9</span>c</div><div class=\"line\">\tinet6 fe80::<span class=\"number\">140</span>f:<span class=\"number\">6090</span>:e77a:<span class=\"number\">14</span>ca%en4 prefixlen <span class=\"number\">64</span> secured scopeid <span class=\"number\">0x4</span></div><div class=\"line\">\tinet <span class=\"number\">172.19</span><span class=\"number\">.32</span><span class=\"number\">.5</span> netmask <span class=\"number\">0xffffff00</span> broadcast <span class=\"number\">172.19</span><span class=\"number\">.32</span><span class=\"number\">.255</span></div><div class=\"line\">\tnd6 options=<span class=\"number\">201</span>&lt;PERFORMNUD,DAD&gt;</div><div class=\"line\">\tmedia: autoselect (<span class=\"number\">100</span>baseTX &lt;full-duplex&gt;)</div><div class=\"line\">\tstatus: active</div><div class=\"line\">┌─◆&lt;liuyajuan@liuyajuandeMacBook-Pro&gt; </div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; ifconfig en4 | awk -F <span class=\"string\">' '</span> <span class=\"string\">'/inet / &#123;print $2&#125;'</span></div><div class=\"line\"><span class=\"number\">172.19</span><span class=\"number\">.32</span><span class=\"number\">.5</span></div></pre></td></tr></table></figure>\n<p>2.统计网络连接数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">┌─◆&lt;liuyajuan@liuyajuandeMacBook-Pro&gt; </div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; netstat -an | awk <span class=\"string\">'/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,\"\\t\",state[key]&#125;'</span> | column -t</div><div class=\"line\">LISTEN       <span class=\"number\">14</span></div><div class=\"line\">SYN_SENT     <span class=\"number\">2</span></div><div class=\"line\">CLOSED       <span class=\"number\">1</span></div><div class=\"line\">TIME_WAIT    <span class=\"number\">5</span></div><div class=\"line\">ESTABLISHED  <span class=\"number\">12</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。<br>使用方法：awk ‘{pattern + action}’ {filenames}</p>\n<h3 id=\"一、书写格式：\"><a href=\"#一、书写格式：\" class=\"headerlink\" title=\"一、书写格式：\"></a>一、书写格式：</h3><ol>\n<li>命令行格式 awk -F”:” ‘{print $2}’ test.txt   使用较多</li>\n<li>文本格式<br>#!/usr/bin/awk<br>BEGIN {FS=”:”}<br>{print $1}</li>\n</ol>\n<p>以上为写好的文本格式file.awk<br>执行.awk文件的命令为：awk -f file.awk test.txt</p>\n<h3 id=\"二、变量：\"><a href=\"#二、变量：\" class=\"headerlink\" title=\"二、变量：\"></a>二、变量：</h3><p>常用内置变量</p>\n<ol>\n<li>$0 全部内容</li>\n<li>$1~$n 被分割的第n个字符</li>\n<li>FS 分隔符（默认为空格）</li>\n<li>RS  输入记录的分隔符(默认为空格)</li>\n<li>NF 字段个数</li>\n<li>NR 行号</li>\n</ol>\n<p>自定义及外部变量</p>\n<ol>\n<li>awk -v name=$myname ‘BEGIN{print name}’    $myname 是自己定义的变量</li>\n<li>awk -v host=$HOSTNAME ‘BEGIN{print host}’  $HOSTNAME 是系统变量</li>\n<li>awk -v name=‘lalalal’ ‘BEGIN{print name}’   还可以直接定义</li>\n</ol>\n<h3 id=\"三、操作符\"><a href=\"#三、操作符\" class=\"headerlink\" title=\"三、操作符\"></a>三、操作符</h3><ol>\n<li>~ 匹配<br>匹配第7列中是以/bin开头的文件并输出<br>╰─&gt;awk -F: ‘$7 ~ /^\\/bin/{print $0}’ /etc/passwd                                                           17-08-16 11:04<br>root:<em>:0:0:System Administrator:/var/root:/bin/sh<br>_mbsetupuser:</em>:248:248:Setup User:/var/setup:/bin/bash</li>\n<li>!~ 不匹配<br>匹配第7列中不是以/bin开头的文件并输出<br>╰─&gt;awk -F: ‘$7 !~ /^\\/bin/{print $0}’ /etc/passwd                                                           </li>\n</ol>\n<h3 id=\"四、输出\"><a href=\"#四、输出\" class=\"headerlink\" title=\"四、输出\"></a>四、输出</h3><ol>\n<li>print:直接打印</li>\n<li>printf:格式化打印</li>\n</ol>\n<h3 id=\"五、流程控制\"><a href=\"#五、流程控制\" class=\"headerlink\" title=\"五、流程控制\"></a>五、流程控制</h3><ol>\n<li>if   seq 10 | awk ‘{if($0%2==0){print “ok”}else{print”no”}}’</li>\n<li>while  给etc/passwd 中的每一个字段都加上序号<br>╭─◆liuyajuan@liuyajuandeMacBook-Pro.local/Users/liuyajuan/Downloads<br>╰─&gt;awk -F: ‘{i=1;while(i&lt;=NF){printf(“ %d:%s “,i,$i);i++}{print “ “ }}’ /etc/passwd</li>\n<li>for</li>\n</ol>\n<h3 id=\"六、BEGIN-END\"><a href=\"#六、BEGIN-END\" class=\"headerlink\" title=\"六、BEGIN ,END\"></a>六、BEGIN ,END</h3><blockquote>\n<p>作用:给程序赋予初始化状态和在程序结束之后执行一些扫尾工作。任何在BEGIN之后列出的操作（在{}内）将在Unix awk开始扫描输入之前执行,而END之后列出的操作将在扫描完全部的输入之后执行因此，通常使用BEGIN来显示变量和预置（初始化）变量，使用END来输出最终结果。</p>\n</blockquote>\n<h3 id=\"七、练习题：\"><a href=\"#七、练习题：\" class=\"headerlink\" title=\"七、练习题：\"></a>七、练习题：</h3><ol>\n<li>截取IP地址</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">┌─◆&lt;liuyajuan@liuyajuandeMacBook-Pro&gt; </div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; ifconfig en4</div><div class=\"line\">en4: flags=<span class=\"number\">8863</span>&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu <span class=\"number\">1500</span></div><div class=\"line\">\toptions=<span class=\"number\">4</span>&lt;VLAN_MTU&gt;</div><div class=\"line\">\tether <span class=\"number\">00</span>:e0:<span class=\"number\">4</span>c:<span class=\"number\">36</span>:<span class=\"number\">0</span>b:<span class=\"number\">9</span>c</div><div class=\"line\">\tinet6 fe80::<span class=\"number\">140</span>f:<span class=\"number\">6090</span>:e77a:<span class=\"number\">14</span>ca%en4 prefixlen <span class=\"number\">64</span> secured scopeid <span class=\"number\">0x4</span></div><div class=\"line\">\tinet <span class=\"number\">172.19</span><span class=\"number\">.32</span><span class=\"number\">.5</span> netmask <span class=\"number\">0xffffff00</span> broadcast <span class=\"number\">172.19</span><span class=\"number\">.32</span><span class=\"number\">.255</span></div><div class=\"line\">\tnd6 options=<span class=\"number\">201</span>&lt;PERFORMNUD,DAD&gt;</div><div class=\"line\">\tmedia: autoselect (<span class=\"number\">100</span>baseTX &lt;full-duplex&gt;)</div><div class=\"line\">\tstatus: active</div><div class=\"line\">┌─◆&lt;liuyajuan@liuyajuandeMacBook-Pro&gt; </div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; ifconfig en4 | awk -F <span class=\"string\">' '</span> <span class=\"string\">'/inet / &#123;print $2&#125;'</span></div><div class=\"line\"><span class=\"number\">172.19</span><span class=\"number\">.32</span><span class=\"number\">.5</span></div></pre></td></tr></table></figure>\n<p>2.统计网络连接数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">┌─◆&lt;liuyajuan@liuyajuandeMacBook-Pro&gt; </div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; netstat -an | awk <span class=\"string\">'/^tcp/ &#123;++state[$NF]&#125; END &#123;for(key in state) print key,\"\\t\",state[key]&#125;'</span> | column -t</div><div class=\"line\">LISTEN       <span class=\"number\">14</span></div><div class=\"line\">SYN_SENT     <span class=\"number\">2</span></div><div class=\"line\">CLOSED       <span class=\"number\">1</span></div><div class=\"line\">TIME_WAIT    <span class=\"number\">5</span></div><div class=\"line\">ESTABLISHED  <span class=\"number\">12</span></div></pre></td></tr></table></figure>\n"},{"title":"烦人的钥匙串","date":"2017-09-20T03:53:02.000Z","_content":">之前的GitHub账号存在一些问题，因此注册了一个新的账号，来管理我的项目，可是当我注册完新账号后，一系列的问题就来了，整整折腾了一个上午\n\n1.https://liuyajuan15.github.io 不能访问，提示not found ，可是项目明明已经存在了呀,后来在晓铮的帮助下选择了一个主题，果然就好了\n![创建应用][id2]\n      \n[id2]: /img/github.png \"create\"\n2.由于我之前绑定了域名，因此换了新项目之后也要绑定域名，当我ping liuyajuan15.github.io的时候，才发现原来IP都是一样的，又涨了见识。\n\n3.以上问题解决了之后当我在本地提交代码时，提交不能提交，原因是没有权限，账户名还是原来的juaner，先把git config 给改掉，查看之后没问题了，结果提交还是同样的错误，此处好悲伤，后来各种百度各种查资料，才发现原来是Mac的钥匙串导致的。\n 猛地想起来，Mac确实有这么一回事，赶紧搜索git，把之前的账号给删除，再次提交需要输入GitHub的账号密码，结果就这么好了。\n ![创建应用][id]\n      \n [id]: /img/github2.png \"create\"","source":"_posts/busy.md","raw":"---\ntitle: 烦人的钥匙串\ndate: 2017-09-20 11:53:02\ntags: [git,github,mac]\ncategories: 其他\n---\n>之前的GitHub账号存在一些问题，因此注册了一个新的账号，来管理我的项目，可是当我注册完新账号后，一系列的问题就来了，整整折腾了一个上午\n\n1.https://liuyajuan15.github.io 不能访问，提示not found ，可是项目明明已经存在了呀,后来在晓铮的帮助下选择了一个主题，果然就好了\n![创建应用][id2]\n      \n[id2]: /img/github.png \"create\"\n2.由于我之前绑定了域名，因此换了新项目之后也要绑定域名，当我ping liuyajuan15.github.io的时候，才发现原来IP都是一样的，又涨了见识。\n\n3.以上问题解决了之后当我在本地提交代码时，提交不能提交，原因是没有权限，账户名还是原来的juaner，先把git config 给改掉，查看之后没问题了，结果提交还是同样的错误，此处好悲伤，后来各种百度各种查资料，才发现原来是Mac的钥匙串导致的。\n 猛地想起来，Mac确实有这么一回事，赶紧搜索git，把之前的账号给删除，再次提交需要输入GitHub的账号密码，结果就这么好了。\n ![创建应用][id]\n      \n [id]: /img/github2.png \"create\"","slug":"busy","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb07t00028a9kn59ttdu2","content":"<blockquote>\n<p>之前的GitHub账号存在一些问题，因此注册了一个新的账号，来管理我的项目，可是当我注册完新账号后，一系列的问题就来了，整整折腾了一个上午</p>\n</blockquote>\n<p>1.<a href=\"https://liuyajuan15.github.io\" target=\"_blank\" rel=\"external\">https://liuyajuan15.github.io</a> 不能访问，提示not found ，可是项目明明已经存在了呀,后来在晓铮的帮助下选择了一个主题，果然就好了<br><img src=\"/img/github.png\" alt=\"创建应用\" title=\"create\"></p>\n<p>2.由于我之前绑定了域名，因此换了新项目之后也要绑定域名，当我ping liuyajuan15.github.io的时候，才发现原来IP都是一样的，又涨了见识。</p>\n<p>3.以上问题解决了之后当我在本地提交代码时，提交不能提交，原因是没有权限，账户名还是原来的juaner，先把git config 给改掉，查看之后没问题了，结果提交还是同样的错误，此处好悲伤，后来各种百度各种查资料，才发现原来是Mac的钥匙串导致的。<br> 猛地想起来，Mac确实有这么一回事，赶紧搜索git，把之前的账号给删除，再次提交需要输入GitHub的账号密码，结果就这么好了。<br> <img src=\"/img/github2.png\" alt=\"创建应用\" title=\"create\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>之前的GitHub账号存在一些问题，因此注册了一个新的账号，来管理我的项目，可是当我注册完新账号后，一系列的问题就来了，整整折腾了一个上午</p>\n</blockquote>\n<p>1.<a href=\"https://liuyajuan15.github.io\" target=\"_blank\" rel=\"external\">https://liuyajuan15.github.io</a> 不能访问，提示not found ，可是项目明明已经存在了呀,后来在晓铮的帮助下选择了一个主题，果然就好了<br><img src=\"/img/github.png\" alt=\"创建应用\" title=\"create\"></p>\n<p>2.由于我之前绑定了域名，因此换了新项目之后也要绑定域名，当我ping liuyajuan15.github.io的时候，才发现原来IP都是一样的，又涨了见识。</p>\n<p>3.以上问题解决了之后当我在本地提交代码时，提交不能提交，原因是没有权限，账户名还是原来的juaner，先把git config 给改掉，查看之后没问题了，结果提交还是同样的错误，此处好悲伤，后来各种百度各种查资料，才发现原来是Mac的钥匙串导致的。<br> 猛地想起来，Mac确实有这么一回事，赶紧搜索git，把之前的账号给删除，再次提交需要输入GitHub的账号密码，结果就这么好了。<br> <img src=\"/img/github2.png\" alt=\"创建应用\" title=\"create\"></p>\n"},{"title":"深拷贝和浅拷贝","date":"2017-09-08T10:12:41.000Z","_content":"* 深拷贝：赋值时完全复制，完全的copy，对其中一个做出改变，不会影响另一个\n* 浅拷贝：赋值时，引用赋值，相当于取了一个别名。对其中一个修改，会影响另一个。\n* PHP中， = 赋值时，普通对象是深拷贝，但对对象来说，是浅拷贝。也就是说，对象的赋值是引用赋值。（对象作为参数传递时，也是引用传递，无论函数定义时参数前面是否有&符号）\n* php4中，对象的 = 赋值是实现一份副本，这样存在很多问题，在不知不觉中我们可能会拷贝很多份副本。\n* php5中，对象的 = 赋值和传递都是引用。要想实现拷贝副本，php提供了clone函数实现。\n* clone完全copy了一份副本。但是clone时，我们可能不希望copy源对象的所有内容，那我们可以利用__clone来操作。\n* 在__clone（）中，我们可以进行一些操作。注意，这些操作，也就是__clone函数是作用于拷贝的副本对象上的\n\n```php\n实现对象这种的深拷贝，有两种方法：\n例子1：重写clone函数\n<?php\nclass Test{\n    public $a=1;\n}\n \nclass TestOne{\n    public $b=1;\n    public $obj;\n    //包含了一个对象属性，clone时，它会是浅拷贝\n    public function __construct(){\n        $this->obj = new Test();\n    }\n     \n    //方法一：重写clone函数\n    public function __clone(){\n        $this->obj = clone $this->obj;\n    }\n}\n \n$m = new TestOne();\n$n = clone $m;\n \n$n->b = 2;\necho $m->b;//输出原来的1\necho PHP_EOL;\n//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响\n \n//由于改写了clone函数，现在对象属性也实现了真正的深拷贝，对新对象的改变，不会影响源对象\n$n->obj->a = 3;\necho $m->obj->a;//输出1，不随新对象改变，还是保持了原来的属性\n \n例子2：序列化和反序列化\n\nclass Test{\n    public $a=1;\n}\n \nclass TestOne{\n    public $b=1;\n    public $obj;\n    //包含了一个对象属性，clone时，它会是浅拷贝\n    public function __construct(){\n        $this->obj = new Test();\n    }\n     \n}\n \n$m = new TestOne();\n//方法二，序列化反序列化实现对象深拷贝\n$n = serialize($m);\n$n = unserialize($n);\n \n$n->b = 2;\necho $m->b;//输出原来的1\necho PHP_EOL;\n//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响\n \n \n$n->obj->a = 3;\necho $m->obj->a;//输出1，不随新对象改变，还是保持了原来的属性,可以看到，序列化和反序列化可以实现对象的深拷贝\n  \n例子3：json_encode之后再json_decode,实现赋值\n```","source":"_posts/copy.md","raw":"---\ntitle: 深拷贝和浅拷贝\ndate: 2017-09-08 18:12:41\ntags: 设计模式\ncategories: 设计模式\n\n---\n* 深拷贝：赋值时完全复制，完全的copy，对其中一个做出改变，不会影响另一个\n* 浅拷贝：赋值时，引用赋值，相当于取了一个别名。对其中一个修改，会影响另一个。\n* PHP中， = 赋值时，普通对象是深拷贝，但对对象来说，是浅拷贝。也就是说，对象的赋值是引用赋值。（对象作为参数传递时，也是引用传递，无论函数定义时参数前面是否有&符号）\n* php4中，对象的 = 赋值是实现一份副本，这样存在很多问题，在不知不觉中我们可能会拷贝很多份副本。\n* php5中，对象的 = 赋值和传递都是引用。要想实现拷贝副本，php提供了clone函数实现。\n* clone完全copy了一份副本。但是clone时，我们可能不希望copy源对象的所有内容，那我们可以利用__clone来操作。\n* 在__clone（）中，我们可以进行一些操作。注意，这些操作，也就是__clone函数是作用于拷贝的副本对象上的\n\n```php\n实现对象这种的深拷贝，有两种方法：\n例子1：重写clone函数\n<?php\nclass Test{\n    public $a=1;\n}\n \nclass TestOne{\n    public $b=1;\n    public $obj;\n    //包含了一个对象属性，clone时，它会是浅拷贝\n    public function __construct(){\n        $this->obj = new Test();\n    }\n     \n    //方法一：重写clone函数\n    public function __clone(){\n        $this->obj = clone $this->obj;\n    }\n}\n \n$m = new TestOne();\n$n = clone $m;\n \n$n->b = 2;\necho $m->b;//输出原来的1\necho PHP_EOL;\n//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响\n \n//由于改写了clone函数，现在对象属性也实现了真正的深拷贝，对新对象的改变，不会影响源对象\n$n->obj->a = 3;\necho $m->obj->a;//输出1，不随新对象改变，还是保持了原来的属性\n \n例子2：序列化和反序列化\n\nclass Test{\n    public $a=1;\n}\n \nclass TestOne{\n    public $b=1;\n    public $obj;\n    //包含了一个对象属性，clone时，它会是浅拷贝\n    public function __construct(){\n        $this->obj = new Test();\n    }\n     \n}\n \n$m = new TestOne();\n//方法二，序列化反序列化实现对象深拷贝\n$n = serialize($m);\n$n = unserialize($n);\n \n$n->b = 2;\necho $m->b;//输出原来的1\necho PHP_EOL;\n//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响\n \n \n$n->obj->a = 3;\necho $m->obj->a;//输出1，不随新对象改变，还是保持了原来的属性,可以看到，序列化和反序列化可以实现对象的深拷贝\n  \n例子3：json_encode之后再json_decode,实现赋值\n```","slug":"copy","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08400058a9ksjs2ricv","content":"<ul>\n<li>深拷贝：赋值时完全复制，完全的copy，对其中一个做出改变，不会影响另一个</li>\n<li>浅拷贝：赋值时，引用赋值，相当于取了一个别名。对其中一个修改，会影响另一个。</li>\n<li>PHP中， = 赋值时，普通对象是深拷贝，但对对象来说，是浅拷贝。也就是说，对象的赋值是引用赋值。（对象作为参数传递时，也是引用传递，无论函数定义时参数前面是否有&amp;符号）</li>\n<li>php4中，对象的 = 赋值是实现一份副本，这样存在很多问题，在不知不觉中我们可能会拷贝很多份副本。</li>\n<li>php5中，对象的 = 赋值和传递都是引用。要想实现拷贝副本，php提供了clone函数实现。</li>\n<li>clone完全copy了一份副本。但是clone时，我们可能不希望copy源对象的所有内容，那我们可以利用__clone来操作。</li>\n<li>在<strong>clone（）中，我们可以进行一些操作。注意，这些操作，也就是</strong>clone函数是作用于拷贝的副本对象上的</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">实现对象这种的深拷贝，有两种方法：</div><div class=\"line\">例子<span class=\"number\">1</span>：重写<span class=\"keyword\">clone</span>函数</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $a=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOne</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $b=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $obj;</div><div class=\"line\">    <span class=\"comment\">//包含了一个对象属性，clone时，它会是浅拷贝</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;obj = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">//方法一：重写clone函数</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;obj = <span class=\"keyword\">clone</span> <span class=\"keyword\">$this</span>-&gt;obj;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">$m = <span class=\"keyword\">new</span> TestOne();</div><div class=\"line\">$n = <span class=\"keyword\">clone</span> $m;</div><div class=\"line\"> </div><div class=\"line\">$n-&gt;b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;b;<span class=\"comment\">//输出原来的1</span></div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"><span class=\"comment\">//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//由于改写了clone函数，现在对象属性也实现了真正的深拷贝，对新对象的改变，不会影响源对象</span></div><div class=\"line\">$n-&gt;obj-&gt;a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;obj-&gt;a;<span class=\"comment\">//输出1，不随新对象改变，还是保持了原来的属性</span></div><div class=\"line\"> </div><div class=\"line\">例子<span class=\"number\">2</span>：序列化和反序列化</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $a=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOne</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $b=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $obj;</div><div class=\"line\">    <span class=\"comment\">//包含了一个对象属性，clone时，它会是浅拷贝</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;obj = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">$m = <span class=\"keyword\">new</span> TestOne();</div><div class=\"line\"><span class=\"comment\">//方法二，序列化反序列化实现对象深拷贝</span></div><div class=\"line\">$n = serialize($m);</div><div class=\"line\">$n = unserialize($n);</div><div class=\"line\"> </div><div class=\"line\">$n-&gt;b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;b;<span class=\"comment\">//输出原来的1</span></div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"><span class=\"comment\">//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">$n-&gt;obj-&gt;a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;obj-&gt;a;<span class=\"comment\">//输出1，不随新对象改变，还是保持了原来的属性,可以看到，序列化和反序列化可以实现对象的深拷贝</span></div><div class=\"line\">  </div><div class=\"line\">例子<span class=\"number\">3</span>：json_encode之后再json_decode,实现赋值</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>深拷贝：赋值时完全复制，完全的copy，对其中一个做出改变，不会影响另一个</li>\n<li>浅拷贝：赋值时，引用赋值，相当于取了一个别名。对其中一个修改，会影响另一个。</li>\n<li>PHP中， = 赋值时，普通对象是深拷贝，但对对象来说，是浅拷贝。也就是说，对象的赋值是引用赋值。（对象作为参数传递时，也是引用传递，无论函数定义时参数前面是否有&amp;符号）</li>\n<li>php4中，对象的 = 赋值是实现一份副本，这样存在很多问题，在不知不觉中我们可能会拷贝很多份副本。</li>\n<li>php5中，对象的 = 赋值和传递都是引用。要想实现拷贝副本，php提供了clone函数实现。</li>\n<li>clone完全copy了一份副本。但是clone时，我们可能不希望copy源对象的所有内容，那我们可以利用__clone来操作。</li>\n<li>在<strong>clone（）中，我们可以进行一些操作。注意，这些操作，也就是</strong>clone函数是作用于拷贝的副本对象上的</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">实现对象这种的深拷贝，有两种方法：</div><div class=\"line\">例子<span class=\"number\">1</span>：重写<span class=\"keyword\">clone</span>函数</div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $a=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOne</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $b=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $obj;</div><div class=\"line\">    <span class=\"comment\">//包含了一个对象属性，clone时，它会是浅拷贝</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;obj = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">//方法一：重写clone函数</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;obj = <span class=\"keyword\">clone</span> <span class=\"keyword\">$this</span>-&gt;obj;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">$m = <span class=\"keyword\">new</span> TestOne();</div><div class=\"line\">$n = <span class=\"keyword\">clone</span> $m;</div><div class=\"line\"> </div><div class=\"line\">$n-&gt;b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;b;<span class=\"comment\">//输出原来的1</span></div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"><span class=\"comment\">//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//由于改写了clone函数，现在对象属性也实现了真正的深拷贝，对新对象的改变，不会影响源对象</span></div><div class=\"line\">$n-&gt;obj-&gt;a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;obj-&gt;a;<span class=\"comment\">//输出1，不随新对象改变，还是保持了原来的属性</span></div><div class=\"line\"> </div><div class=\"line\">例子<span class=\"number\">2</span>：序列化和反序列化</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $a=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOne</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $b=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $obj;</div><div class=\"line\">    <span class=\"comment\">//包含了一个对象属性，clone时，它会是浅拷贝</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;obj = <span class=\"keyword\">new</span> Test();</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">$m = <span class=\"keyword\">new</span> TestOne();</div><div class=\"line\"><span class=\"comment\">//方法二，序列化反序列化实现对象深拷贝</span></div><div class=\"line\">$n = serialize($m);</div><div class=\"line\">$n = unserialize($n);</div><div class=\"line\"> </div><div class=\"line\">$n-&gt;b = <span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;b;<span class=\"comment\">//输出原来的1</span></div><div class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</div><div class=\"line\"><span class=\"comment\">//可以看到，普通属性实现了深拷贝，改变普通属性b，不会对源对象有影响</span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">$n-&gt;obj-&gt;a = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> $m-&gt;obj-&gt;a;<span class=\"comment\">//输出1，不随新对象改变，还是保持了原来的属性,可以看到，序列化和反序列化可以实现对象的深拷贝</span></div><div class=\"line\">  </div><div class=\"line\">例子<span class=\"number\">3</span>：json_encode之后再json_decode,实现赋值</div></pre></td></tr></table></figure>"},{"title":"第一篇博客诞生","date":"2016-11-06T10:42:37.000Z","updated":"2016-11-06T10:42:37.000Z","_content":"从此开启了博客之路，发布第一篇作为纪念！✌️\n","source":"_posts/first.md","raw":"---\ntitle: 第一篇博客诞生\ndate: 2016-11-06 18:42:37\nupdated: 2016-11-06 18:42:37\ntags: 杂文\ncategories: 杂文\n---\n从此开启了博客之路，发布第一篇作为纪念！✌️\n","slug":"first","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08600068a9k6y1h3hc7","content":"<p>从此开启了博客之路，发布第一篇作为纪念！✌️</p>\n","site":{"data":{}},"excerpt":"","more":"<p>从此开启了博客之路，发布第一篇作为纪念！✌️</p>\n"},{"title":"git使用","date":"2017-01-05T04:00:33.000Z","updated":"2017-01-05T04:00:33.000Z","_content":"看完廖雪峰老师的git教程后，对git的使用有所了解，因此整理一下，作为参考 https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n### 一、Git简介\n#### 1. Git的诞生\n#### 2. 集中式vs分布式\n>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。\n 那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。\n 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。\n 在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。\n\n### 二、安装Git\n```php\n以下是Mac下的安装\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> brew install git\n```\n### 三、创建版本库\n>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n\n```php\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> mkdir learnGit\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> cd learnGit\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> pwd\n/Users/liuyajuan/Sites/learnGit\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git init  //利用git init 把这个目录变成Git可以管理的仓库，会发现当前目录下多了一个.git的目录\n//把文件添加到版本库的方法：\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git add test.txt //git add 添加文件\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git commit -m 'wrote a test file' // -m '' 是输入提交的说明，方便能从历史记忆里很快的找到需要的内容\n```\n>初始化一个Git仓库，使用 **git init** 命令。\n 添加文件到Git仓库，分两步：\n 第一步，使用命令 **git add <file>** ，注意，可反复多次使用，添加多个文件；\n 第二步，使用命令 **git commit**，完成。\n \n### 四、时光机穿梭\n#### 1. 版本回退\n>1. **git status** 查看哪些文件被修改，可以随时掌握工作区的状态\n 2. **git diff** 查看修改的内容\n 3. HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 **git reset --hard commit_id**。\n 4. 穿梭前，用**git log**可以查看提交历史，以便确定要回退到哪个版本。\n 5. 要重返未来，用**git reflog**查看命令历史，以便确定要回到未来的哪个版本。\n \n#### 2. 工作区和暂存区\n> 以上的learnGit就是我的工作区，工作区有一个隐藏的目录.git,这个就是Git的版本库\n版本库中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\n前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。\n你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n#### 3. 管理修改\n>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。\n\n#### 4.撤销修改\n>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 **git checkout -- file**。\n 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令**git reset HEAD file**，就回到了场景1，第二步按场景1操作。\n 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n \n#### 5.删除文件\n>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。\n \n### 五、远程仓库\n#### 1. 添加远程库\n>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n 关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n \n#### 2. 从远程库克隆\n>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。\nGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n### 六、分支管理\n#### 1. 创建与合并分支\n>1. 查看分支：git branch\n2. 创建分支：git branch <name>\n3. 切换分支：git checkout <name>\n4. 创建+切换分支：git checkout -b <name>\n5. 合并某分支到当前分支：git merge <name>\n6. 删除分支：git branch -d <name>\n\n#### 2. 解决冲突\n>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n 用git log --graph命令可以看到分支合并图。\n \n#### 3. 分支管理策略\n>Git分支十分强大，在团队开发中应该充分应用。\n 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并\n \n#### 4. Bug分支\n>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n#### 5. Feature分支\n>开发一个新feature，最好新建一个分支；\n 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。\n \n#### 6.多人协作\n>1. 查看远程库信息，使用git remote -v；\n2. 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n3. 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n4. 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n5. 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n6. 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n### 七、标签管理\n#### 1. 创建标签 \n>1. 命令**git tag <name>** 用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n2. **git tag -a <tagname> -m \"blablabla...\"** 可以指定标签信息；\n3. **git tag -s <tagname> -m \"blablabla...\"**可以用PGP签名标签；\n4. 命令**git tag**可以查看所有标签。\n \n#### 2. 操作标签\n>1. 命令**git push origin <tagname>** 可以推送一个本地标签；\n2. 命令**git push origin --tags** 可以推送全部未推送过的本地标签；\n3. 命令**git tag -d <tagname>** 可以删除一个本地标签；\n4. 命令**git push origin :refs/tags/<tagname>** 可以删除一个远程标签\n \n### 八、自定义git\n>忽略某些文件时，需要编写.gitignore;.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！\n\n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.co checkout\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.ci commit\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.br branch\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.st status\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.last 'log -1'","source":"_posts/git.md","raw":"---\ntitle: git使用\ndate: 2017-01-05 12:00:33\nupdated: 2017-01-05 12:00:33\ntags: [git]\ncategories: 其他\n---\n看完廖雪峰老师的git教程后，对git的使用有所了解，因此整理一下，作为参考 https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n### 一、Git简介\n#### 1. Git的诞生\n#### 2. 集中式vs分布式\n>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。\n 那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。\n 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。\n 在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。\n\n### 二、安装Git\n```php\n以下是Mac下的安装\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> brew install git\n```\n### 三、创建版本库\n>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n\n```php\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> mkdir learnGit\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> cd learnGit\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> pwd\n/Users/liuyajuan/Sites/learnGit\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git init  //利用git init 把这个目录变成Git可以管理的仓库，会发现当前目录下多了一个.git的目录\n//把文件添加到版本库的方法：\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git add test.txt //git add 添加文件\n└─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git commit -m 'wrote a test file' // -m '' 是输入提交的说明，方便能从历史记忆里很快的找到需要的内容\n```\n>初始化一个Git仓库，使用 **git init** 命令。\n 添加文件到Git仓库，分两步：\n 第一步，使用命令 **git add <file>** ，注意，可反复多次使用，添加多个文件；\n 第二步，使用命令 **git commit**，完成。\n \n### 四、时光机穿梭\n#### 1. 版本回退\n>1. **git status** 查看哪些文件被修改，可以随时掌握工作区的状态\n 2. **git diff** 查看修改的内容\n 3. HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 **git reset --hard commit_id**。\n 4. 穿梭前，用**git log**可以查看提交历史，以便确定要回退到哪个版本。\n 5. 要重返未来，用**git reflog**查看命令历史，以便确定要回到未来的哪个版本。\n \n#### 2. 工作区和暂存区\n> 以上的learnGit就是我的工作区，工作区有一个隐藏的目录.git,这个就是Git的版本库\n版本库中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\n前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：\n第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。\n你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。\n\n#### 3. 管理修改\n>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。\n\n#### 4.撤销修改\n>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 **git checkout -- file**。\n 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令**git reset HEAD file**，就回到了场景1，第二步按场景1操作。\n 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n \n#### 5.删除文件\n>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。\n \n### 五、远程仓库\n#### 1. 添加远程库\n>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n 关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！\n \n#### 2. 从远程库克隆\n>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。\nGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n### 六、分支管理\n#### 1. 创建与合并分支\n>1. 查看分支：git branch\n2. 创建分支：git branch <name>\n3. 切换分支：git checkout <name>\n4. 创建+切换分支：git checkout -b <name>\n5. 合并某分支到当前分支：git merge <name>\n6. 删除分支：git branch -d <name>\n\n#### 2. 解决冲突\n>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n 用git log --graph命令可以看到分支合并图。\n \n#### 3. 分支管理策略\n>Git分支十分强大，在团队开发中应该充分应用。\n 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并\n \n#### 4. Bug分支\n>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n\n#### 5. Feature分支\n>开发一个新feature，最好新建一个分支；\n 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。\n \n#### 6.多人协作\n>1. 查看远程库信息，使用git remote -v；\n2. 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n3. 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n4. 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n5. 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n6. 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n### 七、标签管理\n#### 1. 创建标签 \n>1. 命令**git tag <name>** 用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n2. **git tag -a <tagname> -m \"blablabla...\"** 可以指定标签信息；\n3. **git tag -s <tagname> -m \"blablabla...\"**可以用PGP签名标签；\n4. 命令**git tag**可以查看所有标签。\n \n#### 2. 操作标签\n>1. 命令**git push origin <tagname>** 可以推送一个本地标签；\n2. 命令**git push origin --tags** 可以推送全部未推送过的本地标签；\n3. 命令**git tag -d <tagname>** 可以删除一个本地标签；\n4. 命令**git push origin :refs/tags/<tagname>** 可以删除一个远程标签\n \n### 八、自定义git\n>忽略某些文件时，需要编写.gitignore;.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！\n\n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.co checkout\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.ci commit\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.br branch\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.st status\n \n └─>[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ >> git config --global alias.last 'log -1'","slug":"git","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08700078a9kkjxct757","content":"<p>看完廖雪峰老师的git教程后，对git的使用有所了解，因此整理一下，作为参考 <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>\n<h3 id=\"一、Git简介\"><a href=\"#一、Git简介\" class=\"headerlink\" title=\"一、Git简介\"></a>一、Git简介</h3><h4 id=\"1-Git的诞生\"><a href=\"#1-Git的诞生\" class=\"headerlink\" title=\"1. Git的诞生\"></a>1. Git的诞生</h4><h4 id=\"2-集中式vs分布式\"><a href=\"#2-集中式vs分布式\" class=\"headerlink\" title=\"2. 集中式vs分布式\"></a>2. 集中式vs分布式</h4><blockquote>\n<p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。<br> 那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<br> 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。<br> 在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>\n</blockquote>\n<h3 id=\"二、安装Git\"><a href=\"#二、安装Git\" class=\"headerlink\" title=\"二、安装Git\"></a>二、安装Git</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">以下是Mac下的安装</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; brew install git</div></pre></td></tr></table></figure>\n<h3 id=\"三、创建版本库\"><a href=\"#三、创建版本库\" class=\"headerlink\" title=\"三、创建版本库\"></a>三、创建版本库</h3><blockquote>\n<p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; mkdir learnGit</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; cd learnGit</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; pwd</div><div class=\"line\">/Users/liuyajuan/Sites/learnGit</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git init  <span class=\"comment\">//利用git init 把这个目录变成Git可以管理的仓库，会发现当前目录下多了一个.git的目录</span></div><div class=\"line\"><span class=\"comment\">//把文件添加到版本库的方法：</span></div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git add test.txt <span class=\"comment\">//git add 添加文件</span></div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git commit -m <span class=\"string\">'wrote a test file'</span> <span class=\"comment\">// -m '' 是输入提交的说明，方便能从历史记忆里很快的找到需要的内容</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>初始化一个Git仓库，使用 <strong>git init</strong> 命令。<br> 添加文件到Git仓库，分两步：<br> 第一步，使用命令 <strong>git add <file></file></strong> ，注意，可反复多次使用，添加多个文件；<br> 第二步，使用命令 <strong>git commit</strong>，完成。</p>\n</blockquote>\n<h3 id=\"四、时光机穿梭\"><a href=\"#四、时光机穿梭\" class=\"headerlink\" title=\"四、时光机穿梭\"></a>四、时光机穿梭</h3><h4 id=\"1-版本回退\"><a href=\"#1-版本回退\" class=\"headerlink\" title=\"1. 版本回退\"></a>1. 版本回退</h4><blockquote>\n<ol>\n<li><strong>git status</strong> 查看哪些文件被修改，可以随时掌握工作区的状态<ol>\n<li><strong>git diff</strong> 查看修改的内容</li>\n<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 <strong>git reset –hard commit_id</strong>。</li>\n<li>穿梭前，用<strong>git log</strong>可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用<strong>git reflog</strong>查看命令历史，以便确定要回到未来的哪个版本。</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"2-工作区和暂存区\"><a href=\"#2-工作区和暂存区\" class=\"headerlink\" title=\"2. 工作区和暂存区\"></a>2. 工作区和暂存区</h4><blockquote>\n<p>以上的learnGit就是我的工作区，工作区有一个隐藏的目录.git,这个就是Git的版本库<br>版本库中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。<br>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n</blockquote>\n<h4 id=\"3-管理修改\"><a href=\"#3-管理修改\" class=\"headerlink\" title=\"3. 管理修改\"></a>3. 管理修改</h4><blockquote>\n<p>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>\n</blockquote>\n<h4 id=\"4-撤销修改\"><a href=\"#4-撤销修改\" class=\"headerlink\" title=\"4.撤销修改\"></a>4.撤销修改</h4><blockquote>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <strong>git checkout – file</strong>。<br> 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<strong>git reset HEAD file</strong>，就回到了场景1，第二步按场景1操作。<br> 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n</blockquote>\n<h4 id=\"5-删除文件\"><a href=\"#5-删除文件\" class=\"headerlink\" title=\"5.删除文件\"></a>5.删除文件</h4><blockquote>\n<p>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>\n</blockquote>\n<h3 id=\"五、远程仓库\"><a href=\"#五、远程仓库\" class=\"headerlink\" title=\"五、远程仓库\"></a>五、远程仓库</h3><h4 id=\"1-添加远程库\"><a href=\"#1-添加远程库\" class=\"headerlink\" title=\"1. 添加远程库\"></a>1. 添加远程库</h4><blockquote>\n<p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；<br> 关联后，使用命令git push -u origin master第一次推送master分支的所有内容；<br> 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；<br> 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>\n</blockquote>\n<h4 id=\"2-从远程库克隆\"><a href=\"#2-从远程库克隆\" class=\"headerlink\" title=\"2. 从远程库克隆\"></a>2. 从远程库克隆</h4><blockquote>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n</blockquote>\n<h3 id=\"六、分支管理\"><a href=\"#六、分支管理\" class=\"headerlink\" title=\"六、分支管理\"></a>六、分支管理</h3><h4 id=\"1-创建与合并分支\"><a href=\"#1-创建与合并分支\" class=\"headerlink\" title=\"1. 创建与合并分支\"></a>1. 创建与合并分支</h4><blockquote>\n<ol>\n<li>查看分支：git branch</li>\n<li>创建分支：git branch <name></name></li>\n<li>切换分支：git checkout <name></name></li>\n<li>创建+切换分支：git checkout -b <name></name></li>\n<li>合并某分支到当前分支：git merge <name></name></li>\n<li>删除分支：git branch -d <name></name></li>\n</ol>\n</blockquote>\n<h4 id=\"2-解决冲突\"><a href=\"#2-解决冲突\" class=\"headerlink\" title=\"2. 解决冲突\"></a>2. 解决冲突</h4><blockquote>\n<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br> 用git log –graph命令可以看到分支合并图。</p>\n</blockquote>\n<h4 id=\"3-分支管理策略\"><a href=\"#3-分支管理策略\" class=\"headerlink\" title=\"3. 分支管理策略\"></a>3. 分支管理策略</h4><blockquote>\n<p>Git分支十分强大，在团队开发中应该充分应用。<br> 合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并</p>\n</blockquote>\n<h4 id=\"4-Bug分支\"><a href=\"#4-Bug分支\" class=\"headerlink\" title=\"4. Bug分支\"></a>4. Bug分支</h4><blockquote>\n<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n</blockquote>\n<h4 id=\"5-Feature分支\"><a href=\"#5-Feature分支\" class=\"headerlink\" title=\"5. Feature分支\"></a>5. Feature分支</h4><blockquote>\n<p>开发一个新feature，最好新建一个分支；<br> 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。</name></p>\n</blockquote>\n<h4 id=\"6-多人协作\"><a href=\"#6-多人协作\" class=\"headerlink\" title=\"6.多人协作\"></a>6.多人协作</h4><blockquote>\n<ol>\n<li>查看远程库信息，使用git remote -v；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</li>\n<li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li>\n</ol>\n</blockquote>\n<h3 id=\"七、标签管理\"><a href=\"#七、标签管理\" class=\"headerlink\" title=\"七、标签管理\"></a>七、标签管理</h3><h4 id=\"1-创建标签\"><a href=\"#1-创建标签\" class=\"headerlink\" title=\"1. 创建标签\"></a>1. 创建标签</h4><blockquote>\n<ol>\n<li>命令<strong>git tag <name></name></strong> 用于新建一个标签，默认为HEAD，也可以指定一个commit id；</li>\n<li><strong>git tag -a <tagname> -m “blablabla…”</tagname></strong> 可以指定标签信息；</li>\n<li><strong>git tag -s <tagname> -m “blablabla…”</tagname></strong>可以用PGP签名标签；</li>\n<li>命令<strong>git tag</strong>可以查看所有标签。</li>\n</ol>\n</blockquote>\n<h4 id=\"2-操作标签\"><a href=\"#2-操作标签\" class=\"headerlink\" title=\"2. 操作标签\"></a>2. 操作标签</h4><blockquote>\n<ol>\n<li>命令<strong>git push origin <tagname></tagname></strong> 可以推送一个本地标签；</li>\n<li>命令<strong>git push origin –tags</strong> 可以推送全部未推送过的本地标签；</li>\n<li>命令<strong>git tag -d <tagname></tagname></strong> 可以删除一个本地标签；</li>\n<li>命令<strong>git push origin :refs/tags/<tagname></tagname></strong> 可以删除一个远程标签</li>\n</ol>\n</blockquote>\n<h3 id=\"八、自定义git\"><a href=\"#八、自定义git\" class=\"headerlink\" title=\"八、自定义git\"></a>八、自定义git</h3><blockquote>\n<p>忽略某些文件时，需要编写.gitignore;.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！</p>\n</blockquote>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.co checkout</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.ci commit</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.br branch</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.st status</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.last ‘log -1’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>看完廖雪峰老师的git教程后，对git的使用有所了解，因此整理一下，作为参考 <a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>\n<h3 id=\"一、Git简介\"><a href=\"#一、Git简介\" class=\"headerlink\" title=\"一、Git简介\"></a>一、Git简介</h3><h4 id=\"1-Git的诞生\"><a href=\"#1-Git的诞生\" class=\"headerlink\" title=\"1. Git的诞生\"></a>1. Git的诞生</h4><h4 id=\"2-集中式vs分布式\"><a href=\"#2-集中式vs分布式\" class=\"headerlink\" title=\"2. 集中式vs分布式\"></a>2. 集中式vs分布式</h4><blockquote>\n<p>集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟，这还不得把人给憋死啊。<br> 那分布式版本控制系统与集中式版本控制系统有何不同呢？首先，分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。<br> 和集中式版本控制系统相比，分布式版本控制系统的安全性要高很多，因为每个人电脑里都有完整的版本库，某一个人的电脑坏掉了不要紧，随便从其他人那里复制一个就可以了。而集中式版本控制系统的中央服务器要是出了问题，所有人都没法干活了。<br> 在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p>\n</blockquote>\n<h3 id=\"二、安装Git\"><a href=\"#二、安装Git\" class=\"headerlink\" title=\"二、安装Git\"></a>二、安装Git</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">以下是Mac下的安装</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; brew install git</div></pre></td></tr></table></figure>\n<h3 id=\"三、创建版本库\"><a href=\"#三、创建版本库\" class=\"headerlink\" title=\"三、创建版本库\"></a>三、创建版本库</h3><blockquote>\n<p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; mkdir learnGit</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; cd learnGit</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; pwd</div><div class=\"line\">/Users/liuyajuan/Sites/learnGit</div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git init  <span class=\"comment\">//利用git init 把这个目录变成Git可以管理的仓库，会发现当前目录下多了一个.git的目录</span></div><div class=\"line\"><span class=\"comment\">//把文件添加到版本库的方法：</span></div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git add test.txt <span class=\"comment\">//git add 添加文件</span></div><div class=\"line\">└─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git commit -m <span class=\"string\">'wrote a test file'</span> <span class=\"comment\">// -m '' 是输入提交的说明，方便能从历史记忆里很快的找到需要的内容</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>初始化一个Git仓库，使用 <strong>git init</strong> 命令。<br> 添加文件到Git仓库，分两步：<br> 第一步，使用命令 <strong>git add <file></file></strong> ，注意，可反复多次使用，添加多个文件；<br> 第二步，使用命令 <strong>git commit</strong>，完成。</p>\n</blockquote>\n<h3 id=\"四、时光机穿梭\"><a href=\"#四、时光机穿梭\" class=\"headerlink\" title=\"四、时光机穿梭\"></a>四、时光机穿梭</h3><h4 id=\"1-版本回退\"><a href=\"#1-版本回退\" class=\"headerlink\" title=\"1. 版本回退\"></a>1. 版本回退</h4><blockquote>\n<ol>\n<li><strong>git status</strong> 查看哪些文件被修改，可以随时掌握工作区的状态<ol>\n<li><strong>git diff</strong> 查看修改的内容</li>\n<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 <strong>git reset –hard commit_id</strong>。</li>\n<li>穿梭前，用<strong>git log</strong>可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用<strong>git reflog</strong>查看命令历史，以便确定要回到未来的哪个版本。</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"2-工作区和暂存区\"><a href=\"#2-工作区和暂存区\" class=\"headerlink\" title=\"2. 工作区和暂存区\"></a>2. 工作区和暂存区</h4><blockquote>\n<p>以上的learnGit就是我的工作区，工作区有一个隐藏的目录.git,这个就是Git的版本库<br>版本库中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。<br>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>\n</blockquote>\n<h4 id=\"3-管理修改\"><a href=\"#3-管理修改\" class=\"headerlink\" title=\"3. 管理修改\"></a>3. 管理修改</h4><blockquote>\n<p>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>\n</blockquote>\n<h4 id=\"4-撤销修改\"><a href=\"#4-撤销修改\" class=\"headerlink\" title=\"4.撤销修改\"></a>4.撤销修改</h4><blockquote>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <strong>git checkout – file</strong>。<br> 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<strong>git reset HEAD file</strong>，就回到了场景1，第二步按场景1操作。<br> 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n</blockquote>\n<h4 id=\"5-删除文件\"><a href=\"#5-删除文件\" class=\"headerlink\" title=\"5.删除文件\"></a>5.删除文件</h4><blockquote>\n<p>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>\n</blockquote>\n<h3 id=\"五、远程仓库\"><a href=\"#五、远程仓库\" class=\"headerlink\" title=\"五、远程仓库\"></a>五、远程仓库</h3><h4 id=\"1-添加远程库\"><a href=\"#1-添加远程库\" class=\"headerlink\" title=\"1. 添加远程库\"></a>1. 添加远程库</h4><blockquote>\n<p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；<br> 关联后，使用命令git push -u origin master第一次推送master分支的所有内容；<br> 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；<br> 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>\n</blockquote>\n<h4 id=\"2-从远程库克隆\"><a href=\"#2-从远程库克隆\" class=\"headerlink\" title=\"2. 从远程库克隆\"></a>2. 从远程库克隆</h4><blockquote>\n<p>要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n</blockquote>\n<h3 id=\"六、分支管理\"><a href=\"#六、分支管理\" class=\"headerlink\" title=\"六、分支管理\"></a>六、分支管理</h3><h4 id=\"1-创建与合并分支\"><a href=\"#1-创建与合并分支\" class=\"headerlink\" title=\"1. 创建与合并分支\"></a>1. 创建与合并分支</h4><blockquote>\n<ol>\n<li>查看分支：git branch</li>\n<li>创建分支：git branch <name></name></li>\n<li>切换分支：git checkout <name></name></li>\n<li>创建+切换分支：git checkout -b <name></name></li>\n<li>合并某分支到当前分支：git merge <name></name></li>\n<li>删除分支：git branch -d <name></name></li>\n</ol>\n</blockquote>\n<h4 id=\"2-解决冲突\"><a href=\"#2-解决冲突\" class=\"headerlink\" title=\"2. 解决冲突\"></a>2. 解决冲突</h4><blockquote>\n<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。<br> 用git log –graph命令可以看到分支合并图。</p>\n</blockquote>\n<h4 id=\"3-分支管理策略\"><a href=\"#3-分支管理策略\" class=\"headerlink\" title=\"3. 分支管理策略\"></a>3. 分支管理策略</h4><blockquote>\n<p>Git分支十分强大，在团队开发中应该充分应用。<br> 合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并</p>\n</blockquote>\n<h4 id=\"4-Bug分支\"><a href=\"#4-Bug分支\" class=\"headerlink\" title=\"4. Bug分支\"></a>4. Bug分支</h4><blockquote>\n<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n</blockquote>\n<h4 id=\"5-Feature分支\"><a href=\"#5-Feature分支\" class=\"headerlink\" title=\"5. Feature分支\"></a>5. Feature分支</h4><blockquote>\n<p>开发一个新feature，最好新建一个分支；<br> 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。</name></p>\n</blockquote>\n<h4 id=\"6-多人协作\"><a href=\"#6-多人协作\" class=\"headerlink\" title=\"6.多人协作\"></a>6.多人协作</h4><blockquote>\n<ol>\n<li>查看远程库信息，使用git remote -v；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</li>\n<li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li>\n</ol>\n</blockquote>\n<h3 id=\"七、标签管理\"><a href=\"#七、标签管理\" class=\"headerlink\" title=\"七、标签管理\"></a>七、标签管理</h3><h4 id=\"1-创建标签\"><a href=\"#1-创建标签\" class=\"headerlink\" title=\"1. 创建标签\"></a>1. 创建标签</h4><blockquote>\n<ol>\n<li>命令<strong>git tag <name></name></strong> 用于新建一个标签，默认为HEAD，也可以指定一个commit id；</li>\n<li><strong>git tag -a <tagname> -m “blablabla…”</tagname></strong> 可以指定标签信息；</li>\n<li><strong>git tag -s <tagname> -m “blablabla…”</tagname></strong>可以用PGP签名标签；</li>\n<li>命令<strong>git tag</strong>可以查看所有标签。</li>\n</ol>\n</blockquote>\n<h4 id=\"2-操作标签\"><a href=\"#2-操作标签\" class=\"headerlink\" title=\"2. 操作标签\"></a>2. 操作标签</h4><blockquote>\n<ol>\n<li>命令<strong>git push origin <tagname></tagname></strong> 可以推送一个本地标签；</li>\n<li>命令<strong>git push origin –tags</strong> 可以推送全部未推送过的本地标签；</li>\n<li>命令<strong>git tag -d <tagname></tagname></strong> 可以删除一个本地标签；</li>\n<li>命令<strong>git push origin :refs/tags/<tagname></tagname></strong> 可以删除一个远程标签</li>\n</ol>\n</blockquote>\n<h3 id=\"八、自定义git\"><a href=\"#八、自定义git\" class=\"headerlink\" title=\"八、自定义git\"></a>八、自定义git</h3><blockquote>\n<p>忽略某些文件时，需要编写.gitignore;.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！</p>\n</blockquote>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.co checkout</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.ci commit</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.br branch</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.st status</p>\n<p> └─&gt;[娟姐 😜 👉  ]🤑  好好挣钱 🤑️ &gt;&gt; git config –global alias.last ‘log -1’</p>\n"},{"title":"hexo+github搭建免费网站","date":"2016-12-10T11:20:33.000Z","updated":"2016-12-10T11:20:33.000Z","_content":"\n### 一、准备工作\n * 一个github账号\n * 安装node.js(node官网下载)、npm(推荐brew安装)\n * 安装git\n\n### 二、在GitHub创建仓库\n * 新建一个名为你的用户名.github.io的仓库\n * 仓库名字必须是：username.github.io，其中username是你的用户名\n\n### 三、安装hexo\n * Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。\n * 官网：http://hexo.io\n * github: https://github.com/hexojs/hexo\n * 安装 npm install -g hexo\n * 初始化 在电脑的某个地方新建一个名为blog的文件夹（名字可以随便取），我的是~/Sites/blog,进入目录执行 hexo init\n 至此hexo安装完毕\n \n### 四、本地运行\n * 在项目根目录下执行 hexo s #启动服务\n * 访问：http://localhost:4000\n\n### 五、配置git\n * 编辑 根目录下的 _config.yml 文件\n {% codeblock %}\n deploy:\n     type: git\n     repo: https://github.com/username/username.github.io  #username就是你的用户名\n     branch: master\n     message: 提交博客内容\n {% endcodeblock %}\n * 安装插件 npm install hexo-deployer-git --save\n * 提交 hexo d  如果提交失败需要清除 hexo clean && hexo g && hexo d\n\n### 六、下载好看的主题和有用的插件\n * Plugins: https://hexo.io/plugins/\n * Themes: https://hexo.io/themes/\n * 主题里面自带使用教程这里就不多说了\n\n### 七、绑定域名(依据个人情况)\n * 如果不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问\n * 阿里云购买域名后 执行ping xxx.github.com得到对应的IP地址，去万网的控制台中解析购买的域名\n * 在blog/source 目录下新建一个CNAME文件(无后缀名) 将自己的域名 lyj1215.com填入其中,至此自己的博客基本已经完成\n\n### 八、其他一些设置\n * 详见根目录下的 _config.yml,另外会单独写一篇文章来讲解如何设置\n \n### 九、开始你的博客之旅吧\n * 到根目录下执行如下命令hexo会帮我们在_posts下生成相关md文件，打开这个文件编辑就好了\n    {% codeblock %}\n    执行hexo new 'first'命令\n    打开文件如下：\n    ---\n    title: postName #文章页面上的显示名称，一般是中文\n    date: 2017-07-07 19:39:39 #文章生成时间，一般不改，当然也可以任意修改\n    categories: 默认分类 #分类\n    tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格\n    description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面\n    ---\n    以下是正文\n    {% endcodeblock %}\n    \n### 十、hexo一些常用命令\n * 基本命令\n    1. hexo new \"postName\" #新建文章\n    2. hexo new page \"pageName\" #新建页面\n    3. hexo generate #生成静态页面至public目录\n    4. hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n    5. hexo deploy #部署到GitHub\n    6. hexo help  # 查看帮助\n    7. hexo version  #查看Hexo的版本\n * 缩写\n    1. hexo n == hexo new\n    2. hexo g == hexo generate\n    3. hexo s == hexo server\n    4. hexo d == hexo deploy\n * 命令组合\n    1. hexo s -g #生成并本地预览\n    2. hexo d -g #生成并上传\n\n","source":"_posts/hexo.md","raw":"---\ntitle: hexo+github搭建免费网站\ndate: 2016-12-10 19:20:33\nupdated: 2016-12-10 19:20:33\ntags: [hexo,环境搭建]\ncategories: 环境搭建\n---\n\n### 一、准备工作\n * 一个github账号\n * 安装node.js(node官网下载)、npm(推荐brew安装)\n * 安装git\n\n### 二、在GitHub创建仓库\n * 新建一个名为你的用户名.github.io的仓库\n * 仓库名字必须是：username.github.io，其中username是你的用户名\n\n### 三、安装hexo\n * Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。\n * 官网：http://hexo.io\n * github: https://github.com/hexojs/hexo\n * 安装 npm install -g hexo\n * 初始化 在电脑的某个地方新建一个名为blog的文件夹（名字可以随便取），我的是~/Sites/blog,进入目录执行 hexo init\n 至此hexo安装完毕\n \n### 四、本地运行\n * 在项目根目录下执行 hexo s #启动服务\n * 访问：http://localhost:4000\n\n### 五、配置git\n * 编辑 根目录下的 _config.yml 文件\n {% codeblock %}\n deploy:\n     type: git\n     repo: https://github.com/username/username.github.io  #username就是你的用户名\n     branch: master\n     message: 提交博客内容\n {% endcodeblock %}\n * 安装插件 npm install hexo-deployer-git --save\n * 提交 hexo d  如果提交失败需要清除 hexo clean && hexo g && hexo d\n\n### 六、下载好看的主题和有用的插件\n * Plugins: https://hexo.io/plugins/\n * Themes: https://hexo.io/themes/\n * 主题里面自带使用教程这里就不多说了\n\n### 七、绑定域名(依据个人情况)\n * 如果不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问\n * 阿里云购买域名后 执行ping xxx.github.com得到对应的IP地址，去万网的控制台中解析购买的域名\n * 在blog/source 目录下新建一个CNAME文件(无后缀名) 将自己的域名 lyj1215.com填入其中,至此自己的博客基本已经完成\n\n### 八、其他一些设置\n * 详见根目录下的 _config.yml,另外会单独写一篇文章来讲解如何设置\n \n### 九、开始你的博客之旅吧\n * 到根目录下执行如下命令hexo会帮我们在_posts下生成相关md文件，打开这个文件编辑就好了\n    {% codeblock %}\n    执行hexo new 'first'命令\n    打开文件如下：\n    ---\n    title: postName #文章页面上的显示名称，一般是中文\n    date: 2017-07-07 19:39:39 #文章生成时间，一般不改，当然也可以任意修改\n    categories: 默认分类 #分类\n    tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格\n    description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面\n    ---\n    以下是正文\n    {% endcodeblock %}\n    \n### 十、hexo一些常用命令\n * 基本命令\n    1. hexo new \"postName\" #新建文章\n    2. hexo new page \"pageName\" #新建页面\n    3. hexo generate #生成静态页面至public目录\n    4. hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n    5. hexo deploy #部署到GitHub\n    6. hexo help  # 查看帮助\n    7. hexo version  #查看Hexo的版本\n * 缩写\n    1. hexo n == hexo new\n    2. hexo g == hexo generate\n    3. hexo s == hexo server\n    4. hexo d == hexo deploy\n * 命令组合\n    1. hexo s -g #生成并本地预览\n    2. hexo d -g #生成并上传\n\n","slug":"hexo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08a000b8a9kjss2gy5q","content":"<h3 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h3><ul>\n<li>一个github账号</li>\n<li>安装node.js(node官网下载)、npm(推荐brew安装)</li>\n<li>安装git</li>\n</ul>\n<h3 id=\"二、在GitHub创建仓库\"><a href=\"#二、在GitHub创建仓库\" class=\"headerlink\" title=\"二、在GitHub创建仓库\"></a>二、在GitHub创建仓库</h3><ul>\n<li>新建一个名为你的用户名.github.io的仓库</li>\n<li>仓库名字必须是：username.github.io，其中username是你的用户名</li>\n</ul>\n<h3 id=\"三、安装hexo\"><a href=\"#三、安装hexo\" class=\"headerlink\" title=\"三、安装hexo\"></a>三、安装hexo</h3><ul>\n<li>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</li>\n<li>官网：<a href=\"http://hexo.io\" target=\"_blank\" rel=\"external\">http://hexo.io</a></li>\n<li>github: <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">https://github.com/hexojs/hexo</a></li>\n<li>安装 npm install -g hexo</li>\n<li>初始化 在电脑的某个地方新建一个名为blog的文件夹（名字可以随便取），我的是~/Sites/blog,进入目录执行 hexo init<br>至此hexo安装完毕</li>\n</ul>\n<h3 id=\"四、本地运行\"><a href=\"#四、本地运行\" class=\"headerlink\" title=\"四、本地运行\"></a>四、本地运行</h3><ul>\n<li>在项目根目录下执行 hexo s #启动服务</li>\n<li>访问：<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></li>\n</ul>\n<h3 id=\"五、配置git\"><a href=\"#五、配置git\" class=\"headerlink\" title=\"五、配置git\"></a>五、配置git</h3><ul>\n<li>编辑 根目录下的 _config.yml 文件<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">    <span class=\"attribute\">type</span>: git</div><div class=\"line\">    <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username/username.github.io  #username就是你的用户名</span></div><div class=\"line\">    <span class=\"attribute\">branch</span>: master</div><div class=\"line\">    <span class=\"attribute\">message</span>: 提交博客内容</div></pre></td></tr></table></figure></li>\n<li>安装插件 npm install hexo-deployer-git –save</li>\n<li>提交 hexo d  如果提交失败需要清除 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ul>\n<h3 id=\"六、下载好看的主题和有用的插件\"><a href=\"#六、下载好看的主题和有用的插件\" class=\"headerlink\" title=\"六、下载好看的主题和有用的插件\"></a>六、下载好看的主题和有用的插件</h3><ul>\n<li>Plugins: <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">https://hexo.io/plugins/</a></li>\n<li>Themes: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">https://hexo.io/themes/</a></li>\n<li>主题里面自带使用教程这里就不多说了</li>\n</ul>\n<h3 id=\"七、绑定域名-依据个人情况\"><a href=\"#七、绑定域名-依据个人情况\" class=\"headerlink\" title=\"七、绑定域名(依据个人情况)\"></a>七、绑定域名(依据个人情况)</h3><ul>\n<li>如果不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问</li>\n<li>阿里云购买域名后 执行ping xxx.github.com得到对应的IP地址，去万网的控制台中解析购买的域名</li>\n<li>在blog/source 目录下新建一个CNAME文件(无后缀名) 将自己的域名 lyj1215.com填入其中,至此自己的博客基本已经完成</li>\n</ul>\n<h3 id=\"八、其他一些设置\"><a href=\"#八、其他一些设置\" class=\"headerlink\" title=\"八、其他一些设置\"></a>八、其他一些设置</h3><ul>\n<li>详见根目录下的 _config.yml,另外会单独写一篇文章来讲解如何设置</li>\n</ul>\n<h3 id=\"九、开始你的博客之旅吧\"><a href=\"#九、开始你的博客之旅吧\" class=\"headerlink\" title=\"九、开始你的博客之旅吧\"></a>九、开始你的博客之旅吧</h3><ul>\n<li>到根目录下执行如下命令hexo会帮我们在_posts下生成相关md文件，打开这个文件编辑就好了 <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">执行hexo</span> <span class=\"string\">new</span> <span class=\"string\">'first'</span><span class=\"string\">命令</span></div><div class=\"line\"><span class=\"string\">打开文件如下：</span></div><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">postName</span> <span class=\"comment\">#文章页面上的显示名称，一般是中文</span></div><div class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-07</span><span class=\"bullet\">-07</span> <span class=\"number\">19</span><span class=\"string\">:39:39</span> <span class=\"comment\">#文章生成时间，一般不改，当然也可以任意修改</span></div><div class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">默认分类</span> <span class=\"comment\">#分类</span></div><div class=\"line\"><span class=\"attr\">tags:</span> <span class=\"string\">[tag1,tag2,tag3]</span> <span class=\"comment\">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></div><div class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></div><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"string\">以下是正文</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"十、hexo一些常用命令\"><a href=\"#十、hexo一些常用命令\" class=\"headerlink\" title=\"十、hexo一些常用命令\"></a>十、hexo一些常用命令</h3><ul>\n<li>基本命令<ol>\n<li>hexo new “postName” #新建文章</li>\n<li>hexo new page “pageName” #新建页面</li>\n<li>hexo generate #生成静态页面至public目录</li>\n<li>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li>\n<li>hexo deploy #部署到GitHub</li>\n<li>hexo help  # 查看帮助</li>\n<li>hexo version  #查看Hexo的版本</li>\n</ol>\n</li>\n<li>缩写<ol>\n<li>hexo n == hexo new</li>\n<li>hexo g == hexo generate</li>\n<li>hexo s == hexo server</li>\n<li>hexo d == hexo deploy</li>\n</ol>\n</li>\n<li>命令组合<ol>\n<li>hexo s -g #生成并本地预览</li>\n<li>hexo d -g #生成并上传</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、准备工作\"><a href=\"#一、准备工作\" class=\"headerlink\" title=\"一、准备工作\"></a>一、准备工作</h3><ul>\n<li>一个github账号</li>\n<li>安装node.js(node官网下载)、npm(推荐brew安装)</li>\n<li>安装git</li>\n</ul>\n<h3 id=\"二、在GitHub创建仓库\"><a href=\"#二、在GitHub创建仓库\" class=\"headerlink\" title=\"二、在GitHub创建仓库\"></a>二、在GitHub创建仓库</h3><ul>\n<li>新建一个名为你的用户名.github.io的仓库</li>\n<li>仓库名字必须是：username.github.io，其中username是你的用户名</li>\n</ul>\n<h3 id=\"三、安装hexo\"><a href=\"#三、安装hexo\" class=\"headerlink\" title=\"三、安装hexo\"></a>三、安装hexo</h3><ul>\n<li>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</li>\n<li>官网：<a href=\"http://hexo.io\" target=\"_blank\" rel=\"external\">http://hexo.io</a></li>\n<li>github: <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">https://github.com/hexojs/hexo</a></li>\n<li>安装 npm install -g hexo</li>\n<li>初始化 在电脑的某个地方新建一个名为blog的文件夹（名字可以随便取），我的是~/Sites/blog,进入目录执行 hexo init<br>至此hexo安装完毕</li>\n</ul>\n<h3 id=\"四、本地运行\"><a href=\"#四、本地运行\" class=\"headerlink\" title=\"四、本地运行\"></a>四、本地运行</h3><ul>\n<li>在项目根目录下执行 hexo s #启动服务</li>\n<li>访问：<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a></li>\n</ul>\n<h3 id=\"五、配置git\"><a href=\"#五、配置git\" class=\"headerlink\" title=\"五、配置git\"></a>五、配置git</h3><ul>\n<li>编辑 根目录下的 _config.yml 文件<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">    <span class=\"attribute\">type</span>: git</div><div class=\"line\">    <span class=\"attribute\">repo</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/username/username.github.io  #username就是你的用户名</span></div><div class=\"line\">    <span class=\"attribute\">branch</span>: master</div><div class=\"line\">    <span class=\"attribute\">message</span>: 提交博客内容</div></pre></td></tr></table></figure></li>\n<li>安装插件 npm install hexo-deployer-git –save</li>\n<li>提交 hexo d  如果提交失败需要清除 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ul>\n<h3 id=\"六、下载好看的主题和有用的插件\"><a href=\"#六、下载好看的主题和有用的插件\" class=\"headerlink\" title=\"六、下载好看的主题和有用的插件\"></a>六、下载好看的主题和有用的插件</h3><ul>\n<li>Plugins: <a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">https://hexo.io/plugins/</a></li>\n<li>Themes: <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">https://hexo.io/themes/</a></li>\n<li>主题里面自带使用教程这里就不多说了</li>\n</ul>\n<h3 id=\"七、绑定域名-依据个人情况\"><a href=\"#七、绑定域名-依据个人情况\" class=\"headerlink\" title=\"七、绑定域名(依据个人情况)\"></a>七、绑定域名(依据个人情况)</h3><ul>\n<li>如果不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问</li>\n<li>阿里云购买域名后 执行ping xxx.github.com得到对应的IP地址，去万网的控制台中解析购买的域名</li>\n<li>在blog/source 目录下新建一个CNAME文件(无后缀名) 将自己的域名 lyj1215.com填入其中,至此自己的博客基本已经完成</li>\n</ul>\n<h3 id=\"八、其他一些设置\"><a href=\"#八、其他一些设置\" class=\"headerlink\" title=\"八、其他一些设置\"></a>八、其他一些设置</h3><ul>\n<li>详见根目录下的 _config.yml,另外会单独写一篇文章来讲解如何设置</li>\n</ul>\n<h3 id=\"九、开始你的博客之旅吧\"><a href=\"#九、开始你的博客之旅吧\" class=\"headerlink\" title=\"九、开始你的博客之旅吧\"></a>九、开始你的博客之旅吧</h3><ul>\n<li>到根目录下执行如下命令hexo会帮我们在_posts下生成相关md文件，打开这个文件编辑就好了 <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">执行hexo</span> <span class=\"string\">new</span> <span class=\"string\">'first'</span><span class=\"string\">命令</span></div><div class=\"line\"><span class=\"string\">打开文件如下：</span></div><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">postName</span> <span class=\"comment\">#文章页面上的显示名称，一般是中文</span></div><div class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-07</span><span class=\"bullet\">-07</span> <span class=\"number\">19</span><span class=\"string\">:39:39</span> <span class=\"comment\">#文章生成时间，一般不改，当然也可以任意修改</span></div><div class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">默认分类</span> <span class=\"comment\">#分类</span></div><div class=\"line\"><span class=\"attr\">tags:</span> <span class=\"string\">[tag1,tag2,tag3]</span> <span class=\"comment\">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></div><div class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></div><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\"><span class=\"string\">以下是正文</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"十、hexo一些常用命令\"><a href=\"#十、hexo一些常用命令\" class=\"headerlink\" title=\"十、hexo一些常用命令\"></a>十、hexo一些常用命令</h3><ul>\n<li>基本命令<ol>\n<li>hexo new “postName” #新建文章</li>\n<li>hexo new page “pageName” #新建页面</li>\n<li>hexo generate #生成静态页面至public目录</li>\n<li>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li>\n<li>hexo deploy #部署到GitHub</li>\n<li>hexo help  # 查看帮助</li>\n<li>hexo version  #查看Hexo的版本</li>\n</ol>\n</li>\n<li>缩写<ol>\n<li>hexo n == hexo new</li>\n<li>hexo g == hexo generate</li>\n<li>hexo s == hexo server</li>\n<li>hexo d == hexo deploy</li>\n</ol>\n</li>\n<li>命令组合<ol>\n<li>hexo s -g #生成并本地预览</li>\n<li>hexo d -g #生成并上传</li>\n</ol>\n</li>\n</ul>\n"},{"title":"hexo相关配置以及遇到的问题","date":"2016-12-11T11:20:33.000Z","updated":"2016-12-11T11:20:33.000Z","_content":"\n### 一、如何统计阅读量\n   对着配置看了半天都不知道该去如何设置文章的点击数,看如下的配置阅读量统计也是开启的，怎么不能页面不能显示呢，后来百度才发现是自己太天真了，原来leancloud是需要去注册才能使用的😂😂😂\n   {% codeblock %}\n    ## leancloud --- leancloud 阅读量统计\n    ## {@leancloud:{enable:是否开启,className:创建的class,app_id:,app_key:,region:默认为中国地区,limits:热门文章显示总数}}\n    leancloud:\n      enable: true\n      className: \"baseCounter\"\n      app_id: ''\n      app_key: ''\n      region:\n      limits: 10\n   {% endcodeblock %}    \n   #### 注册<a href=\"https://leancloud.cn/\">LeanCloud</a>，这里不再赘述\n   #### 创建应用\n   ![创建应用][id]\n     \n   [id]: /img/create.png \"create\"\n   \n   #### 创建阅读统计表\n   ![创建class][id2]\n        \n   [id2]: /img/class.png \"class\"\n   \n   ![counter][id3]\n           \n   [id3]: /img/counter.png \"counter\"\n   \n   #### 获取AppID和AppKey\n   ![获取key][id4]\n  \n   [id4]: /img/appkey.png \"appkey\"\n   \n   #### 更改配置\n   {% codeblock %}\n    ## leancloud --- leancloud 阅读量统计\n    ## {@leancloud:{enable:是否开启,className:创建的class,app_id:,app_key:,region:默认为中国地区,limits:热门文章显示总数}}\n    leancloud:\n      enable: true\n      className: \"创建的名字\"\n      app_id: '刚刚拷贝的app_id'\n      app_key: '刚刚拷贝的app_key'\n      region:\n      limits: 10\n   {% endcodeblock %} \n   \n### 二、如何在文章中插入图片\n       其实这里就是markdown的语法了，无奈我不会，因此边学边用图片的语法和链接很像。\n   {% codeblock%} \n    行内形式（title 是选择性的）：\n    \n    ![alt text](/path/to/img.jpg \"Title\")\n    \n    参考形式：\n    \n    ![alt text][id]\n    \n    [id]: /path/to/img.jpg \"Title\"\n    \n    上面两种方法都会输出 HTML 为：\n    \n    <img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n   {% endcodeblock%}","source":"_posts/hexo2.md","raw":"---\ntitle: hexo相关配置以及遇到的问题\ndate: 2016-12-11 19:20:33\nupdated: 2016-12-11 19:20:33\ntags: [hexo,环境搭建]\ncategories: 环境搭建\n---\n\n### 一、如何统计阅读量\n   对着配置看了半天都不知道该去如何设置文章的点击数,看如下的配置阅读量统计也是开启的，怎么不能页面不能显示呢，后来百度才发现是自己太天真了，原来leancloud是需要去注册才能使用的😂😂😂\n   {% codeblock %}\n    ## leancloud --- leancloud 阅读量统计\n    ## {@leancloud:{enable:是否开启,className:创建的class,app_id:,app_key:,region:默认为中国地区,limits:热门文章显示总数}}\n    leancloud:\n      enable: true\n      className: \"baseCounter\"\n      app_id: ''\n      app_key: ''\n      region:\n      limits: 10\n   {% endcodeblock %}    \n   #### 注册<a href=\"https://leancloud.cn/\">LeanCloud</a>，这里不再赘述\n   #### 创建应用\n   ![创建应用][id]\n     \n   [id]: /img/create.png \"create\"\n   \n   #### 创建阅读统计表\n   ![创建class][id2]\n        \n   [id2]: /img/class.png \"class\"\n   \n   ![counter][id3]\n           \n   [id3]: /img/counter.png \"counter\"\n   \n   #### 获取AppID和AppKey\n   ![获取key][id4]\n  \n   [id4]: /img/appkey.png \"appkey\"\n   \n   #### 更改配置\n   {% codeblock %}\n    ## leancloud --- leancloud 阅读量统计\n    ## {@leancloud:{enable:是否开启,className:创建的class,app_id:,app_key:,region:默认为中国地区,limits:热门文章显示总数}}\n    leancloud:\n      enable: true\n      className: \"创建的名字\"\n      app_id: '刚刚拷贝的app_id'\n      app_key: '刚刚拷贝的app_key'\n      region:\n      limits: 10\n   {% endcodeblock %} \n   \n### 二、如何在文章中插入图片\n       其实这里就是markdown的语法了，无奈我不会，因此边学边用图片的语法和链接很像。\n   {% codeblock%} \n    行内形式（title 是选择性的）：\n    \n    ![alt text](/path/to/img.jpg \"Title\")\n    \n    参考形式：\n    \n    ![alt text][id]\n    \n    [id]: /path/to/img.jpg \"Title\"\n    \n    上面两种方法都会输出 HTML 为：\n    \n    <img src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" />\n   {% endcodeblock%}","slug":"hexo2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08e000c8a9kpbdyskbj","content":"<h3 id=\"一、如何统计阅读量\"><a href=\"#一、如何统计阅读量\" class=\"headerlink\" title=\"一、如何统计阅读量\"></a>一、如何统计阅读量</h3><p>   对着配置看了半天都不知道该去如何设置文章的点击数,看如下的配置阅读量统计也是开启的，怎么不能页面不能显示呢，后来百度才发现是自己太天真了，原来leancloud是需要去注册才能使用的😂😂😂<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">## <span class=\"selector-tag\">leancloud</span> <span class=\"selector-tag\">---</span> <span class=\"selector-tag\">leancloud</span> 阅读量统计</div><div class=\"line\">## &#123;<span class=\"variable\">@leancloud:</span>&#123;<span class=\"attribute\">enable</span>:是否开启,<span class=\"attribute\">className</span>:创建的class,<span class=\"attribute\">app_id</span>:,<span class=\"attribute\">app_key</span>:,<span class=\"attribute\">region</span>:默认为中国地区,<span class=\"attribute\">limits</span>:热门文章显示总数&#125;&#125;</div><div class=\"line\"><span class=\"attribute\">leancloud</span>:</div><div class=\"line\">  <span class=\"attribute\">enable</span>: true</div><div class=\"line\">  <span class=\"attribute\">className</span>: <span class=\"string\">\"baseCounter\"</span></div><div class=\"line\">  <span class=\"attribute\">app_id</span>: <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"attribute\">app_key</span>: <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"attribute\">region</span>:</div><div class=\"line\">  <span class=\"attribute\">limits</span>: <span class=\"number\">10</span></div><div class=\"line\">   </div></pre></td></tr></table></figure>    </p>\n<h4 id=\"注册LeanCloud，这里不再赘述\"><a href=\"#注册LeanCloud，这里不再赘述\" class=\"headerlink\" title=\"注册LeanCloud，这里不再赘述\"></a>注册<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">LeanCloud</a>，这里不再赘述</h4><h4 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h4><p>   <img src=\"/img/create.png\" alt=\"创建应用\" title=\"create\"></p>\n<h4 id=\"创建阅读统计表\"><a href=\"#创建阅读统计表\" class=\"headerlink\" title=\"创建阅读统计表\"></a>创建阅读统计表</h4><p>   <img src=\"/img/class.png\" alt=\"创建class\" title=\"class\"></p>\n<p>   <img src=\"/img/counter.png\" alt=\"counter\" title=\"counter\"></p>\n<h4 id=\"获取AppID和AppKey\"><a href=\"#获取AppID和AppKey\" class=\"headerlink\" title=\"获取AppID和AppKey\"></a>获取AppID和AppKey</h4><p>   <img src=\"/img/appkey.png\" alt=\"获取key\" title=\"appkey\"></p>\n<h4 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h4>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">## <span class=\"selector-tag\">leancloud</span> <span class=\"selector-tag\">---</span> <span class=\"selector-tag\">leancloud</span> 阅读量统计</div><div class=\"line\">## &#123;<span class=\"variable\">@leancloud:</span>&#123;<span class=\"attribute\">enable</span>:是否开启,<span class=\"attribute\">className</span>:创建的class,<span class=\"attribute\">app_id</span>:,<span class=\"attribute\">app_key</span>:,<span class=\"attribute\">region</span>:默认为中国地区,<span class=\"attribute\">limits</span>:热门文章显示总数&#125;&#125;</div><div class=\"line\"><span class=\"attribute\">leancloud</span>:</div><div class=\"line\">  <span class=\"attribute\">enable</span>: true</div><div class=\"line\">  <span class=\"attribute\">className</span>: <span class=\"string\">\"创建的名字\"</span></div><div class=\"line\">  <span class=\"attribute\">app_id</span>: <span class=\"string\">'刚刚拷贝的app_id'</span></div><div class=\"line\">  <span class=\"attribute\">app_key</span>: <span class=\"string\">'刚刚拷贝的app_key'</span></div><div class=\"line\">  <span class=\"attribute\">region</span>:</div><div class=\"line\">  <span class=\"attribute\">limits</span>: <span class=\"number\">10</span></div><div class=\"line\">   </div></pre></td></tr></table></figure> \n<h3 id=\"二、如何在文章中插入图片\"><a href=\"#二、如何在文章中插入图片\" class=\"headerlink\" title=\"二、如何在文章中插入图片\"></a>二、如何在文章中插入图片</h3><pre><code>其实这里就是markdown的语法了，无奈我不会，因此边学边用图片的语法和链接很像。\n</code></pre>   <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">行内形式（title 是选择性的）：</div><div class=\"line\"></div><div class=\"line\">![<span class=\"string\">alt text</span>](<span class=\"link\">/path/to/img.jpg \"Title\"</span>)</div><div class=\"line\"></div><div class=\"line\">参考形式：</div><div class=\"line\"></div><div class=\"line\">![<span class=\"string\">alt text</span>][<span class=\"symbol\">id</span>]</div><div class=\"line\"></div><div class=\"line\">[<span class=\"symbol\">id</span>]: <span class=\"link\">/path/to/img.jpg \"Title\"</span></div><div class=\"line\"></div><div class=\"line\">上面两种方法都会输出 HTML 为：</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/img.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"alt text\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Title\"</span> /&gt;</span></span></div><div class=\"line\">   </div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、如何统计阅读量\"><a href=\"#一、如何统计阅读量\" class=\"headerlink\" title=\"一、如何统计阅读量\"></a>一、如何统计阅读量</h3><p>   对着配置看了半天都不知道该去如何设置文章的点击数,看如下的配置阅读量统计也是开启的，怎么不能页面不能显示呢，后来百度才发现是自己太天真了，原来leancloud是需要去注册才能使用的😂😂😂<br>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">## <span class=\"selector-tag\">leancloud</span> <span class=\"selector-tag\">---</span> <span class=\"selector-tag\">leancloud</span> 阅读量统计</div><div class=\"line\">## &#123;<span class=\"variable\">@leancloud:</span>&#123;<span class=\"attribute\">enable</span>:是否开启,<span class=\"attribute\">className</span>:创建的class,<span class=\"attribute\">app_id</span>:,<span class=\"attribute\">app_key</span>:,<span class=\"attribute\">region</span>:默认为中国地区,<span class=\"attribute\">limits</span>:热门文章显示总数&#125;&#125;</div><div class=\"line\"><span class=\"attribute\">leancloud</span>:</div><div class=\"line\">  <span class=\"attribute\">enable</span>: true</div><div class=\"line\">  <span class=\"attribute\">className</span>: <span class=\"string\">\"baseCounter\"</span></div><div class=\"line\">  <span class=\"attribute\">app_id</span>: <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"attribute\">app_key</span>: <span class=\"string\">''</span></div><div class=\"line\">  <span class=\"attribute\">region</span>:</div><div class=\"line\">  <span class=\"attribute\">limits</span>: <span class=\"number\">10</span></div><div class=\"line\">   </div></pre></td></tr></table></figure>    </p>\n<h4 id=\"注册LeanCloud，这里不再赘述\"><a href=\"#注册LeanCloud，这里不再赘述\" class=\"headerlink\" title=\"注册LeanCloud，这里不再赘述\"></a>注册<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">LeanCloud</a>，这里不再赘述</h4><h4 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h4><p>   <img src=\"/img/create.png\" alt=\"创建应用\" title=\"create\"></p>\n<h4 id=\"创建阅读统计表\"><a href=\"#创建阅读统计表\" class=\"headerlink\" title=\"创建阅读统计表\"></a>创建阅读统计表</h4><p>   <img src=\"/img/class.png\" alt=\"创建class\" title=\"class\"></p>\n<p>   <img src=\"/img/counter.png\" alt=\"counter\" title=\"counter\"></p>\n<h4 id=\"获取AppID和AppKey\"><a href=\"#获取AppID和AppKey\" class=\"headerlink\" title=\"获取AppID和AppKey\"></a>获取AppID和AppKey</h4><p>   <img src=\"/img/appkey.png\" alt=\"获取key\" title=\"appkey\"></p>\n<h4 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h4>   <figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">## <span class=\"selector-tag\">leancloud</span> <span class=\"selector-tag\">---</span> <span class=\"selector-tag\">leancloud</span> 阅读量统计</div><div class=\"line\">## &#123;<span class=\"variable\">@leancloud:</span>&#123;<span class=\"attribute\">enable</span>:是否开启,<span class=\"attribute\">className</span>:创建的class,<span class=\"attribute\">app_id</span>:,<span class=\"attribute\">app_key</span>:,<span class=\"attribute\">region</span>:默认为中国地区,<span class=\"attribute\">limits</span>:热门文章显示总数&#125;&#125;</div><div class=\"line\"><span class=\"attribute\">leancloud</span>:</div><div class=\"line\">  <span class=\"attribute\">enable</span>: true</div><div class=\"line\">  <span class=\"attribute\">className</span>: <span class=\"string\">\"创建的名字\"</span></div><div class=\"line\">  <span class=\"attribute\">app_id</span>: <span class=\"string\">'刚刚拷贝的app_id'</span></div><div class=\"line\">  <span class=\"attribute\">app_key</span>: <span class=\"string\">'刚刚拷贝的app_key'</span></div><div class=\"line\">  <span class=\"attribute\">region</span>:</div><div class=\"line\">  <span class=\"attribute\">limits</span>: <span class=\"number\">10</span></div><div class=\"line\">   </div></pre></td></tr></table></figure> \n<h3 id=\"二、如何在文章中插入图片\"><a href=\"#二、如何在文章中插入图片\" class=\"headerlink\" title=\"二、如何在文章中插入图片\"></a>二、如何在文章中插入图片</h3><pre><code>其实这里就是markdown的语法了，无奈我不会，因此边学边用图片的语法和链接很像。\n</code></pre>   <figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div><div class=\"line\">行内形式（title 是选择性的）：</div><div class=\"line\"></div><div class=\"line\">![<span class=\"string\">alt text</span>](<span class=\"link\">/path/to/img.jpg \"Title\"</span>)</div><div class=\"line\"></div><div class=\"line\">参考形式：</div><div class=\"line\"></div><div class=\"line\">![<span class=\"string\">alt text</span>][<span class=\"symbol\">id</span>]</div><div class=\"line\"></div><div class=\"line\">[<span class=\"symbol\">id</span>]: <span class=\"link\">/path/to/img.jpg \"Title\"</span></div><div class=\"line\"></div><div class=\"line\">上面两种方法都会输出 HTML 为：</div><div class=\"line\"></div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/path/to/img.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"alt text\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Title\"</span> /&gt;</span></span></div><div class=\"line\">   </div></pre></td></tr></table></figure>"},{"title":"hexo个人博客多电脑编辑","date":"2017-09-22T13:56:17.000Z","_content":">由于每天上下班带电脑太过麻烦，因此在家里放了一台电脑，那么问题来了，怎么才能在多台电脑上来更新博客，经过百度尝试成功了， 因此记录下来。\n\n### 环境搭建\n1. 在原有的仓库https://github.com/liuyajuan15/liuyajuan15.github.io 下面在创建一个hexo 分支，并设置为默认分支，之前默认为master\n2. 在本地执行└─>[娟姐 😜 👉 git:(hexo*) ]🤑  好好挣钱 🤑️ >> git clone https://github.com/liuyajuan15/liuyajuan15.github.io.git\n3. 进入liuyajuan15.github.io目录，把原来目录的文件拷贝过来，执行git add --all,git commit -m 'change' ,git push origin hexo\n4. 查看一下_config.yml中的deploy参数分支是否是master，默认下是master\n5. 执行hexo clean && hexo g && hexo d 把生成的文件提交到master分支上,这样hexo用来存放网站的原始文件，master分支用来存放生成的静态页面。\n\n### 日常改动\n>平时写博客只需要hexo clean && hexo g && hexo d 执行这个命令，把静态文件部署即可，现在需要多做一步操作\n\n1. git branch 查看当前分支是否为hexo，不做修改的情况下默认为hexo\n2. 依次执行git add .、git commit -m \"...\"、git push origin hexo 将改动推送到github\n3. 执行hexo clean && hexo g && hexo d\n\n### 新电脑使用流程\n1. 在工作目录下执行git clone https://github.com/liuyajuan15/liuyajuan15.github.io.git\n2. 在本地安装node.js,npm,git等\n3. 依次执行npm install hexo,   npm install,   npm install hexo-deployer-git,不需要hexo init这条指令","source":"_posts/hexo3.md","raw":"---\ntitle: hexo个人博客多电脑编辑\ndate: 2017-09-22 21:56:17\ntags: [hexo,环境搭建]\ncategories: 环境搭建\n---\n>由于每天上下班带电脑太过麻烦，因此在家里放了一台电脑，那么问题来了，怎么才能在多台电脑上来更新博客，经过百度尝试成功了， 因此记录下来。\n\n### 环境搭建\n1. 在原有的仓库https://github.com/liuyajuan15/liuyajuan15.github.io 下面在创建一个hexo 分支，并设置为默认分支，之前默认为master\n2. 在本地执行└─>[娟姐 😜 👉 git:(hexo*) ]🤑  好好挣钱 🤑️ >> git clone https://github.com/liuyajuan15/liuyajuan15.github.io.git\n3. 进入liuyajuan15.github.io目录，把原来目录的文件拷贝过来，执行git add --all,git commit -m 'change' ,git push origin hexo\n4. 查看一下_config.yml中的deploy参数分支是否是master，默认下是master\n5. 执行hexo clean && hexo g && hexo d 把生成的文件提交到master分支上,这样hexo用来存放网站的原始文件，master分支用来存放生成的静态页面。\n\n### 日常改动\n>平时写博客只需要hexo clean && hexo g && hexo d 执行这个命令，把静态文件部署即可，现在需要多做一步操作\n\n1. git branch 查看当前分支是否为hexo，不做修改的情况下默认为hexo\n2. 依次执行git add .、git commit -m \"...\"、git push origin hexo 将改动推送到github\n3. 执行hexo clean && hexo g && hexo d\n\n### 新电脑使用流程\n1. 在工作目录下执行git clone https://github.com/liuyajuan15/liuyajuan15.github.io.git\n2. 在本地安装node.js,npm,git等\n3. 依次执行npm install hexo,   npm install,   npm install hexo-deployer-git,不需要hexo init这条指令","slug":"hexo3","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08g000g8a9kccesj2ko","content":"<blockquote>\n<p>由于每天上下班带电脑太过麻烦，因此在家里放了一台电脑，那么问题来了，怎么才能在多台电脑上来更新博客，经过百度尝试成功了， 因此记录下来。</p>\n</blockquote>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><ol>\n<li>在原有的仓库<a href=\"https://github.com/liuyajuan15/liuyajuan15.github.io\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15/liuyajuan15.github.io</a> 下面在创建一个hexo 分支，并设置为默认分支，之前默认为master</li>\n<li>在本地执行└─&gt;[娟姐 😜 👉 git:(hexo*) ]🤑  好好挣钱 🤑️ &gt;&gt; git clone <a href=\"https://github.com/liuyajuan15/liuyajuan15.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15/liuyajuan15.github.io.git</a></li>\n<li>进入liuyajuan15.github.io目录，把原来目录的文件拷贝过来，执行git add –all,git commit -m ‘change’ ,git push origin hexo</li>\n<li>查看一下_config.yml中的deploy参数分支是否是master，默认下是master</li>\n<li>执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 把生成的文件提交到master分支上,这样hexo用来存放网站的原始文件，master分支用来存放生成的静态页面。</li>\n</ol>\n<h3 id=\"日常改动\"><a href=\"#日常改动\" class=\"headerlink\" title=\"日常改动\"></a>日常改动</h3><blockquote>\n<p>平时写博客只需要hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 执行这个命令，把静态文件部署即可，现在需要多做一步操作</p>\n</blockquote>\n<ol>\n<li>git branch 查看当前分支是否为hexo，不做修改的情况下默认为hexo</li>\n<li>依次执行git add .、git commit -m “…”、git push origin hexo 将改动推送到github</li>\n<li>执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ol>\n<h3 id=\"新电脑使用流程\"><a href=\"#新电脑使用流程\" class=\"headerlink\" title=\"新电脑使用流程\"></a>新电脑使用流程</h3><ol>\n<li>在工作目录下执行git clone <a href=\"https://github.com/liuyajuan15/liuyajuan15.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15/liuyajuan15.github.io.git</a></li>\n<li>在本地安装node.js,npm,git等</li>\n<li>依次执行npm install hexo,   npm install,   npm install hexo-deployer-git,不需要hexo init这条指令</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>由于每天上下班带电脑太过麻烦，因此在家里放了一台电脑，那么问题来了，怎么才能在多台电脑上来更新博客，经过百度尝试成功了， 因此记录下来。</p>\n</blockquote>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><ol>\n<li>在原有的仓库<a href=\"https://github.com/liuyajuan15/liuyajuan15.github.io\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15/liuyajuan15.github.io</a> 下面在创建一个hexo 分支，并设置为默认分支，之前默认为master</li>\n<li>在本地执行└─&gt;[娟姐 😜 👉 git:(hexo*) ]🤑  好好挣钱 🤑️ &gt;&gt; git clone <a href=\"https://github.com/liuyajuan15/liuyajuan15.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15/liuyajuan15.github.io.git</a></li>\n<li>进入liuyajuan15.github.io目录，把原来目录的文件拷贝过来，执行git add –all,git commit -m ‘change’ ,git push origin hexo</li>\n<li>查看一下_config.yml中的deploy参数分支是否是master，默认下是master</li>\n<li>执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 把生成的文件提交到master分支上,这样hexo用来存放网站的原始文件，master分支用来存放生成的静态页面。</li>\n</ol>\n<h3 id=\"日常改动\"><a href=\"#日常改动\" class=\"headerlink\" title=\"日常改动\"></a>日常改动</h3><blockquote>\n<p>平时写博客只需要hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 执行这个命令，把静态文件部署即可，现在需要多做一步操作</p>\n</blockquote>\n<ol>\n<li>git branch 查看当前分支是否为hexo，不做修改的情况下默认为hexo</li>\n<li>依次执行git add .、git commit -m “…”、git push origin hexo 将改动推送到github</li>\n<li>执行hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ol>\n<h3 id=\"新电脑使用流程\"><a href=\"#新电脑使用流程\" class=\"headerlink\" title=\"新电脑使用流程\"></a>新电脑使用流程</h3><ol>\n<li>在工作目录下执行git clone <a href=\"https://github.com/liuyajuan15/liuyajuan15.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/liuyajuan15/liuyajuan15.github.io.git</a></li>\n<li>在本地安装node.js,npm,git等</li>\n<li>依次执行npm install hexo,   npm install,   npm install hexo-deployer-git,不需要hexo init这条指令</li>\n</ol>\n"},{"title":"laravel框架中常用PHP语法","date":"2017-09-08T01:51:06.000Z","_content":"### 一、文件包含\n\n#### 1.include与require\n\n * 共同点：include与require关键字用于包含并运行指定文件。\n * 不同点：两者作用几乎一样，只是处理失败的方式不同。require在出错时产生E_COMPILE_ERROR级别的错误，因此会导致脚本程序运行终止，而include则是会产生E_WARNING级别错误，只会发出警告，而脚本程序会继续运行。\n * 查找路径的方式\n  {% codeblock %}\n   if(如果定义了路径，不管绝对路径还是相对路径){\n        include_path会被忽略，按参数给出的路径寻找；\n   }else if(只有文件名，没有目录名){\n        则按照include_path指定的目录寻找；\n   }else if(include_path没有){\n        在调用脚本所在的目录和当前工作目录下寻找\n   }else{\n        Include 发出一条警告，require发生一个致命错误\n   }\n  {% endcodeblock %}\n * include查找路径的方式比较，推荐由高到低\n  1. 通过当前路径查找，好处是迁移到别的项目时什么都不用改\n  2. 使用include_path，即默认路径，迁移项目是需要改php.ini\n  3. 绝对路径，迁移项目时需要改代码\n  4. 相对路径，迁移项目时什么都不用改，但是为什么不推荐，是因为当被多人include时，会存在bug\n    1).文件存储如下图所示，当a.php include b.php，c.php include a.php\n    2).当单独访问a.php没有问题，但是访问c.php就会报错，找不到b.php\n\n   ![include][id]\n    \n   [id]: /img/include.jpg \"include\"\n * 如果包含了一个定义了路径的文件，如include “../file.php”,无论是相对路径还是绝对路径，系统只会在相应的路径下寻找该文件，例如一个文件以“../”开头，则解析器会在当前目录的父目录下寻找该文件。当一个文件被包含时，包含文件则继承了被包含文件拥有的变量，从该处开始，被包含文件可用的任何变量在包含的文件中也都可用，同时在被包含文件中定义的函数，类或者常量都具有全局作用域。\n   \n#### 2.类的自动加载   \n#### 3.laravel中的实现\n       \n       \n  注：以上内容参考《PHP手册》和《laravel框架关键技术解析》以及laravel源代码","source":"_posts/laravel-3.md","raw":"---\ntitle: laravel框架中常用PHP语法\ndate: 2017-09-08 09:51:06\ntags: laravel\ncategories: 框架分析\n---\n### 一、文件包含\n\n#### 1.include与require\n\n * 共同点：include与require关键字用于包含并运行指定文件。\n * 不同点：两者作用几乎一样，只是处理失败的方式不同。require在出错时产生E_COMPILE_ERROR级别的错误，因此会导致脚本程序运行终止，而include则是会产生E_WARNING级别错误，只会发出警告，而脚本程序会继续运行。\n * 查找路径的方式\n  {% codeblock %}\n   if(如果定义了路径，不管绝对路径还是相对路径){\n        include_path会被忽略，按参数给出的路径寻找；\n   }else if(只有文件名，没有目录名){\n        则按照include_path指定的目录寻找；\n   }else if(include_path没有){\n        在调用脚本所在的目录和当前工作目录下寻找\n   }else{\n        Include 发出一条警告，require发生一个致命错误\n   }\n  {% endcodeblock %}\n * include查找路径的方式比较，推荐由高到低\n  1. 通过当前路径查找，好处是迁移到别的项目时什么都不用改\n  2. 使用include_path，即默认路径，迁移项目是需要改php.ini\n  3. 绝对路径，迁移项目时需要改代码\n  4. 相对路径，迁移项目时什么都不用改，但是为什么不推荐，是因为当被多人include时，会存在bug\n    1).文件存储如下图所示，当a.php include b.php，c.php include a.php\n    2).当单独访问a.php没有问题，但是访问c.php就会报错，找不到b.php\n\n   ![include][id]\n    \n   [id]: /img/include.jpg \"include\"\n * 如果包含了一个定义了路径的文件，如include “../file.php”,无论是相对路径还是绝对路径，系统只会在相应的路径下寻找该文件，例如一个文件以“../”开头，则解析器会在当前目录的父目录下寻找该文件。当一个文件被包含时，包含文件则继承了被包含文件拥有的变量，从该处开始，被包含文件可用的任何变量在包含的文件中也都可用，同时在被包含文件中定义的函数，类或者常量都具有全局作用域。\n   \n#### 2.类的自动加载   \n#### 3.laravel中的实现\n       \n       \n  注：以上内容参考《PHP手册》和《laravel框架关键技术解析》以及laravel源代码","slug":"laravel-3","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08h000h8a9kso8cc33f","content":"<h3 id=\"一、文件包含\"><a href=\"#一、文件包含\" class=\"headerlink\" title=\"一、文件包含\"></a>一、文件包含</h3><h4 id=\"1-include与require\"><a href=\"#1-include与require\" class=\"headerlink\" title=\"1.include与require\"></a>1.include与require</h4><ul>\n<li>共同点：include与require关键字用于包含并运行指定文件。</li>\n<li>不同点：两者作用几乎一样，只是处理失败的方式不同。require在出错时产生E_COMPILE_ERROR级别的错误，因此会导致脚本程序运行终止，而include则是会产生E_WARNING级别错误，只会发出警告，而脚本程序会继续运行。</li>\n<li>查找路径的方式<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(如果定义了路径，不管绝对路径还是相对路径)&#123;</div><div class=\"line\">     include_path会被忽略，按参数给出的路径寻找；</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(只有文件名，没有目录名)&#123;</div><div class=\"line\">     则按照include_path指定的目录寻找；</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(include_path没有)&#123;</div><div class=\"line\">     在调用脚本所在的目录和当前工作目录下寻找</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     Include 发出一条警告，require发生一个致命错误</div><div class=\"line\">&#125;</div><div class=\"line\">  </div></pre></td></tr></table></figure></li>\n<li><p>include查找路径的方式比较，推荐由高到低</p>\n<ol>\n<li>通过当前路径查找，好处是迁移到别的项目时什么都不用改</li>\n<li>使用include_path，即默认路径，迁移项目是需要改php.ini</li>\n<li>绝对路径，迁移项目时需要改代码</li>\n<li>相对路径，迁移项目时什么都不用改，但是为什么不推荐，是因为当被多人include时，会存在bug<br>1).文件存储如下图所示，当a.php include b.php，c.php include a.php<br>2).当单独访问a.php没有问题，但是访问c.php就会报错，找不到b.php</li>\n</ol>\n<p><img src=\"/img/include.jpg\" alt=\"include\" title=\"include\"></p>\n</li>\n</ul>\n<ul>\n<li>如果包含了一个定义了路径的文件，如include “../file.php”,无论是相对路径还是绝对路径，系统只会在相应的路径下寻找该文件，例如一个文件以“../”开头，则解析器会在当前目录的父目录下寻找该文件。当一个文件被包含时，包含文件则继承了被包含文件拥有的变量，从该处开始，被包含文件可用的任何变量在包含的文件中也都可用，同时在被包含文件中定义的函数，类或者常量都具有全局作用域。</li>\n</ul>\n<h4 id=\"2-类的自动加载\"><a href=\"#2-类的自动加载\" class=\"headerlink\" title=\"2.类的自动加载\"></a>2.类的自动加载</h4><h4 id=\"3-laravel中的实现\"><a href=\"#3-laravel中的实现\" class=\"headerlink\" title=\"3.laravel中的实现\"></a>3.laravel中的实现</h4><p>  注：以上内容参考《PHP手册》和《laravel框架关键技术解析》以及laravel源代码</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、文件包含\"><a href=\"#一、文件包含\" class=\"headerlink\" title=\"一、文件包含\"></a>一、文件包含</h3><h4 id=\"1-include与require\"><a href=\"#1-include与require\" class=\"headerlink\" title=\"1.include与require\"></a>1.include与require</h4><ul>\n<li>共同点：include与require关键字用于包含并运行指定文件。</li>\n<li>不同点：两者作用几乎一样，只是处理失败的方式不同。require在出错时产生E_COMPILE_ERROR级别的错误，因此会导致脚本程序运行终止，而include则是会产生E_WARNING级别错误，只会发出警告，而脚本程序会继续运行。</li>\n<li>查找路径的方式<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(如果定义了路径，不管绝对路径还是相对路径)&#123;</div><div class=\"line\">     include_path会被忽略，按参数给出的路径寻找；</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(只有文件名，没有目录名)&#123;</div><div class=\"line\">     则按照include_path指定的目录寻找；</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(include_path没有)&#123;</div><div class=\"line\">     在调用脚本所在的目录和当前工作目录下寻找</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     Include 发出一条警告，require发生一个致命错误</div><div class=\"line\">&#125;</div><div class=\"line\">  </div></pre></td></tr></table></figure></li>\n<li><p>include查找路径的方式比较，推荐由高到低</p>\n<ol>\n<li>通过当前路径查找，好处是迁移到别的项目时什么都不用改</li>\n<li>使用include_path，即默认路径，迁移项目是需要改php.ini</li>\n<li>绝对路径，迁移项目时需要改代码</li>\n<li>相对路径，迁移项目时什么都不用改，但是为什么不推荐，是因为当被多人include时，会存在bug<br>1).文件存储如下图所示，当a.php include b.php，c.php include a.php<br>2).当单独访问a.php没有问题，但是访问c.php就会报错，找不到b.php</li>\n</ol>\n<p><img src=\"/img/include.jpg\" alt=\"include\" title=\"include\"></p>\n</li>\n</ul>\n<ul>\n<li>如果包含了一个定义了路径的文件，如include “../file.php”,无论是相对路径还是绝对路径，系统只会在相应的路径下寻找该文件，例如一个文件以“../”开头，则解析器会在当前目录的父目录下寻找该文件。当一个文件被包含时，包含文件则继承了被包含文件拥有的变量，从该处开始，被包含文件可用的任何变量在包含的文件中也都可用，同时在被包含文件中定义的函数，类或者常量都具有全局作用域。</li>\n</ul>\n<h4 id=\"2-类的自动加载\"><a href=\"#2-类的自动加载\" class=\"headerlink\" title=\"2.类的自动加载\"></a>2.类的自动加载</h4><h4 id=\"3-laravel中的实现\"><a href=\"#3-laravel中的实现\" class=\"headerlink\" title=\"3.laravel中的实现\"></a>3.laravel中的实现</h4><p>  注：以上内容参考《PHP手册》和《laravel框架关键技术解析》以及laravel源代码</p>\n"},{"title":"《程序员的数学思维修炼》整理","date":"2017-02-22T03:59:06.000Z","_content":">最近上下班路上再看《程序员的数学思维修炼》，因此整理一下读书心得，仅供记录,整理可能需要较长时间，边读边整理\n\n* [数据的表示](#one)\n* [神奇的素数](#two)\n* [递归-自己调用自己](#three)\n* [排列组合-让数选边站队](#four)\n* [余数-数据分组](#five)\n* [概率-你运气好吗](#six)\n* [翻一番是多少](#seven)\n* [数理逻辑-非此即彼](#eight)\n* [推理-逻辑的应用](#nine)\n* [几何图形构造](#ten)\n* [统筹规划](#eleven)\n\n### <a name=\"one\">数据的表示</a>","source":"_posts/math.md","raw":"---\ntitle: 《程序员的数学思维修炼》整理\ndate: 2017-02-22 11:59:06\ntags: 其他\ncategories: 其他\n---\n>最近上下班路上再看《程序员的数学思维修炼》，因此整理一下读书心得，仅供记录,整理可能需要较长时间，边读边整理\n\n* [数据的表示](#one)\n* [神奇的素数](#two)\n* [递归-自己调用自己](#three)\n* [排列组合-让数选边站队](#four)\n* [余数-数据分组](#five)\n* [概率-你运气好吗](#six)\n* [翻一番是多少](#seven)\n* [数理逻辑-非此即彼](#eight)\n* [推理-逻辑的应用](#nine)\n* [几何图形构造](#ten)\n* [统筹规划](#eleven)\n\n### <a name=\"one\">数据的表示</a>","slug":"math","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08k000l8a9kurrojo2h","content":"<blockquote>\n<p>最近上下班路上再看《程序员的数学思维修炼》，因此整理一下读书心得，仅供记录,整理可能需要较长时间，边读边整理</p>\n</blockquote>\n<ul>\n<li><a href=\"#one\">数据的表示</a></li>\n<li><a href=\"#two\">神奇的素数</a></li>\n<li><a href=\"#three\">递归-自己调用自己</a></li>\n<li><a href=\"#four\">排列组合-让数选边站队</a></li>\n<li><a href=\"#five\">余数-数据分组</a></li>\n<li><a href=\"#six\">概率-你运气好吗</a></li>\n<li><a href=\"#seven\">翻一番是多少</a></li>\n<li><a href=\"#eight\">数理逻辑-非此即彼</a></li>\n<li><a href=\"#nine\">推理-逻辑的应用</a></li>\n<li><a href=\"#ten\">几何图形构造</a></li>\n<li><a href=\"#eleven\">统筹规划</a></li>\n</ul>\n<h3 id=\"数据的表示\"><a href=\"#数据的表示\" class=\"headerlink\" title=\"数据的表示\"></a><a name=\"one\">数据的表示</a></h3>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>最近上下班路上再看《程序员的数学思维修炼》，因此整理一下读书心得，仅供记录,整理可能需要较长时间，边读边整理</p>\n</blockquote>\n<ul>\n<li><a href=\"#one\">数据的表示</a></li>\n<li><a href=\"#two\">神奇的素数</a></li>\n<li><a href=\"#three\">递归-自己调用自己</a></li>\n<li><a href=\"#four\">排列组合-让数选边站队</a></li>\n<li><a href=\"#five\">余数-数据分组</a></li>\n<li><a href=\"#six\">概率-你运气好吗</a></li>\n<li><a href=\"#seven\">翻一番是多少</a></li>\n<li><a href=\"#eight\">数理逻辑-非此即彼</a></li>\n<li><a href=\"#nine\">推理-逻辑的应用</a></li>\n<li><a href=\"#ten\">几何图形构造</a></li>\n<li><a href=\"#eleven\">统筹规划</a></li>\n</ul>\n<h3 id=\"数据的表示\"><a href=\"#数据的表示\" class=\"headerlink\" title=\"数据的表示\"></a><a name=\"one\">数据的表示</a></h3>"},{"title":"MySQL执行顺序","date":"2017-09-07T13:52:19.000Z","_content":"![执行顺序][id]\n    \n[id]: /img/mysql.jpg \"MySQL执行顺序\"\n\n1. FORM: 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1\n2. ON: 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。\n3. JOIN： 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。\n4. WHERE： 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。\n5. GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.\n6. CUBE | ROLLUP: 对表VT5进行cube或者rollup操作，产生表VT6.\n7. HAVING： 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。\n8. SELECT： 执行select操作，选择指定的列，插入到虚拟表VT8中。\n9. DISTINCT： 对VT8中的记录进行去重。产生虚拟表VT9.\n10. ORDER BY: 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10.\n11. LIMIT：取出指定行的记录，产生虚拟表VT11, 并将结果返回。\n\n","source":"_posts/mysql.md","raw":"---\ntitle: MySQL执行顺序\ndate: 2017-09-07 21:52:19\ntags: MySQL\ncategories: MySQL\n\n---\n![执行顺序][id]\n    \n[id]: /img/mysql.jpg \"MySQL执行顺序\"\n\n1. FORM: 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1\n2. ON: 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。\n3. JOIN： 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。\n4. WHERE： 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。\n5. GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.\n6. CUBE | ROLLUP: 对表VT5进行cube或者rollup操作，产生表VT6.\n7. HAVING： 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。\n8. SELECT： 执行select操作，选择指定的列，插入到虚拟表VT8中。\n9. DISTINCT： 对VT8中的记录进行去重。产生虚拟表VT9.\n10. ORDER BY: 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10.\n11. LIMIT：取出指定行的记录，产生虚拟表VT11, 并将结果返回。\n\n","slug":"mysql","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08m000m8a9k1rlkg5tk","content":"<p><img src=\"/img/mysql.jpg\" alt=\"执行顺序\" title=\"MySQL执行顺序\"></p>\n<ol>\n<li>FORM: 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1</li>\n<li>ON: 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。</join-condition></li>\n<li>JOIN： 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。</li>\n<li>WHERE： 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。</where-condition></li>\n<li>GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.</li>\n<li>CUBE | ROLLUP: 对表VT5进行cube或者rollup操作，产生表VT6.</li>\n<li>HAVING： 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。</having-condition></li>\n<li>SELECT： 执行select操作，选择指定的列，插入到虚拟表VT8中。</li>\n<li>DISTINCT： 对VT8中的记录进行去重。产生虚拟表VT9.</li>\n<li>ORDER BY: 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10.</order_by_list></li>\n<li>LIMIT：取出指定行的记录，产生虚拟表VT11, 并将结果返回。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/mysql.jpg\" alt=\"执行顺序\" title=\"MySQL执行顺序\"></p>\n<ol>\n<li>FORM: 对FROM的左边的表和右边的表计算笛卡尔积。产生虚表VT1</li>\n<li>ON: 对虚表VT1进行ON筛选，只有那些符合<join-condition>的行才会被记录在虚表VT2中。</join-condition></li>\n<li>JOIN： 如果指定了OUTER JOIN（比如left join、 right join），那么保留表中未匹配的行就会作为外部行添加到虚拟表VT2中，产生虚拟表VT3, rug from子句中包含两个以上的表的话，那么就会对上一个join连接产生的结果VT3和下一个表重复执行步骤1~3这三个步骤，一直到处理完所有的表为止。</li>\n<li>WHERE： 对虚拟表VT3进行WHERE条件过滤。只有符合<where-condition>的记录才会被插入到虚拟表VT4中。</where-condition></li>\n<li>GROUP BY: 根据group by子句中的列，对VT4中的记录进行分组操作，产生VT5.</li>\n<li>CUBE | ROLLUP: 对表VT5进行cube或者rollup操作，产生表VT6.</li>\n<li>HAVING： 对虚拟表VT6应用having过滤，只有符合<having-condition>的记录才会被 插入到虚拟表VT7中。</having-condition></li>\n<li>SELECT： 执行select操作，选择指定的列，插入到虚拟表VT8中。</li>\n<li>DISTINCT： 对VT8中的记录进行去重。产生虚拟表VT9.</li>\n<li>ORDER BY: 将虚拟表VT9中的记录按照<order_by_list>进行排序操作，产生虚拟表VT10.</order_by_list></li>\n<li>LIMIT：取出指定行的记录，产生虚拟表VT11, 并将结果返回。</li>\n</ol>\n"},{"title":"正则表达式基本介绍","date":"2017-09-12T07:41:25.000Z","_content":"> 认识了解正则表达式也有几年了，每次要用时就百度下如何使用，对于转义到底该用几个'\\'总是弄不清楚，因此想抽出一大块时间来做这件事，彻彻底底的来了解正则，以下内容参考《PHP手册》和《精通正则表达式》和[Zjmainstay学习笔记](http://www.zjmainstay.cn/my-regexp) 相关教程\n\n### 一、元字符：\n\n##### 一、匹配位置的元字符 ，<a>匹配的是一个位置，而非文本</a>\n\n1. 脱字符 ^ : 表示匹配行首的文本\n2. 美元符号$ : 表示匹配行尾的文本\n3. 单词分界符 : \\b匹配单词的开始或者结束\n4. \\B : 匹配不是单词开头或结束的位置\n\n##### 二、匹配计数功能的元字符\n\n1. * : 匹配0次到多次   **匹配优先量词*，匹配尽可能多的内容*\n2. + :  匹配一次到多次，最少匹配1次 **匹配优先量词*，匹配尽可能多的内容*\n3. ？: 匹配0次或者1次 **匹配优先量词*，匹配尽可能多的内容*\n4. {min,max} : 匹配min次到max次 **匹配优先量词*，匹配尽可能多的内容*\n5. {min,} : 最少匹配min次\n6. *?,+?,??,{min,max}?  **忽略优先量词，匹配尽可能少的内容，跟非贪婪模式有关**\n7. *+,++,?+,{min,max}+  **占有优先量词，类似普通匹配优先，一旦匹配某些内容，就不会交还，类似固化分组**\n\n##### 三、匹配单个字符的元字符\n\n1. [] : 字符组，匹配若干字符之一,匹配被中括号括起来的其中一个，相当于或。 例如gr[ea]y 匹配grey或者gray\n2. [^x] : 排除型字符组 匹配一个不等于X的字符，<a>\"匹配一个未列出的字符\"，而不是\"不要匹配列出的字符\"</a>\n3. . : 匹配单个任意字符\n4. \\char : 转义字符\n5. \\w : 匹配字母或数字或下划线或汉字\n6. \\s : 匹配任意的空白符\n7. \\d : 匹配数字\n8. \\W : 匹配任意不是字母，数字，下划线，汉字的字符\n9. \\S : 匹配任意不是空白符的字符\n10. \\D : 匹配任意非数字的字符\n\n##### 四、其他元字符\n\n1. | : 匹配任意分隔的表达式，php|java|linux 匹配php或java或者linux ,[]中如果是单个字符，直接写即可，如果是多个字符，则需要用|分开\n2. () : 一是限定多选结构的范围，而是为反向引用捕获文本\n3. \\1,\\2 : 反向引用 匹配之前的第一组，第二组括号捕获的文本\n\n##### 五、对以上个别元字符的详细解析：\n\n1. 脱字符^ ,有两个作用，一个是表示匹配行首的文本，另外一个是排除，在[]里面的是排除的意思，不在[]里面的是匹配行首的意思\n2. 字符组[],H[1-6]等同于H[123456],连字符-只有在[]内才为元字符，在外面为-本意\n3. 转义字符\\char ，一个特殊字符前面加上\\表示转义，特殊字符包括：()[]{}.*+?|\\^$/\n4. () 括号有多个意思，详细内容见以下的分组捕获，当作用为限定多选结构的范围时，需要和[]进行区分 (Fri|1)st 匹配first 或1st ，但是Fri|1st就是匹配 Fri或1st\n\n### 二、模式修饰符：\n\n>PHP模式修饰符又叫模式修正符，是在正则表达式的定界符之外使用。主要用来调整正则表达式的解释，提扩展了正则表达式在匹配、替换等操作的某些功能，增强了正则的能力。\n\n1. i **不区分大小写**，(?i) 如果设置了这个修饰符，'a'和'A'是一样的。\n2. s **单行模式**，(?s)如果设定了这个修正符，那么，被匹配的字符串将视为一行来看，包括换行符，换行符将被视为普通字符串。\n3. m **多行匹配模式**，(?m)将字符串视为多行。默认的正则开始“^”和结束“$”将目标字条串作为一单一的一“行”字符（甚至其中包括换行符也是如此）。如果在修饰符中加上“m”，那么开始和结束将会指点字符串的每一行的开头就是“^”结束就是“$”。\n4. x **忽略空白**，(?x)正则表达式中的“空白字符”和“换行符”将会被忽略，除非它已经被转义，同时#号（#）被解释为注释的开头\n5. e 只用在preg_replace()函数中，在替换字符串中逆向引用做正常的替换，将其(即“替换字符串”)作为PHP代码求值，并用其结果来替换所搜索的字符串。\n6. A 如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说”/a/A”匹配”abcd”。\n7. D 模式中的$字符权匹配目标字符的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。如果设定了修正符m则忽略此项。\n8. E 与”m”相反，如果使用这个修饰符，那么”$”将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。\n9. U **设置贪婪模式**，(?U)和问号的作用差不多，最大限度的匹配就是贪婪模式。 **贪婪模式会有一篇单独的笔记来记录**\n\n```php\n//不区分大小写 i\n$s = \"First line Second LINE\";\npreg_match_all(\"/line/i\",$s,$m);\nprint_r($m); //Array ( [0] => Array ( [0] => line [1] => LINE ) )\n\n//多行匹配模式 m\n$s = \"First line\\nSecond line\";\npreg_match_all(\"/^\\w/m\",$s,$m);\nprint_r($m);//Array ( [0] => Array ( [0] => F [1] => S ) )\n\n//单行匹配模式 s\n$s = \"First line\\nSecond line\";\npreg_match_all(\"/^\\w/s\",$s,$m);\nprint_r($m); //Array ( [0] => Array ( [0] => F ) )\n\n//忽略正则表达式中的“非转义的空白字符”和“回车换号符”\n$p = \"abc #category code\\n123 #item number\";\n$s = \"abc123\";\npreg_match_all(\"/\".$p.\"/x\",$s,$m);\nvar_dump($m); //abc123，相当于匹配abc123\n\n//必须是字符串中的开头部分A\n$s = \"abcba\";\npreg_match_all(\"/a/A\",$s,$m); //a\n\n$s = \"abcba\";\npreg_match_all(\"/a/\",$s,$m); //两个a都会被匹配到\n```\n\n>部分修饰符还可以用于表达式内部\n* (?i)用来启用不区分大小写的匹配，(?-i)停用，此时，他们的作用范围持续到对应的括号结束\n\n### <a name=\"fenzu\">三、分组捕获</a>\n\n>()在正则中有两种用途：分组和捕获\n\n1. 普通捕获 **(pattern)** 匹配pattern并捕获结果，自动设置组号\n2. 命名捕获 **(?\\<name\\>pattern) 或者 (?'name'pattern)**  匹配pattern并捕获结果，设置name为组名，普通捕获的0，1，2，数字还会捕获到\n3. 普通捕获组的反向引用 **\\1,\\2** ,(\\w)(\\d)\\2\\1,匹配a11a\n4. 命名捕获组的反向引用  **\\k\\<name\\> 或者 \\k'name'**  (?\\<group\\>\\d)abc\\k\\<group\\> 匹配1abc1\n5. 非捕获型括号**(?:exp)**,仅用于分组，不能用来提取文本，只能用来规定多选结构或者量词的作用对象 (1|one)(?:and|or)(2|two) 匹配之后，$1包含1或者one ,$2包含2或者two\n6. 固化分组(?<)\n7. 让多个子组可以共用一个后向引用数字(?|)\n**(?| 语法允许复制数字。 考虑下面的正则表达式匹配Sunday：\n(?:(Sat)ur|(Sun))day\n这里当后向引用 1 空时Sun 存储在后向引用 2 中. 当后向引用 2 不存在的时候 Sat 存储在后向引用 1中。 使用 (?|修改模式来修复这个问题：\n(?|(Sat)ur|(Sun))day\n使用这个模式， Sun和Sat都会被存储到后向引用1中。**\n","source":"_posts/regex1.md","raw":"---\ntitle: 正则表达式基本介绍\ndate: 2017-09-12 15:41:25\ntags: 正则表达式\ncategories: 正则表达式\n---\n> 认识了解正则表达式也有几年了，每次要用时就百度下如何使用，对于转义到底该用几个'\\'总是弄不清楚，因此想抽出一大块时间来做这件事，彻彻底底的来了解正则，以下内容参考《PHP手册》和《精通正则表达式》和[Zjmainstay学习笔记](http://www.zjmainstay.cn/my-regexp) 相关教程\n\n### 一、元字符：\n\n##### 一、匹配位置的元字符 ，<a>匹配的是一个位置，而非文本</a>\n\n1. 脱字符 ^ : 表示匹配行首的文本\n2. 美元符号$ : 表示匹配行尾的文本\n3. 单词分界符 : \\b匹配单词的开始或者结束\n4. \\B : 匹配不是单词开头或结束的位置\n\n##### 二、匹配计数功能的元字符\n\n1. * : 匹配0次到多次   **匹配优先量词*，匹配尽可能多的内容*\n2. + :  匹配一次到多次，最少匹配1次 **匹配优先量词*，匹配尽可能多的内容*\n3. ？: 匹配0次或者1次 **匹配优先量词*，匹配尽可能多的内容*\n4. {min,max} : 匹配min次到max次 **匹配优先量词*，匹配尽可能多的内容*\n5. {min,} : 最少匹配min次\n6. *?,+?,??,{min,max}?  **忽略优先量词，匹配尽可能少的内容，跟非贪婪模式有关**\n7. *+,++,?+,{min,max}+  **占有优先量词，类似普通匹配优先，一旦匹配某些内容，就不会交还，类似固化分组**\n\n##### 三、匹配单个字符的元字符\n\n1. [] : 字符组，匹配若干字符之一,匹配被中括号括起来的其中一个，相当于或。 例如gr[ea]y 匹配grey或者gray\n2. [^x] : 排除型字符组 匹配一个不等于X的字符，<a>\"匹配一个未列出的字符\"，而不是\"不要匹配列出的字符\"</a>\n3. . : 匹配单个任意字符\n4. \\char : 转义字符\n5. \\w : 匹配字母或数字或下划线或汉字\n6. \\s : 匹配任意的空白符\n7. \\d : 匹配数字\n8. \\W : 匹配任意不是字母，数字，下划线，汉字的字符\n9. \\S : 匹配任意不是空白符的字符\n10. \\D : 匹配任意非数字的字符\n\n##### 四、其他元字符\n\n1. | : 匹配任意分隔的表达式，php|java|linux 匹配php或java或者linux ,[]中如果是单个字符，直接写即可，如果是多个字符，则需要用|分开\n2. () : 一是限定多选结构的范围，而是为反向引用捕获文本\n3. \\1,\\2 : 反向引用 匹配之前的第一组，第二组括号捕获的文本\n\n##### 五、对以上个别元字符的详细解析：\n\n1. 脱字符^ ,有两个作用，一个是表示匹配行首的文本，另外一个是排除，在[]里面的是排除的意思，不在[]里面的是匹配行首的意思\n2. 字符组[],H[1-6]等同于H[123456],连字符-只有在[]内才为元字符，在外面为-本意\n3. 转义字符\\char ，一个特殊字符前面加上\\表示转义，特殊字符包括：()[]{}.*+?|\\^$/\n4. () 括号有多个意思，详细内容见以下的分组捕获，当作用为限定多选结构的范围时，需要和[]进行区分 (Fri|1)st 匹配first 或1st ，但是Fri|1st就是匹配 Fri或1st\n\n### 二、模式修饰符：\n\n>PHP模式修饰符又叫模式修正符，是在正则表达式的定界符之外使用。主要用来调整正则表达式的解释，提扩展了正则表达式在匹配、替换等操作的某些功能，增强了正则的能力。\n\n1. i **不区分大小写**，(?i) 如果设置了这个修饰符，'a'和'A'是一样的。\n2. s **单行模式**，(?s)如果设定了这个修正符，那么，被匹配的字符串将视为一行来看，包括换行符，换行符将被视为普通字符串。\n3. m **多行匹配模式**，(?m)将字符串视为多行。默认的正则开始“^”和结束“$”将目标字条串作为一单一的一“行”字符（甚至其中包括换行符也是如此）。如果在修饰符中加上“m”，那么开始和结束将会指点字符串的每一行的开头就是“^”结束就是“$”。\n4. x **忽略空白**，(?x)正则表达式中的“空白字符”和“换行符”将会被忽略，除非它已经被转义，同时#号（#）被解释为注释的开头\n5. e 只用在preg_replace()函数中，在替换字符串中逆向引用做正常的替换，将其(即“替换字符串”)作为PHP代码求值，并用其结果来替换所搜索的字符串。\n6. A 如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说”/a/A”匹配”abcd”。\n7. D 模式中的$字符权匹配目标字符的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。如果设定了修正符m则忽略此项。\n8. E 与”m”相反，如果使用这个修饰符，那么”$”将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。\n9. U **设置贪婪模式**，(?U)和问号的作用差不多，最大限度的匹配就是贪婪模式。 **贪婪模式会有一篇单独的笔记来记录**\n\n```php\n//不区分大小写 i\n$s = \"First line Second LINE\";\npreg_match_all(\"/line/i\",$s,$m);\nprint_r($m); //Array ( [0] => Array ( [0] => line [1] => LINE ) )\n\n//多行匹配模式 m\n$s = \"First line\\nSecond line\";\npreg_match_all(\"/^\\w/m\",$s,$m);\nprint_r($m);//Array ( [0] => Array ( [0] => F [1] => S ) )\n\n//单行匹配模式 s\n$s = \"First line\\nSecond line\";\npreg_match_all(\"/^\\w/s\",$s,$m);\nprint_r($m); //Array ( [0] => Array ( [0] => F ) )\n\n//忽略正则表达式中的“非转义的空白字符”和“回车换号符”\n$p = \"abc #category code\\n123 #item number\";\n$s = \"abc123\";\npreg_match_all(\"/\".$p.\"/x\",$s,$m);\nvar_dump($m); //abc123，相当于匹配abc123\n\n//必须是字符串中的开头部分A\n$s = \"abcba\";\npreg_match_all(\"/a/A\",$s,$m); //a\n\n$s = \"abcba\";\npreg_match_all(\"/a/\",$s,$m); //两个a都会被匹配到\n```\n\n>部分修饰符还可以用于表达式内部\n* (?i)用来启用不区分大小写的匹配，(?-i)停用，此时，他们的作用范围持续到对应的括号结束\n\n### <a name=\"fenzu\">三、分组捕获</a>\n\n>()在正则中有两种用途：分组和捕获\n\n1. 普通捕获 **(pattern)** 匹配pattern并捕获结果，自动设置组号\n2. 命名捕获 **(?\\<name\\>pattern) 或者 (?'name'pattern)**  匹配pattern并捕获结果，设置name为组名，普通捕获的0，1，2，数字还会捕获到\n3. 普通捕获组的反向引用 **\\1,\\2** ,(\\w)(\\d)\\2\\1,匹配a11a\n4. 命名捕获组的反向引用  **\\k\\<name\\> 或者 \\k'name'**  (?\\<group\\>\\d)abc\\k\\<group\\> 匹配1abc1\n5. 非捕获型括号**(?:exp)**,仅用于分组，不能用来提取文本，只能用来规定多选结构或者量词的作用对象 (1|one)(?:and|or)(2|two) 匹配之后，$1包含1或者one ,$2包含2或者two\n6. 固化分组(?<)\n7. 让多个子组可以共用一个后向引用数字(?|)\n**(?| 语法允许复制数字。 考虑下面的正则表达式匹配Sunday：\n(?:(Sat)ur|(Sun))day\n这里当后向引用 1 空时Sun 存储在后向引用 2 中. 当后向引用 2 不存在的时候 Sat 存储在后向引用 1中。 使用 (?|修改模式来修复这个问题：\n(?|(Sat)ur|(Sun))day\n使用这个模式， Sun和Sat都会被存储到后向引用1中。**\n","slug":"regex1","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08q000q8a9k2p7cfkil","content":"<blockquote>\n<p>认识了解正则表达式也有几年了，每次要用时就百度下如何使用，对于转义到底该用几个’\\’总是弄不清楚，因此想抽出一大块时间来做这件事，彻彻底底的来了解正则，以下内容参考《PHP手册》和《精通正则表达式》和<a href=\"http://www.zjmainstay.cn/my-regexp\" target=\"_blank\" rel=\"external\">Zjmainstay学习笔记</a> 相关教程</p>\n</blockquote>\n<h3 id=\"一、元字符：\"><a href=\"#一、元字符：\" class=\"headerlink\" title=\"一、元字符：\"></a>一、元字符：</h3><h5 id=\"一、匹配位置的元字符-，匹配的是一个位置，而非文本\"><a href=\"#一、匹配位置的元字符-，匹配的是一个位置，而非文本\" class=\"headerlink\" title=\"一、匹配位置的元字符 ，匹配的是一个位置，而非文本\"></a>一、匹配位置的元字符 ，<a>匹配的是一个位置，而非文本</a></h5><ol>\n<li>脱字符 ^ : 表示匹配行首的文本</li>\n<li>美元符号$ : 表示匹配行尾的文本</li>\n<li>单词分界符 : \\b匹配单词的开始或者结束</li>\n<li>\\B : 匹配不是单词开头或结束的位置</li>\n</ol>\n<h5 id=\"二、匹配计数功能的元字符\"><a href=\"#二、匹配计数功能的元字符\" class=\"headerlink\" title=\"二、匹配计数功能的元字符\"></a>二、匹配计数功能的元字符</h5><ol>\n<li><ul>\n<li>: 匹配0次到多次   <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n</ul>\n</li>\n<li><ul>\n<li>:  匹配一次到多次，最少匹配1次 <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n</ul>\n</li>\n<li>？: 匹配0次或者1次 <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n<li>{min,max} : 匹配min次到max次 <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n<li>{min,} : 最少匹配min次</li>\n<li><em>?,+?,??,{min,max}?  <em>*忽略优先量词，匹配尽可能少的内容，跟非贪婪模式有关</em></em></li>\n<li><em>+,++,?+,{min,max}+  <em>*占有优先量词，类似普通匹配优先，一旦匹配某些内容，就不会交还，类似固化分组</em></em></li>\n</ol>\n<h5 id=\"三、匹配单个字符的元字符\"><a href=\"#三、匹配单个字符的元字符\" class=\"headerlink\" title=\"三、匹配单个字符的元字符\"></a>三、匹配单个字符的元字符</h5><ol>\n<li>[] : 字符组，匹配若干字符之一,匹配被中括号括起来的其中一个，相当于或。 例如gr[ea]y 匹配grey或者gray</li>\n<li>[^x] : 排除型字符组 匹配一个不等于X的字符，<a>“匹配一个未列出的字符”，而不是”不要匹配列出的字符”</a></li>\n<li>. : 匹配单个任意字符</li>\n<li>\\char : 转义字符</li>\n<li>\\w : 匹配字母或数字或下划线或汉字</li>\n<li>\\s : 匹配任意的空白符</li>\n<li>\\d : 匹配数字</li>\n<li>\\W : 匹配任意不是字母，数字，下划线，汉字的字符</li>\n<li>\\S : 匹配任意不是空白符的字符</li>\n<li>\\D : 匹配任意非数字的字符</li>\n</ol>\n<h5 id=\"四、其他元字符\"><a href=\"#四、其他元字符\" class=\"headerlink\" title=\"四、其他元字符\"></a>四、其他元字符</h5><ol>\n<li>| : 匹配任意分隔的表达式，php|java|linux 匹配php或java或者linux ,[]中如果是单个字符，直接写即可，如果是多个字符，则需要用|分开</li>\n<li>() : 一是限定多选结构的范围，而是为反向引用捕获文本</li>\n<li>\\1,\\2 : 反向引用 匹配之前的第一组，第二组括号捕获的文本</li>\n</ol>\n<h5 id=\"五、对以上个别元字符的详细解析：\"><a href=\"#五、对以上个别元字符的详细解析：\" class=\"headerlink\" title=\"五、对以上个别元字符的详细解析：\"></a>五、对以上个别元字符的详细解析：</h5><ol>\n<li>脱字符^ ,有两个作用，一个是表示匹配行首的文本，另外一个是排除，在[]里面的是排除的意思，不在[]里面的是匹配行首的意思</li>\n<li>字符组[],H[1-6]等同于H[123456],连字符-只有在[]内才为元字符，在外面为-本意</li>\n<li>转义字符\\char ，一个特殊字符前面加上\\表示转义，特殊字符包括：()[]{}.*+?|\\^$/</li>\n<li>() 括号有多个意思，详细内容见以下的分组捕获，当作用为限定多选结构的范围时，需要和[]进行区分 (Fri|1)st 匹配first 或1st ，但是Fri|1st就是匹配 Fri或1st</li>\n</ol>\n<h3 id=\"二、模式修饰符：\"><a href=\"#二、模式修饰符：\" class=\"headerlink\" title=\"二、模式修饰符：\"></a>二、模式修饰符：</h3><blockquote>\n<p>PHP模式修饰符又叫模式修正符，是在正则表达式的定界符之外使用。主要用来调整正则表达式的解释，提扩展了正则表达式在匹配、替换等操作的某些功能，增强了正则的能力。</p>\n</blockquote>\n<ol>\n<li>i <strong>不区分大小写</strong>，(?i) 如果设置了这个修饰符，’a’和’A’是一样的。</li>\n<li>s <strong>单行模式</strong>，(?s)如果设定了这个修正符，那么，被匹配的字符串将视为一行来看，包括换行符，换行符将被视为普通字符串。</li>\n<li>m <strong>多行匹配模式</strong>，(?m)将字符串视为多行。默认的正则开始“^”和结束“$”将目标字条串作为一单一的一“行”字符（甚至其中包括换行符也是如此）。如果在修饰符中加上“m”，那么开始和结束将会指点字符串的每一行的开头就是“^”结束就是“$”。</li>\n<li>x <strong>忽略空白</strong>，(?x)正则表达式中的“空白字符”和“换行符”将会被忽略，除非它已经被转义，同时#号（#）被解释为注释的开头</li>\n<li>e 只用在preg_replace()函数中，在替换字符串中逆向引用做正常的替换，将其(即“替换字符串”)作为PHP代码求值，并用其结果来替换所搜索的字符串。</li>\n<li>A 如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说”/a/A”匹配”abcd”。</li>\n<li>D 模式中的$字符权匹配目标字符的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。如果设定了修正符m则忽略此项。</li>\n<li>E 与”m”相反，如果使用这个修饰符，那么”$”将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。</li>\n<li>U <strong>设置贪婪模式</strong>，(?U)和问号的作用差不多，最大限度的匹配就是贪婪模式。 <strong>贪婪模式会有一篇单独的笔记来记录</strong></li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不区分大小写 i</span></div><div class=\"line\">$s = <span class=\"string\">\"First line Second LINE\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/line/i\"</span>,$s,$m);</div><div class=\"line\">print_r($m); <span class=\"comment\">//Array ( [0] =&gt; Array ( [0] =&gt; line [1] =&gt; LINE ) )</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//多行匹配模式 m</span></div><div class=\"line\">$s = <span class=\"string\">\"First line\\nSecond line\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/^\\w/m\"</span>,$s,$m);</div><div class=\"line\">print_r($m);<span class=\"comment\">//Array ( [0] =&gt; Array ( [0] =&gt; F [1] =&gt; S ) )</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//单行匹配模式 s</span></div><div class=\"line\">$s = <span class=\"string\">\"First line\\nSecond line\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/^\\w/s\"</span>,$s,$m);</div><div class=\"line\">print_r($m); <span class=\"comment\">//Array ( [0] =&gt; Array ( [0] =&gt; F ) )</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//忽略正则表达式中的“非转义的空白字符”和“回车换号符”</span></div><div class=\"line\">$p = <span class=\"string\">\"abc #category code\\n123 #item number\"</span>;</div><div class=\"line\">$s = <span class=\"string\">\"abc123\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/\"</span>.$p.<span class=\"string\">\"/x\"</span>,$s,$m);</div><div class=\"line\">var_dump($m); <span class=\"comment\">//abc123，相当于匹配abc123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//必须是字符串中的开头部分A</span></div><div class=\"line\">$s = <span class=\"string\">\"abcba\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/a/A\"</span>,$s,$m); <span class=\"comment\">//a</span></div><div class=\"line\"></div><div class=\"line\">$s = <span class=\"string\">\"abcba\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/a/\"</span>,$s,$m); <span class=\"comment\">//两个a都会被匹配到</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>部分修饰符还可以用于表达式内部</p>\n<ul>\n<li>(?i)用来启用不区分大小写的匹配，(?-i)停用，此时，他们的作用范围持续到对应的括号结束</li>\n</ul>\n</blockquote>\n<h3 id=\"三、分组捕获\"><a href=\"#三、分组捕获\" class=\"headerlink\" title=\"三、分组捕获\"></a><a name=\"fenzu\">三、分组捕获</a></h3><blockquote>\n<p>()在正则中有两种用途：分组和捕获</p>\n</blockquote>\n<ol>\n<li>普通捕获 <strong>(pattern)</strong> 匹配pattern并捕获结果，自动设置组号</li>\n<li>命名捕获 <strong>(?\\<name\\>pattern) 或者 (?’name’pattern)</name\\></strong>  匹配pattern并捕获结果，设置name为组名，普通捕获的0，1，2，数字还会捕获到</li>\n<li>普通捕获组的反向引用 <strong>\\1,\\2</strong> ,(\\w)(\\d)\\2\\1,匹配a11a</li>\n<li>命名捕获组的反向引用  <strong>\\k\\<name\\> 或者 \\k’name’</name\\></strong>  (?\\<group\\>\\d)abc\\k\\<group\\> 匹配1abc1</group\\></group\\></li>\n<li>非捕获型括号<strong>(?:exp)</strong>,仅用于分组，不能用来提取文本，只能用来规定多选结构或者量词的作用对象 (1|one)(?:and|or)(2|two) 匹配之后，$1包含1或者one ,$2包含2或者two</li>\n<li>固化分组(?&lt;)</li>\n<li>让多个子组可以共用一个后向引用数字(?|)<br><strong>(?| 语法允许复制数字。 考虑下面的正则表达式匹配Sunday：<br>(?:(Sat)ur|(Sun))day<br>这里当后向引用 1 空时Sun 存储在后向引用 2 中. 当后向引用 2 不存在的时候 Sat 存储在后向引用 1中。 使用 (?|修改模式来修复这个问题：<br>(?|(Sat)ur|(Sun))day<br>使用这个模式， Sun和Sat都会被存储到后向引用1中。</strong></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>认识了解正则表达式也有几年了，每次要用时就百度下如何使用，对于转义到底该用几个’\\’总是弄不清楚，因此想抽出一大块时间来做这件事，彻彻底底的来了解正则，以下内容参考《PHP手册》和《精通正则表达式》和<a href=\"http://www.zjmainstay.cn/my-regexp\" target=\"_blank\" rel=\"external\">Zjmainstay学习笔记</a> 相关教程</p>\n</blockquote>\n<h3 id=\"一、元字符：\"><a href=\"#一、元字符：\" class=\"headerlink\" title=\"一、元字符：\"></a>一、元字符：</h3><h5 id=\"一、匹配位置的元字符-，匹配的是一个位置，而非文本\"><a href=\"#一、匹配位置的元字符-，匹配的是一个位置，而非文本\" class=\"headerlink\" title=\"一、匹配位置的元字符 ，匹配的是一个位置，而非文本\"></a>一、匹配位置的元字符 ，<a>匹配的是一个位置，而非文本</a></h5><ol>\n<li>脱字符 ^ : 表示匹配行首的文本</li>\n<li>美元符号$ : 表示匹配行尾的文本</li>\n<li>单词分界符 : \\b匹配单词的开始或者结束</li>\n<li>\\B : 匹配不是单词开头或结束的位置</li>\n</ol>\n<h5 id=\"二、匹配计数功能的元字符\"><a href=\"#二、匹配计数功能的元字符\" class=\"headerlink\" title=\"二、匹配计数功能的元字符\"></a>二、匹配计数功能的元字符</h5><ol>\n<li><ul>\n<li>: 匹配0次到多次   <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n</ul>\n</li>\n<li><ul>\n<li>:  匹配一次到多次，最少匹配1次 <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n</ul>\n</li>\n<li>？: 匹配0次或者1次 <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n<li>{min,max} : 匹配min次到max次 <em>*匹配优先量词</em>，匹配尽可能多的内容*</li>\n<li>{min,} : 最少匹配min次</li>\n<li><em>?,+?,??,{min,max}?  <em>*忽略优先量词，匹配尽可能少的内容，跟非贪婪模式有关</em></em></li>\n<li><em>+,++,?+,{min,max}+  <em>*占有优先量词，类似普通匹配优先，一旦匹配某些内容，就不会交还，类似固化分组</em></em></li>\n</ol>\n<h5 id=\"三、匹配单个字符的元字符\"><a href=\"#三、匹配单个字符的元字符\" class=\"headerlink\" title=\"三、匹配单个字符的元字符\"></a>三、匹配单个字符的元字符</h5><ol>\n<li>[] : 字符组，匹配若干字符之一,匹配被中括号括起来的其中一个，相当于或。 例如gr[ea]y 匹配grey或者gray</li>\n<li>[^x] : 排除型字符组 匹配一个不等于X的字符，<a>“匹配一个未列出的字符”，而不是”不要匹配列出的字符”</a></li>\n<li>. : 匹配单个任意字符</li>\n<li>\\char : 转义字符</li>\n<li>\\w : 匹配字母或数字或下划线或汉字</li>\n<li>\\s : 匹配任意的空白符</li>\n<li>\\d : 匹配数字</li>\n<li>\\W : 匹配任意不是字母，数字，下划线，汉字的字符</li>\n<li>\\S : 匹配任意不是空白符的字符</li>\n<li>\\D : 匹配任意非数字的字符</li>\n</ol>\n<h5 id=\"四、其他元字符\"><a href=\"#四、其他元字符\" class=\"headerlink\" title=\"四、其他元字符\"></a>四、其他元字符</h5><ol>\n<li>| : 匹配任意分隔的表达式，php|java|linux 匹配php或java或者linux ,[]中如果是单个字符，直接写即可，如果是多个字符，则需要用|分开</li>\n<li>() : 一是限定多选结构的范围，而是为反向引用捕获文本</li>\n<li>\\1,\\2 : 反向引用 匹配之前的第一组，第二组括号捕获的文本</li>\n</ol>\n<h5 id=\"五、对以上个别元字符的详细解析：\"><a href=\"#五、对以上个别元字符的详细解析：\" class=\"headerlink\" title=\"五、对以上个别元字符的详细解析：\"></a>五、对以上个别元字符的详细解析：</h5><ol>\n<li>脱字符^ ,有两个作用，一个是表示匹配行首的文本，另外一个是排除，在[]里面的是排除的意思，不在[]里面的是匹配行首的意思</li>\n<li>字符组[],H[1-6]等同于H[123456],连字符-只有在[]内才为元字符，在外面为-本意</li>\n<li>转义字符\\char ，一个特殊字符前面加上\\表示转义，特殊字符包括：()[]{}.*+?|\\^$/</li>\n<li>() 括号有多个意思，详细内容见以下的分组捕获，当作用为限定多选结构的范围时，需要和[]进行区分 (Fri|1)st 匹配first 或1st ，但是Fri|1st就是匹配 Fri或1st</li>\n</ol>\n<h3 id=\"二、模式修饰符：\"><a href=\"#二、模式修饰符：\" class=\"headerlink\" title=\"二、模式修饰符：\"></a>二、模式修饰符：</h3><blockquote>\n<p>PHP模式修饰符又叫模式修正符，是在正则表达式的定界符之外使用。主要用来调整正则表达式的解释，提扩展了正则表达式在匹配、替换等操作的某些功能，增强了正则的能力。</p>\n</blockquote>\n<ol>\n<li>i <strong>不区分大小写</strong>，(?i) 如果设置了这个修饰符，’a’和’A’是一样的。</li>\n<li>s <strong>单行模式</strong>，(?s)如果设定了这个修正符，那么，被匹配的字符串将视为一行来看，包括换行符，换行符将被视为普通字符串。</li>\n<li>m <strong>多行匹配模式</strong>，(?m)将字符串视为多行。默认的正则开始“^”和结束“$”将目标字条串作为一单一的一“行”字符（甚至其中包括换行符也是如此）。如果在修饰符中加上“m”，那么开始和结束将会指点字符串的每一行的开头就是“^”结束就是“$”。</li>\n<li>x <strong>忽略空白</strong>，(?x)正则表达式中的“空白字符”和“换行符”将会被忽略，除非它已经被转义，同时#号（#）被解释为注释的开头</li>\n<li>e 只用在preg_replace()函数中，在替换字符串中逆向引用做正常的替换，将其(即“替换字符串”)作为PHP代码求值，并用其结果来替换所搜索的字符串。</li>\n<li>A 如果使用这个修饰符，那么表达式必须是匹配的字符串中的开头部分。比如说”/a/A”匹配”abcd”。</li>\n<li>D 模式中的$字符权匹配目标字符的结尾。没有此选项时，如果最后一个字符是换行符的话，美元符号也会匹配此字符之前。如果设定了修正符m则忽略此项。</li>\n<li>E 与”m”相反，如果使用这个修饰符，那么”$”将匹配绝对字符串的结尾，而不是换行符前面，默认就打开了这个模式。</li>\n<li>U <strong>设置贪婪模式</strong>，(?U)和问号的作用差不多，最大限度的匹配就是贪婪模式。 <strong>贪婪模式会有一篇单独的笔记来记录</strong></li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不区分大小写 i</span></div><div class=\"line\">$s = <span class=\"string\">\"First line Second LINE\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/line/i\"</span>,$s,$m);</div><div class=\"line\">print_r($m); <span class=\"comment\">//Array ( [0] =&gt; Array ( [0] =&gt; line [1] =&gt; LINE ) )</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//多行匹配模式 m</span></div><div class=\"line\">$s = <span class=\"string\">\"First line\\nSecond line\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/^\\w/m\"</span>,$s,$m);</div><div class=\"line\">print_r($m);<span class=\"comment\">//Array ( [0] =&gt; Array ( [0] =&gt; F [1] =&gt; S ) )</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//单行匹配模式 s</span></div><div class=\"line\">$s = <span class=\"string\">\"First line\\nSecond line\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/^\\w/s\"</span>,$s,$m);</div><div class=\"line\">print_r($m); <span class=\"comment\">//Array ( [0] =&gt; Array ( [0] =&gt; F ) )</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//忽略正则表达式中的“非转义的空白字符”和“回车换号符”</span></div><div class=\"line\">$p = <span class=\"string\">\"abc #category code\\n123 #item number\"</span>;</div><div class=\"line\">$s = <span class=\"string\">\"abc123\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/\"</span>.$p.<span class=\"string\">\"/x\"</span>,$s,$m);</div><div class=\"line\">var_dump($m); <span class=\"comment\">//abc123，相当于匹配abc123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//必须是字符串中的开头部分A</span></div><div class=\"line\">$s = <span class=\"string\">\"abcba\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/a/A\"</span>,$s,$m); <span class=\"comment\">//a</span></div><div class=\"line\"></div><div class=\"line\">$s = <span class=\"string\">\"abcba\"</span>;</div><div class=\"line\">preg_match_all(<span class=\"string\">\"/a/\"</span>,$s,$m); <span class=\"comment\">//两个a都会被匹配到</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>部分修饰符还可以用于表达式内部</p>\n<ul>\n<li>(?i)用来启用不区分大小写的匹配，(?-i)停用，此时，他们的作用范围持续到对应的括号结束</li>\n</ul>\n</blockquote>\n<h3 id=\"三、分组捕获\"><a href=\"#三、分组捕获\" class=\"headerlink\" title=\"三、分组捕获\"></a><a name=\"fenzu\">三、分组捕获</a></h3><blockquote>\n<p>()在正则中有两种用途：分组和捕获</p>\n</blockquote>\n<ol>\n<li>普通捕获 <strong>(pattern)</strong> 匹配pattern并捕获结果，自动设置组号</li>\n<li>命名捕获 <strong>(?\\<name\\>pattern) 或者 (?’name’pattern)</name\\></strong>  匹配pattern并捕获结果，设置name为组名，普通捕获的0，1，2，数字还会捕获到</li>\n<li>普通捕获组的反向引用 <strong>\\1,\\2</strong> ,(\\w)(\\d)\\2\\1,匹配a11a</li>\n<li>命名捕获组的反向引用  <strong>\\k\\<name\\> 或者 \\k’name’</name\\></strong>  (?\\<group\\>\\d)abc\\k\\<group\\> 匹配1abc1</group\\></group\\></li>\n<li>非捕获型括号<strong>(?:exp)</strong>,仅用于分组，不能用来提取文本，只能用来规定多选结构或者量词的作用对象 (1|one)(?:and|or)(2|two) 匹配之后，$1包含1或者one ,$2包含2或者two</li>\n<li>固化分组(?&lt;)</li>\n<li>让多个子组可以共用一个后向引用数字(?|)<br><strong>(?| 语法允许复制数字。 考虑下面的正则表达式匹配Sunday：<br>(?:(Sat)ur|(Sun))day<br>这里当后向引用 1 空时Sun 存储在后向引用 2 中. 当后向引用 2 不存在的时候 Sat 存储在后向引用 1中。 使用 (?|修改模式来修复这个问题：<br>(?|(Sat)ur|(Sun))day<br>使用这个模式， Sun和Sat都会被存储到后向引用1中。</strong></li>\n</ol>\n"},{"title":"正则表达式测试题","date":"2017-09-13T02:28:41.000Z","_content":"> 正则掌握程度测试题,以下测试题来自于 https://www.zybuluo.com/Zjmainstay/note/709093， 答案是我自己的分析，欢迎各位进行批评与指导,部分习题答案后续不上\n\n* [一.分组提取/非捕获组](#one)\n* [二.单字符或](#two)\n* [三.多字符或](#three)\n* [四.分组引用](#four)\n* [五.匹配换行数据](#five)\n* [六.存在（或）](#six)\n* [七. 存在（与）](#seven)\n* [八. 特殊限制（环视否定）](#eight)\n* [九. 替换分组使用](#nine)\n* [十. 分组可选](#ten)\n* [十一. 单字符拆分（数字）](#eleven)\n* [十二. 贪婪模式](#twelve)\n* [十三. 非贪婪模式](#thirteen)\n* [十四. 占用模式(PCRE)](#fourteen)\n* [十五. |字符分界（|的作用域）](#fiveteen)\n* [十六. 元字符转义](#sixteen)\n* [十七. 分隔符绕过（PCRE）](#seventeen)\n* [十八. 匹配溢出排除](#eighteen)\n* [十九. 环视循环提取格式化](#nineteen)\n* [二十. 三段论应用](#twenty)\n\n\n### 一. <a name=\"one\">分组提取/非捕获组 </a>\n\n> 分组，是正则里一个非常重要的概念，我们需要针对某个区域提取数据，往往需要依赖分组。而分组，其实就是正则里()括住的部分。\n\n* 分组提取 \n\n    ```php\n    需求：在分组1中匹配meta中author属性的值\n    源串：\n       <meta author=\"Zjmainstay\" />\n       another author=\"Zjmainstay too\"\n    预期：分组1得到Zjmainstay\n    正则：'/<meta[^>]author=\"(.*?)\".*?\\/>/'\n    ```\n    \n* 非捕获组\n\n    >针对上面的分组，有时候，我们并不需要捕获某个分组的内容，我们可以使用非捕获组(?:表达式)，从而不捕获表达式部分内容到分组中。\n    \n\n    ```php\n     源串：\n     a\n     ab\n     abc\n     abcd\n     预期：匹配得到 ab 和 abcd，不包含分组1\n     正则： '/^(?:\\w\\w)+$/m'\n    ```\n\n### <a name=\"two\">二. 单字符或</a>\n\n>或条件是正则使用过程中常用的概念，比如，密码由字母或数字组成，这里就用到了或条件，而且，由于字母或数字都是单个字符，因此，可以使用[a-z0-9]这样的单字符或语法实现。\n 常犯错误：匹配a或b写成[a|b]，此表达式实际上表示a或b或|，在[]内部的|表示其本身，注意区分(a|b)表示a或b的写法。\n\n```php\n    需求：匹配由 A/S/D/F 4个字母(区分大小写)组成的长度为3字符串\n    源串：\n    ABC\n    ASD\n    ADS\n    ASF\n    BBC\n    A|S\n    A|D\n    ASDF\n    预期：以[]元字符获得3个字母的或集，匹配 ASD/ADS/ASF 3组数据\n    正则：'/\\b[ASDF]{3}\\b/m'\n```\n\n### <a name=\"three\">三. 多字符或</a>\n\n>相对单字符或条件，多字符或也是很常见的，比如，我们需要匹配http或ftp两个协议头的url，就需要^(http|ftp)://.+$这样的语法来实现。\n\n```php\n    需求：匹配每行数据中以.jpg/.jpeg/.png/.gif结尾的图片名称（含后缀）\n    源串：\n    image.jpg\n    image.jpeg\n    image.png\n    image.gif\n    not_image.txt\n    not_image.doc\n    not_image.xls\n    not_image.ppt\n    预期：匹配 image.jpg/image.jpeg/image.png/image.gif 4个结果\n    正则：'/.*?\\.(jpg|jpeg|png|gif)/m'\n```\n\n### <a name=\"four\">四. 分组引用</a>\n\n>前面介绍了分组，那某个分组在我们匹配过程中重复出现，又该如何处理？分组引用恰恰解决这个问题。比如，匹配出现重复单词的一行数据，我们可以这么写（多行模式）：/^.*?(\\b\\S+\\b).*?\\1.*$/m，\\1表示引用前面分组1中匹配到的内容，也就是重复的单词内容。\n\n```php\n    需求：匹配连续相同3次的数字\n    源串：\n    111\n    121\n    112\n    222\n    预期：匹配 111/222 两组数据\n    正则：'/(\\d)\\1\\1/m'\n```\n\n### <a name=\"five\">五. 匹配换行数据</a>\n\n>“我的正则本来好好的，突然不行了！”这个是很多正则新人遇到的问题，而这个问题，很多时候，就是因为原来正则中的.不能匹配新数据里的换行导致的。这时候，只需要把.改成[\\s\\S]这样的表达式就可以了。这个表达式表示空格或非空格，也就是任意字符啦。\n\n```php\n    需求：分别使用单行模式和普通模式匹配id=\"author\"的div中数据，div标签不在同一行\n    源串：\n    <div id=\"author\">\n    Zjmainstay\n    </div>\n    预期：Zjmainstay\n    正则1：'@<div[^>]id=\"author\">(.*?)</div>@ms'\n    正则2：\n```\n\n### <a name=\"six\">六. 存在（或）</a>\n\n* 匹配多种或条件的数据，没有特殊限制 \n\n```php\n    需求：匹配每行中包含“作者”或者“读者”的数据\n    源串：\n    本文的作者是Zjmainstay\n    本文有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    什么乱七八糟的推理\n    你不匹配我，凭什么要我推荐你的博客 www.zjmainstay.cn\n    预期：匹配\n    本文的作者是Zjmainstay\n    本文有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    正则：$re = '/^.*?(作者|读者).*?$/m'\n```\n\n* 匹配多种或条件的数据，有特殊限制（不使用环视）\n\n```php\n    需求：匹配每行中“读者”在开头或结尾的数据\n    源串：\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    预期：匹配\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    正则：\n```\n\n* 匹配多种或条件的数据，有特殊限制（使用环视）\n\n```php\n    需求：匹配每行中“读者”在开头或结尾的数据\n    源串：\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    预期：匹配\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    正则：\n```\n\n### <a name=\"seven\">七. 存在（与）</a>\n\n校验密码必须包含字母、数字和特殊字符，6-16位\n\n```php\n    需求：校验密码必须包含字母、数字和特殊字符，6-16位，假定特殊字符为 -_= 三个字符\n    源串：\n    12345\n    123456\n    1234561234561234\n    12345612345612345\n    a1234\n    a12345\n    -1234\n    -12345\n    a-123\n    a-1234\n    a-1234a-1234a-12\n    a-1234a-1234a-1234\n    aaaaa\n    aaaaaa\n    -_=-_\n    -_=-_=\n    预期：匹配\n    a-1234\n    a-1234a-1234a-12\n    正则：\n```\n\n### <a name=\"eight\">八. 特殊限制（环视否定）</a>\n\n* 使用\\d{1,3}匹配1-999的数据，不能以0开头\n\n```php\n    需求：使用\\d{1,3}匹配每行中1-999的数据，不能以0开头\n    源串：\n    1\n    10\n    100\n    999\n    1000\n    01\n    001\n    预期：匹配\n    1\n    10\n    100\n    999\n    正则：'/(?!0)(?<!\\d)\\d{1,3}\\b/'\n```\n* 匹配除了span标签外的所有标签\n\n```php\n    需求：匹配除了<span>内容</span>标签外的所有<tagName>内容</tagName>格式标签\n    源串：\n    <div>匹配我</div>\n    <span>不匹配我</span>\n    <p>匹配我</p>\n    <i>匹配我</i>\n    预期：匹配\n    <div>匹配我</div>\n    <p>匹配我</p>\n    <i>匹配我</i>\n    正则：\n```\n\n### <a name=\"nine\">九. 替换分组使用</a>\n\n* 给源串每个链接加上http://www.zjmainstay.cn前缀\n\n```php\n    需求：给源串每个链接加上http://www.zjmainstay.cn前缀\n    源串：\n    <a id=\"link-1\" href=\"/regexp-one\">正则文章合集（All In One)</a>\n    <a id=\"link-2\" href=\"/my-regexp\">正则入门教程</a>\n    <a id=\"link-3\" href=\"/deep-regexp\">正则高级教程</a>\n    <a id=\"link-4\" href=\"/regexp-lookaround\">正则环视详解</a>\n    <a id=\"link-5\" href=\"/php-curl\">PHP cURL应用</a>\n    预期：替换得到\n    <a id=\"link-1\" href=\"http://www.zjmainstay.cn/regexp-one\">正则文章合集（All In One)</a>\n    <a id=\"link-2\" href=\"http://www.zjmainstay.cn/my-regexp\">正则入门教程</a>\n    <a id=\"link-3\" href=\"http://www.zjmainstay.cn/deep-regexp\">正则高级教程</a>\n    <a id=\"link-4\" href=\"http://www.zjmainstay.cn/regexp-lookaround\">正则环视详解</a>\n    <a id=\"link-5\" href=\"http://www.zjmainstay.cn/php-curl\">PHP cURL应用</a>\n    查找：\n    替换：\n```\n* 将每行数据格式化为一条SQL语句\n\n```php\n    需求：将每行特定格式数据格式化为SQL语句\n    源串：\n    1 2017-04-11 Zjmainstay\n    2 2017-04-12 Nobody\n    3 2017-04-13 Somebody\n    预期：替换得到\n    INSERT INTO table_log(`id`, `created_at`, `author`) values('1', '2017-04-11', 'Zjmainstay');\n    INSERT INTO table_log(`id`, `created_at`, `author`) values('2', '2017-04-12', 'Nobody');\n    INSERT INTO table_log(`id`, `created_at`, `author`) values('3', '2017-04-13', 'Somebody');\n    查找：\n    替换：\n```\n\n### <a name=\"ten\">十. 分组可选</a>\n\n* 分组可选\n\n```php\n    需求：判断如果单词以A开头，匹配Apple；如果单词以B开头，匹配Banana；否则匹配Empty\n    源串：\n    Angle\n    Apple\n    Banana\n    Best\n    Empty\n    预期：匹配\n    Apple\n    Banana\n    Empty\n    正则：\n```\n* 分组可选与分组引用\n\n```php\n    需求：匹配html标签的属性值，属性值可以由双引号、单引号、无单双引号定界\n    源串：\n    <div id=\"I'm Zjmainstay\" class=\"name\" data-year=2017 age='27'>\n    预期：分组匹配\n    I'm Zjmainstay\n    author\n    2017\n    27\n    正则：\n```\n### <a name=\"eleven\">十一. 单字符拆分（数字）</a>\n\n匹配0.00-100.00的数值，可以有0-2位小数\n\n```php\n    需求：匹配0.00-100.00的数值，可以有0-2位小数，不能以小数点结尾，不能以2个以上的0开头\n    思路：(100|10-99|0-9) + 0-2小数位 + 排除小数点结尾、2个以上0开头的情况\n    源串：\n    0\n    1\n    0.0\n    0.00\n    9.00\n    18.00\n    27.0\n    36.00\n    45.00\n    54.00\n    63.00\n    72.00\n    81.00\n    90.00\n    99.99\n    100.00\n    0.\n    001\n    100.01\n    100.001\n    101\n    预期：匹配0.00~100.00\n    正则：\n```\n\n### <a name=\"twelve\">十二. 贪婪模式</a>\n\n* 匹配链接中的文件名\n\n```php\n    需求：利用贪婪模式，分组1得到每行链接中的文件名\n    源串：\n    http://localhost.com/a/b/c/d/file1.txt\n    https://localhost.com/a/b/file2long.jpg\n    预期：分组0匹配行数据，分组1匹配文件名\n    file1.txt\n    file2long.jpg\n    正则：\n```\n* 限定字符贪婪优化匹配性能\n\n```php\n    需求：匹配div id=\"author\"的标签内容\n    源串：\n    <div id=\"author\" class=\"author-text something-useless\">Zjmainstay</div>\n    预期：利用贪婪模式去掉div中的噪点（无关数据），分组1匹配到Zjmainstay\n    正则：\n```\n\n### <a name=\"thirteen\">十三. 非贪婪模式</a>\n\n>贪婪模式，正则会优先尽可能少地匹配能匹配到的内容。当剩余正则匹配剩余部分字符（源串）但无法满足匹配时，非贪婪部分继续匹配更多内容，尝试满足剩余部分字符的匹配。\n\n匹配p标签内容\n\n```php\n    需求：匹配p标签内容\n    源串：\n    <p>内容1</p><p>内容2</p>\n    预期：\n    在分组1中匹配到内容1和内容2\n    正则：\n```\n\n### <a name=\"fourteen\">十四. 占用模式(PCRE)</a>\n\n>贪婪模式后再加一个+量词，如.++，效果是贪婪而且不回溯。\n 暂时没有想到应用场景。\n \n### <a name=\"fiveteen\">十五. |字符分界（|的作用域）</a>\n\n>|作为或条件分隔符，它的分隔区间常常存在误用。在使用|字符的过程中，我们常常需要结合()来对它进行限定。如，^([0-9]+|[a-z]+)$表示纯数字或纯字母，如果没有()，那它又是另一种意思了。^[0-9]+|[a-z]+$等价于^[0-9]+或[a-z]+$，因此，它表示数字开头或者字母结尾，跟我们的需求有了很大的差别。\n\n|字符分界\n\n```php\n    需求：在分组1中匹配css或script的链接\n    源串：\n    <script src=\"main.min.js\" type=\"text/javascript\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\">\n    预期：\n    main.min.js\n    main.css\n    正则：\n```\n\n### <a name=\"sixteen\">十六. 元字符转义</name>\n\n>元字符，指正则中有特殊意义的字符，如.表示匹配除了换行符以外的任意字符，这个.就是元字符。在正则书写过程中，如果我们真的要匹配这个.，就需要对它进行转义，而不是让它使用正则的含义，比如，匹配域名里的.，我们就要写成/zjmainstay\\.cn/这样的正则。\n\n元字符转义\n\n```php\n    需求：表达式格式固定，提取其中的数值\n    源串：\n    (20+170)-5*1/5=?\n    预期：\n    A:20\n    B:170\n    C:5\n    D:1\n    E:5\n    F:?\n    正则：\n    替换：\n```\n\n### <a name=\"seventeen\">十七. 分隔符绕过（PCRE）</a>\n\n>有时候，如果该语言支持多种分隔符，在写正则的过程中通常会通过规避分隔符的方式，减少对分隔符的转义，让正则看起来更清晰，写起来更舒服，当然，js中是不支持的。\n\n分隔符绕过\n\n```php\n    需求：在不对/转义的情况下匹配p标签内容\n    源串：\n    <p>内容1</p><p>内容2</p>\n    预期：\n    在分组1中匹配到内容1和内容2\n    正则：<p>([^<]+)</p>@m\n```\n\n### <a name=\"eighteen\">十八. 匹配溢出排除</a>\n\n>匹配溢出，这不是一个术语名词，是我自己的叫法，主要指正则匹配内容超出了我们预期，导致匹配得到非预期的结果。\n\n* div标签匹配溢出\n\n```php\n    需求：匹配内容为数字的div\n    源串：\n    <div class=\"aaa bbb\">ABC</div><div class=\"bbb ccc\">123</div>\n    预期：\n    <div>123</div>\n    错误正则：/<div.*?>\\d+<\\/div>/\n    正则：/<div[^>]*>\\d+<\\/div>/\n```\n* 多字符排除\n\n```php\n    需求：匹配不包含某个单词或词语的内容\n    源串：\n    http://www.zjmainstay.cn\n    http://www.baidu.com\n    http://www.qq.com\n    预期：\n    http://www.zjmainstay.cn\n    http://www.qq.com\n    正则：/http:\\/\\/www\\.[^baidu].*/m\n    \n    需求：匹配不包含某个单词或词语的内容\n    源串：\n    A(\"Excalibur\", \"誓约胜利之剑\", LONG_SWORD, (SPFX_NOGEN | SPFX_RESTR | SPFX_SEEK | SPFX_DEFN | SPFX_INTEL | SPFX_SEARCH), \n      0, 0, PHYS(5, 10), DRLI(0, 0), NO_CARY, 0, A_LAWFUL, PM_KNIGHT, NON_PM, 4000L, NO_COLOR);\n    /*\n     * Stormbringer only has a 2 because it can drain a level,\n     * providing 8 more.\n     */\n    A(\"Stormbringer\", \"兴风者\", RUNESWORD,\n      (SPFX_RESTR | SPFX_ATTK | SPFX_DEFN | SPFX_INTEL | SPFX_DRLI), 0, 0,\n      DRLI(5, 2), DRLI(0, 0), NO_CARY, 0, A_CHAOTIC, NON_PM, NON_PM, 8000L,\n      NO_COLOR);\n    /*\n     * Mjollnir will return to the hand of the wielder when thrown\n     * if the wielder is a Valkyrie wearing Gauntlets of Power.\n     */\n    A(\"Mjollnir\", \"雷神之锤\", WAR_HAMMER, /* Mjo:llnir */\n      (SPFX_RESTR | SPFX_ATTK), 0, 0, ELEC(5, 24), NO_DFNS, NO_CARY, 0,\n      A_NEUTRAL, PM_VALKYRIE, NON_PM, 4000L, NO_COLOR);\n    A(\"Cleaver\", \"撕裂者\", BATTLE_AXE, SPFX_RESTR, 0, 0, PHYS(3, 6), NO_DFNS, NO_CARY, 0, A_NEUTRAL, PM_BARBARIAN, NON_PM, 1500L, NO_COLOR);\n    /*\n     * Grimtooth glows in warning when elves are present, but its\n     * damage bonus applies to all targets rather than just elves\n     * (handled as special case in spec_dbon()).\n     */\n    A(\"Grimtooth\", \"邪兽之牙\", ORCISH_DAGGER, (SPFX_RESTR | SPFX_WARN | SPFX_DFLAG2),\n      0, M2_ELF, PHYS(2, 6), NO_DFNS,\n      NO_CARY, 0, A_CHAOTIC, NON_PM, PM_ORC, 300L, CLR_RED);\n    /*\n     * Orcrist and Sting have same alignment as elves.\n     *\n     * The combination of SPFX_WARN+SPFX_DFLAG2+M2_value will trigger\n     * EWarn_of_mon for all monsters that have the M2_value flag.\n     * Sting and Orcrist will warn of M2_ORC monsters.\n     */\n    A(\"Orcrist\", \"杀兽剑\", ELVEN_BROADSWORD, (SPFX_WARN | SPFX_DFLAG2), 0, M2_ORC, PHYS(5, 0), \n      NO_DFNS, NO_CARY, 0, A_CHAOTIC, NON_PM, PM_ELF, 2000L, CLR_BRIGHT_BLUE); /* bright blue is actually light blue */\n    预期：\n    Excalibur=誓约胜利之剑\n    Stormbringer=兴风者\n    Mjollnir=雷神之锤\n    Cleaver=撕裂者\n    Grimtooth=邪兽之牙\n    Orcrist=杀兽剑\n    查找：\n    替换：\n```\n\n### <a name=\"nineteen\">十九. 环视循环提取格式化</a>\n\n>在数据处理过程中，经常遇到一些格式化处理，比如简单地将一批数据格式化为SQL（参考9.2），还有复杂的需要对一行数据的某部分进行循环提取，然后格式化为特定格式。\n\n```php\n    需求：循环提取每行数据的分支部分和固定部分，格式化为特定格式\n    源串：\n    BBB|CCC|DDD=AAA\n    FFF|GGG|HHH|III|JJJ|KKK=EEE\n    预期：\n    BBB=AAA\n    CCC=AAA\n    DDD=AAA\n    FFF=EEE\n    GGG=EEE\n    HHH=EEE\n    III=EEE\n    JJJ=EEE\n    KKK=EEE\n    查找：\\|(?=.*(=.*))\n    替换：$1\\n\n```\n### <a name=\"twenty\">二十. 三段论应用</a>\n\n>三段论:定锚点，去噪点，取数据。\n **锚点**，在正则中指^、$、\\b这类零宽的位置，这里做了衍生，指能够唯一确定我们目标数据位置的参照点，比如author=lalala，我们要匹配author属性的数据，则author=就是我们的参照点，通过它，我们能快速写出提取author属性的数据的正则：author=(.+)。\n **噪点**，就是对我们提取数据产生干扰的无关数据，我们在做正则匹配提取数据的过程中，可以选择性的忽略它们。当然，这里的忽略不是指不需要对它们做匹配，而是不需要对它们做精确匹配。\n **数据**，这个当然是指我们需要提取的内容了，如上面锚点举例，我们通过author=(.+)的(.+)对lalala部分数据进行了提取，因此，匹配结果的分组1（程序语言中的数组下标1）中，就能得到我们的结果。而对于多个数据的提取，如噪点举例，我们只需要针对数据部分进行多个分组（括号）的提取即可。\n 分组的计数，一般可以数左括号，排除环视和非捕获组的左括号，从1开始，依次加1递增，1,2,3,4....n，不同语言最大分组个数不同，大家在使用过程中自行留意，不过一般用不了那么多分组。\n 理解了三段论的概念，我们在写正则的过程中，只需要将源串进行分割划分，根据目标数据确定锚点，过滤噪点，提取数据，就能得到我们想要的正则了。","source":"_posts/regex2.md","raw":"---\ntitle: 正则表达式测试题\ndate: 2017-09-13 10:28:41\ntags: 正则表达式\ncategories: 正则表达式\n\n---\n> 正则掌握程度测试题,以下测试题来自于 https://www.zybuluo.com/Zjmainstay/note/709093， 答案是我自己的分析，欢迎各位进行批评与指导,部分习题答案后续不上\n\n* [一.分组提取/非捕获组](#one)\n* [二.单字符或](#two)\n* [三.多字符或](#three)\n* [四.分组引用](#four)\n* [五.匹配换行数据](#five)\n* [六.存在（或）](#six)\n* [七. 存在（与）](#seven)\n* [八. 特殊限制（环视否定）](#eight)\n* [九. 替换分组使用](#nine)\n* [十. 分组可选](#ten)\n* [十一. 单字符拆分（数字）](#eleven)\n* [十二. 贪婪模式](#twelve)\n* [十三. 非贪婪模式](#thirteen)\n* [十四. 占用模式(PCRE)](#fourteen)\n* [十五. |字符分界（|的作用域）](#fiveteen)\n* [十六. 元字符转义](#sixteen)\n* [十七. 分隔符绕过（PCRE）](#seventeen)\n* [十八. 匹配溢出排除](#eighteen)\n* [十九. 环视循环提取格式化](#nineteen)\n* [二十. 三段论应用](#twenty)\n\n\n### 一. <a name=\"one\">分组提取/非捕获组 </a>\n\n> 分组，是正则里一个非常重要的概念，我们需要针对某个区域提取数据，往往需要依赖分组。而分组，其实就是正则里()括住的部分。\n\n* 分组提取 \n\n    ```php\n    需求：在分组1中匹配meta中author属性的值\n    源串：\n       <meta author=\"Zjmainstay\" />\n       another author=\"Zjmainstay too\"\n    预期：分组1得到Zjmainstay\n    正则：'/<meta[^>]author=\"(.*?)\".*?\\/>/'\n    ```\n    \n* 非捕获组\n\n    >针对上面的分组，有时候，我们并不需要捕获某个分组的内容，我们可以使用非捕获组(?:表达式)，从而不捕获表达式部分内容到分组中。\n    \n\n    ```php\n     源串：\n     a\n     ab\n     abc\n     abcd\n     预期：匹配得到 ab 和 abcd，不包含分组1\n     正则： '/^(?:\\w\\w)+$/m'\n    ```\n\n### <a name=\"two\">二. 单字符或</a>\n\n>或条件是正则使用过程中常用的概念，比如，密码由字母或数字组成，这里就用到了或条件，而且，由于字母或数字都是单个字符，因此，可以使用[a-z0-9]这样的单字符或语法实现。\n 常犯错误：匹配a或b写成[a|b]，此表达式实际上表示a或b或|，在[]内部的|表示其本身，注意区分(a|b)表示a或b的写法。\n\n```php\n    需求：匹配由 A/S/D/F 4个字母(区分大小写)组成的长度为3字符串\n    源串：\n    ABC\n    ASD\n    ADS\n    ASF\n    BBC\n    A|S\n    A|D\n    ASDF\n    预期：以[]元字符获得3个字母的或集，匹配 ASD/ADS/ASF 3组数据\n    正则：'/\\b[ASDF]{3}\\b/m'\n```\n\n### <a name=\"three\">三. 多字符或</a>\n\n>相对单字符或条件，多字符或也是很常见的，比如，我们需要匹配http或ftp两个协议头的url，就需要^(http|ftp)://.+$这样的语法来实现。\n\n```php\n    需求：匹配每行数据中以.jpg/.jpeg/.png/.gif结尾的图片名称（含后缀）\n    源串：\n    image.jpg\n    image.jpeg\n    image.png\n    image.gif\n    not_image.txt\n    not_image.doc\n    not_image.xls\n    not_image.ppt\n    预期：匹配 image.jpg/image.jpeg/image.png/image.gif 4个结果\n    正则：'/.*?\\.(jpg|jpeg|png|gif)/m'\n```\n\n### <a name=\"four\">四. 分组引用</a>\n\n>前面介绍了分组，那某个分组在我们匹配过程中重复出现，又该如何处理？分组引用恰恰解决这个问题。比如，匹配出现重复单词的一行数据，我们可以这么写（多行模式）：/^.*?(\\b\\S+\\b).*?\\1.*$/m，\\1表示引用前面分组1中匹配到的内容，也就是重复的单词内容。\n\n```php\n    需求：匹配连续相同3次的数字\n    源串：\n    111\n    121\n    112\n    222\n    预期：匹配 111/222 两组数据\n    正则：'/(\\d)\\1\\1/m'\n```\n\n### <a name=\"five\">五. 匹配换行数据</a>\n\n>“我的正则本来好好的，突然不行了！”这个是很多正则新人遇到的问题，而这个问题，很多时候，就是因为原来正则中的.不能匹配新数据里的换行导致的。这时候，只需要把.改成[\\s\\S]这样的表达式就可以了。这个表达式表示空格或非空格，也就是任意字符啦。\n\n```php\n    需求：分别使用单行模式和普通模式匹配id=\"author\"的div中数据，div标签不在同一行\n    源串：\n    <div id=\"author\">\n    Zjmainstay\n    </div>\n    预期：Zjmainstay\n    正则1：'@<div[^>]id=\"author\">(.*?)</div>@ms'\n    正则2：\n```\n\n### <a name=\"six\">六. 存在（或）</a>\n\n* 匹配多种或条件的数据，没有特殊限制 \n\n```php\n    需求：匹配每行中包含“作者”或者“读者”的数据\n    源串：\n    本文的作者是Zjmainstay\n    本文有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    什么乱七八糟的推理\n    你不匹配我，凭什么要我推荐你的博客 www.zjmainstay.cn\n    预期：匹配\n    本文的作者是Zjmainstay\n    本文有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    正则：$re = '/^.*?(作者|读者).*?$/m'\n```\n\n* 匹配多种或条件的数据，有特殊限制（不使用环视）\n\n```php\n    需求：匹配每行中“读者”在开头或结尾的数据\n    源串：\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    预期：匹配\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    正则：\n```\n\n* 匹配多种或条件的数据，有特殊限制（使用环视）\n\n```php\n    需求：匹配每行中“读者”在开头或结尾的数据\n    源串：\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    这里的任何一个地方说明读者也能在国外\n    预期：匹配\n    本文作者是Zjmainstay，有很多读者\n    读者可以是任何一个地方的人\n    正则：\n```\n\n### <a name=\"seven\">七. 存在（与）</a>\n\n校验密码必须包含字母、数字和特殊字符，6-16位\n\n```php\n    需求：校验密码必须包含字母、数字和特殊字符，6-16位，假定特殊字符为 -_= 三个字符\n    源串：\n    12345\n    123456\n    1234561234561234\n    12345612345612345\n    a1234\n    a12345\n    -1234\n    -12345\n    a-123\n    a-1234\n    a-1234a-1234a-12\n    a-1234a-1234a-1234\n    aaaaa\n    aaaaaa\n    -_=-_\n    -_=-_=\n    预期：匹配\n    a-1234\n    a-1234a-1234a-12\n    正则：\n```\n\n### <a name=\"eight\">八. 特殊限制（环视否定）</a>\n\n* 使用\\d{1,3}匹配1-999的数据，不能以0开头\n\n```php\n    需求：使用\\d{1,3}匹配每行中1-999的数据，不能以0开头\n    源串：\n    1\n    10\n    100\n    999\n    1000\n    01\n    001\n    预期：匹配\n    1\n    10\n    100\n    999\n    正则：'/(?!0)(?<!\\d)\\d{1,3}\\b/'\n```\n* 匹配除了span标签外的所有标签\n\n```php\n    需求：匹配除了<span>内容</span>标签外的所有<tagName>内容</tagName>格式标签\n    源串：\n    <div>匹配我</div>\n    <span>不匹配我</span>\n    <p>匹配我</p>\n    <i>匹配我</i>\n    预期：匹配\n    <div>匹配我</div>\n    <p>匹配我</p>\n    <i>匹配我</i>\n    正则：\n```\n\n### <a name=\"nine\">九. 替换分组使用</a>\n\n* 给源串每个链接加上http://www.zjmainstay.cn前缀\n\n```php\n    需求：给源串每个链接加上http://www.zjmainstay.cn前缀\n    源串：\n    <a id=\"link-1\" href=\"/regexp-one\">正则文章合集（All In One)</a>\n    <a id=\"link-2\" href=\"/my-regexp\">正则入门教程</a>\n    <a id=\"link-3\" href=\"/deep-regexp\">正则高级教程</a>\n    <a id=\"link-4\" href=\"/regexp-lookaround\">正则环视详解</a>\n    <a id=\"link-5\" href=\"/php-curl\">PHP cURL应用</a>\n    预期：替换得到\n    <a id=\"link-1\" href=\"http://www.zjmainstay.cn/regexp-one\">正则文章合集（All In One)</a>\n    <a id=\"link-2\" href=\"http://www.zjmainstay.cn/my-regexp\">正则入门教程</a>\n    <a id=\"link-3\" href=\"http://www.zjmainstay.cn/deep-regexp\">正则高级教程</a>\n    <a id=\"link-4\" href=\"http://www.zjmainstay.cn/regexp-lookaround\">正则环视详解</a>\n    <a id=\"link-5\" href=\"http://www.zjmainstay.cn/php-curl\">PHP cURL应用</a>\n    查找：\n    替换：\n```\n* 将每行数据格式化为一条SQL语句\n\n```php\n    需求：将每行特定格式数据格式化为SQL语句\n    源串：\n    1 2017-04-11 Zjmainstay\n    2 2017-04-12 Nobody\n    3 2017-04-13 Somebody\n    预期：替换得到\n    INSERT INTO table_log(`id`, `created_at`, `author`) values('1', '2017-04-11', 'Zjmainstay');\n    INSERT INTO table_log(`id`, `created_at`, `author`) values('2', '2017-04-12', 'Nobody');\n    INSERT INTO table_log(`id`, `created_at`, `author`) values('3', '2017-04-13', 'Somebody');\n    查找：\n    替换：\n```\n\n### <a name=\"ten\">十. 分组可选</a>\n\n* 分组可选\n\n```php\n    需求：判断如果单词以A开头，匹配Apple；如果单词以B开头，匹配Banana；否则匹配Empty\n    源串：\n    Angle\n    Apple\n    Banana\n    Best\n    Empty\n    预期：匹配\n    Apple\n    Banana\n    Empty\n    正则：\n```\n* 分组可选与分组引用\n\n```php\n    需求：匹配html标签的属性值，属性值可以由双引号、单引号、无单双引号定界\n    源串：\n    <div id=\"I'm Zjmainstay\" class=\"name\" data-year=2017 age='27'>\n    预期：分组匹配\n    I'm Zjmainstay\n    author\n    2017\n    27\n    正则：\n```\n### <a name=\"eleven\">十一. 单字符拆分（数字）</a>\n\n匹配0.00-100.00的数值，可以有0-2位小数\n\n```php\n    需求：匹配0.00-100.00的数值，可以有0-2位小数，不能以小数点结尾，不能以2个以上的0开头\n    思路：(100|10-99|0-9) + 0-2小数位 + 排除小数点结尾、2个以上0开头的情况\n    源串：\n    0\n    1\n    0.0\n    0.00\n    9.00\n    18.00\n    27.0\n    36.00\n    45.00\n    54.00\n    63.00\n    72.00\n    81.00\n    90.00\n    99.99\n    100.00\n    0.\n    001\n    100.01\n    100.001\n    101\n    预期：匹配0.00~100.00\n    正则：\n```\n\n### <a name=\"twelve\">十二. 贪婪模式</a>\n\n* 匹配链接中的文件名\n\n```php\n    需求：利用贪婪模式，分组1得到每行链接中的文件名\n    源串：\n    http://localhost.com/a/b/c/d/file1.txt\n    https://localhost.com/a/b/file2long.jpg\n    预期：分组0匹配行数据，分组1匹配文件名\n    file1.txt\n    file2long.jpg\n    正则：\n```\n* 限定字符贪婪优化匹配性能\n\n```php\n    需求：匹配div id=\"author\"的标签内容\n    源串：\n    <div id=\"author\" class=\"author-text something-useless\">Zjmainstay</div>\n    预期：利用贪婪模式去掉div中的噪点（无关数据），分组1匹配到Zjmainstay\n    正则：\n```\n\n### <a name=\"thirteen\">十三. 非贪婪模式</a>\n\n>贪婪模式，正则会优先尽可能少地匹配能匹配到的内容。当剩余正则匹配剩余部分字符（源串）但无法满足匹配时，非贪婪部分继续匹配更多内容，尝试满足剩余部分字符的匹配。\n\n匹配p标签内容\n\n```php\n    需求：匹配p标签内容\n    源串：\n    <p>内容1</p><p>内容2</p>\n    预期：\n    在分组1中匹配到内容1和内容2\n    正则：\n```\n\n### <a name=\"fourteen\">十四. 占用模式(PCRE)</a>\n\n>贪婪模式后再加一个+量词，如.++，效果是贪婪而且不回溯。\n 暂时没有想到应用场景。\n \n### <a name=\"fiveteen\">十五. |字符分界（|的作用域）</a>\n\n>|作为或条件分隔符，它的分隔区间常常存在误用。在使用|字符的过程中，我们常常需要结合()来对它进行限定。如，^([0-9]+|[a-z]+)$表示纯数字或纯字母，如果没有()，那它又是另一种意思了。^[0-9]+|[a-z]+$等价于^[0-9]+或[a-z]+$，因此，它表示数字开头或者字母结尾，跟我们的需求有了很大的差别。\n\n|字符分界\n\n```php\n    需求：在分组1中匹配css或script的链接\n    源串：\n    <script src=\"main.min.js\" type=\"text/javascript\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\">\n    预期：\n    main.min.js\n    main.css\n    正则：\n```\n\n### <a name=\"sixteen\">十六. 元字符转义</name>\n\n>元字符，指正则中有特殊意义的字符，如.表示匹配除了换行符以外的任意字符，这个.就是元字符。在正则书写过程中，如果我们真的要匹配这个.，就需要对它进行转义，而不是让它使用正则的含义，比如，匹配域名里的.，我们就要写成/zjmainstay\\.cn/这样的正则。\n\n元字符转义\n\n```php\n    需求：表达式格式固定，提取其中的数值\n    源串：\n    (20+170)-5*1/5=?\n    预期：\n    A:20\n    B:170\n    C:5\n    D:1\n    E:5\n    F:?\n    正则：\n    替换：\n```\n\n### <a name=\"seventeen\">十七. 分隔符绕过（PCRE）</a>\n\n>有时候，如果该语言支持多种分隔符，在写正则的过程中通常会通过规避分隔符的方式，减少对分隔符的转义，让正则看起来更清晰，写起来更舒服，当然，js中是不支持的。\n\n分隔符绕过\n\n```php\n    需求：在不对/转义的情况下匹配p标签内容\n    源串：\n    <p>内容1</p><p>内容2</p>\n    预期：\n    在分组1中匹配到内容1和内容2\n    正则：<p>([^<]+)</p>@m\n```\n\n### <a name=\"eighteen\">十八. 匹配溢出排除</a>\n\n>匹配溢出，这不是一个术语名词，是我自己的叫法，主要指正则匹配内容超出了我们预期，导致匹配得到非预期的结果。\n\n* div标签匹配溢出\n\n```php\n    需求：匹配内容为数字的div\n    源串：\n    <div class=\"aaa bbb\">ABC</div><div class=\"bbb ccc\">123</div>\n    预期：\n    <div>123</div>\n    错误正则：/<div.*?>\\d+<\\/div>/\n    正则：/<div[^>]*>\\d+<\\/div>/\n```\n* 多字符排除\n\n```php\n    需求：匹配不包含某个单词或词语的内容\n    源串：\n    http://www.zjmainstay.cn\n    http://www.baidu.com\n    http://www.qq.com\n    预期：\n    http://www.zjmainstay.cn\n    http://www.qq.com\n    正则：/http:\\/\\/www\\.[^baidu].*/m\n    \n    需求：匹配不包含某个单词或词语的内容\n    源串：\n    A(\"Excalibur\", \"誓约胜利之剑\", LONG_SWORD, (SPFX_NOGEN | SPFX_RESTR | SPFX_SEEK | SPFX_DEFN | SPFX_INTEL | SPFX_SEARCH), \n      0, 0, PHYS(5, 10), DRLI(0, 0), NO_CARY, 0, A_LAWFUL, PM_KNIGHT, NON_PM, 4000L, NO_COLOR);\n    /*\n     * Stormbringer only has a 2 because it can drain a level,\n     * providing 8 more.\n     */\n    A(\"Stormbringer\", \"兴风者\", RUNESWORD,\n      (SPFX_RESTR | SPFX_ATTK | SPFX_DEFN | SPFX_INTEL | SPFX_DRLI), 0, 0,\n      DRLI(5, 2), DRLI(0, 0), NO_CARY, 0, A_CHAOTIC, NON_PM, NON_PM, 8000L,\n      NO_COLOR);\n    /*\n     * Mjollnir will return to the hand of the wielder when thrown\n     * if the wielder is a Valkyrie wearing Gauntlets of Power.\n     */\n    A(\"Mjollnir\", \"雷神之锤\", WAR_HAMMER, /* Mjo:llnir */\n      (SPFX_RESTR | SPFX_ATTK), 0, 0, ELEC(5, 24), NO_DFNS, NO_CARY, 0,\n      A_NEUTRAL, PM_VALKYRIE, NON_PM, 4000L, NO_COLOR);\n    A(\"Cleaver\", \"撕裂者\", BATTLE_AXE, SPFX_RESTR, 0, 0, PHYS(3, 6), NO_DFNS, NO_CARY, 0, A_NEUTRAL, PM_BARBARIAN, NON_PM, 1500L, NO_COLOR);\n    /*\n     * Grimtooth glows in warning when elves are present, but its\n     * damage bonus applies to all targets rather than just elves\n     * (handled as special case in spec_dbon()).\n     */\n    A(\"Grimtooth\", \"邪兽之牙\", ORCISH_DAGGER, (SPFX_RESTR | SPFX_WARN | SPFX_DFLAG2),\n      0, M2_ELF, PHYS(2, 6), NO_DFNS,\n      NO_CARY, 0, A_CHAOTIC, NON_PM, PM_ORC, 300L, CLR_RED);\n    /*\n     * Orcrist and Sting have same alignment as elves.\n     *\n     * The combination of SPFX_WARN+SPFX_DFLAG2+M2_value will trigger\n     * EWarn_of_mon for all monsters that have the M2_value flag.\n     * Sting and Orcrist will warn of M2_ORC monsters.\n     */\n    A(\"Orcrist\", \"杀兽剑\", ELVEN_BROADSWORD, (SPFX_WARN | SPFX_DFLAG2), 0, M2_ORC, PHYS(5, 0), \n      NO_DFNS, NO_CARY, 0, A_CHAOTIC, NON_PM, PM_ELF, 2000L, CLR_BRIGHT_BLUE); /* bright blue is actually light blue */\n    预期：\n    Excalibur=誓约胜利之剑\n    Stormbringer=兴风者\n    Mjollnir=雷神之锤\n    Cleaver=撕裂者\n    Grimtooth=邪兽之牙\n    Orcrist=杀兽剑\n    查找：\n    替换：\n```\n\n### <a name=\"nineteen\">十九. 环视循环提取格式化</a>\n\n>在数据处理过程中，经常遇到一些格式化处理，比如简单地将一批数据格式化为SQL（参考9.2），还有复杂的需要对一行数据的某部分进行循环提取，然后格式化为特定格式。\n\n```php\n    需求：循环提取每行数据的分支部分和固定部分，格式化为特定格式\n    源串：\n    BBB|CCC|DDD=AAA\n    FFF|GGG|HHH|III|JJJ|KKK=EEE\n    预期：\n    BBB=AAA\n    CCC=AAA\n    DDD=AAA\n    FFF=EEE\n    GGG=EEE\n    HHH=EEE\n    III=EEE\n    JJJ=EEE\n    KKK=EEE\n    查找：\\|(?=.*(=.*))\n    替换：$1\\n\n```\n### <a name=\"twenty\">二十. 三段论应用</a>\n\n>三段论:定锚点，去噪点，取数据。\n **锚点**，在正则中指^、$、\\b这类零宽的位置，这里做了衍生，指能够唯一确定我们目标数据位置的参照点，比如author=lalala，我们要匹配author属性的数据，则author=就是我们的参照点，通过它，我们能快速写出提取author属性的数据的正则：author=(.+)。\n **噪点**，就是对我们提取数据产生干扰的无关数据，我们在做正则匹配提取数据的过程中，可以选择性的忽略它们。当然，这里的忽略不是指不需要对它们做匹配，而是不需要对它们做精确匹配。\n **数据**，这个当然是指我们需要提取的内容了，如上面锚点举例，我们通过author=(.+)的(.+)对lalala部分数据进行了提取，因此，匹配结果的分组1（程序语言中的数组下标1）中，就能得到我们的结果。而对于多个数据的提取，如噪点举例，我们只需要针对数据部分进行多个分组（括号）的提取即可。\n 分组的计数，一般可以数左括号，排除环视和非捕获组的左括号，从1开始，依次加1递增，1,2,3,4....n，不同语言最大分组个数不同，大家在使用过程中自行留意，不过一般用不了那么多分组。\n 理解了三段论的概念，我们在写正则的过程中，只需要将源串进行分割划分，根据目标数据确定锚点，过滤噪点，提取数据，就能得到我们想要的正则了。","slug":"regex2","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08s000s8a9kyel38z8s","content":"<blockquote>\n<p>正则掌握程度测试题,以下测试题来自于 <a href=\"https://www.zybuluo.com/Zjmainstay/note/709093，\" target=\"_blank\" rel=\"external\">https://www.zybuluo.com/Zjmainstay/note/709093，</a> 答案是我自己的分析，欢迎各位进行批评与指导,部分习题答案后续不上</p>\n</blockquote>\n<ul>\n<li><a href=\"#one\">一.分组提取/非捕获组</a></li>\n<li><a href=\"#two\">二.单字符或</a></li>\n<li><a href=\"#three\">三.多字符或</a></li>\n<li><a href=\"#four\">四.分组引用</a></li>\n<li><a href=\"#five\">五.匹配换行数据</a></li>\n<li><a href=\"#six\">六.存在（或）</a></li>\n<li><a href=\"#seven\">七. 存在（与）</a></li>\n<li><a href=\"#eight\">八. 特殊限制（环视否定）</a></li>\n<li><a href=\"#nine\">九. 替换分组使用</a></li>\n<li><a href=\"#ten\">十. 分组可选</a></li>\n<li><a href=\"#eleven\">十一. 单字符拆分（数字）</a></li>\n<li><a href=\"#twelve\">十二. 贪婪模式</a></li>\n<li><a href=\"#thirteen\">十三. 非贪婪模式</a></li>\n<li><a href=\"#fourteen\">十四. 占用模式(PCRE)</a></li>\n<li><a href=\"#fiveteen\">十五. |字符分界（|的作用域）</a></li>\n<li><a href=\"#sixteen\">十六. 元字符转义</a></li>\n<li><a href=\"#seventeen\">十七. 分隔符绕过（PCRE）</a></li>\n<li><a href=\"#eighteen\">十八. 匹配溢出排除</a></li>\n<li><a href=\"#nineteen\">十九. 环视循环提取格式化</a></li>\n<li><a href=\"#twenty\">二十. 三段论应用</a></li>\n</ul>\n<h3 id=\"一-分组提取-非捕获组\"><a href=\"#一-分组提取-非捕获组\" class=\"headerlink\" title=\"一. 分组提取/非捕获组 \"></a>一. <a name=\"one\">分组提取/非捕获组 </a></h3><blockquote>\n<p>分组，是正则里一个非常重要的概念，我们需要针对某个区域提取数据，往往需要依赖分组。而分组，其实就是正则里()括住的部分。</p>\n</blockquote>\n<ul>\n<li><p>分组提取 </p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：在分组<span class=\"number\">1</span>中匹配meta中author属性的值</div><div class=\"line\">源串：</div><div class=\"line\">   &lt;meta author=<span class=\"string\">\"Zjmainstay\"</span> /&gt;</div><div class=\"line\">   another author=<span class=\"string\">\"Zjmainstay too\"</span></div><div class=\"line\">预期：分组<span class=\"number\">1</span>得到Zjmainstay</div><div class=\"line\">正则：<span class=\"string\">'/&lt;meta[^&gt;]author=\"(.*?)\".*?\\/&gt;/'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>非捕获组</p>\n<blockquote>\n<p>针对上面的分组，有时候，我们并不需要捕获某个分组的内容，我们可以使用非捕获组(?:表达式)，从而不捕获表达式部分内容到分组中。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">源串：</div><div class=\"line\">a</div><div class=\"line\">ab</div><div class=\"line\">abc</div><div class=\"line\">abcd</div><div class=\"line\">预期：匹配得到 ab 和 abcd，不包含分组<span class=\"number\">1</span></div><div class=\"line\">正则： <span class=\"string\">'/^(?:\\w\\w)+$/m'</span></div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"二-单字符或\"><a href=\"#二-单字符或\" class=\"headerlink\" title=\"二. 单字符或\"></a><a name=\"two\">二. 单字符或</a></h3><blockquote>\n<p>或条件是正则使用过程中常用的概念，比如，密码由字母或数字组成，这里就用到了或条件，而且，由于字母或数字都是单个字符，因此，可以使用[a-z0-9]这样的单字符或语法实现。<br> 常犯错误：匹配a或b写成[a|b]，此表达式实际上表示a或b或|，在[]内部的|表示其本身，注意区分(a|b)表示a或b的写法。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配由 A/S/D/F <span class=\"number\">4</span>个字母(区分大小写)组成的长度为<span class=\"number\">3</span>字符串</div><div class=\"line\">源串：</div><div class=\"line\">ABC</div><div class=\"line\">ASD</div><div class=\"line\">ADS</div><div class=\"line\">ASF</div><div class=\"line\">BBC</div><div class=\"line\">A|S</div><div class=\"line\">A|D</div><div class=\"line\">ASDF</div><div class=\"line\">预期：以[]元字符获得<span class=\"number\">3</span>个字母的或集，匹配 ASD/ADS/ASF <span class=\"number\">3</span>组数据</div><div class=\"line\">正则：<span class=\"string\">'/\\b[ASDF]&#123;3&#125;\\b/m'</span></div></pre></td></tr></table></figure>\n<h3 id=\"三-多字符或\"><a href=\"#三-多字符或\" class=\"headerlink\" title=\"三. 多字符或\"></a><a name=\"three\">三. 多字符或</a></h3><blockquote>\n<p>相对单字符或条件，多字符或也是很常见的，比如，我们需要匹配http或ftp两个协议头的url，就需要^(http|ftp)://.+$这样的语法来实现。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行数据中以.jpg/.jpeg/.png/.gif结尾的图片名称（含后缀）</div><div class=\"line\">源串：</div><div class=\"line\">image.jpg</div><div class=\"line\">image.jpeg</div><div class=\"line\">image.png</div><div class=\"line\">image.gif</div><div class=\"line\">not_image.txt</div><div class=\"line\">not_image.doc</div><div class=\"line\">not_image.xls</div><div class=\"line\">not_image.ppt</div><div class=\"line\">预期：匹配 image.jpg/image.jpeg/image.png/image.gif <span class=\"number\">4</span>个结果</div><div class=\"line\">正则：<span class=\"string\">'/.*?\\.(jpg|jpeg|png|gif)/m'</span></div></pre></td></tr></table></figure>\n<h3 id=\"四-分组引用\"><a href=\"#四-分组引用\" class=\"headerlink\" title=\"四. 分组引用\"></a><a name=\"four\">四. 分组引用</a></h3><blockquote>\n<p>前面介绍了分组，那某个分组在我们匹配过程中重复出现，又该如何处理？分组引用恰恰解决这个问题。比如，匹配出现重复单词的一行数据，我们可以这么写（多行模式）：/^.<em>?(\\b\\S+\\b).</em>?\\1.*$/m，\\1表示引用前面分组1中匹配到的内容，也就是重复的单词内容。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配连续相同<span class=\"number\">3</span>次的数字</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">111</span></div><div class=\"line\"><span class=\"number\">121</span></div><div class=\"line\"><span class=\"number\">112</span></div><div class=\"line\"><span class=\"number\">222</span></div><div class=\"line\">预期：匹配 <span class=\"number\">111</span>/<span class=\"number\">222</span> 两组数据</div><div class=\"line\">正则：<span class=\"string\">'/(\\d)\\1\\1/m'</span></div></pre></td></tr></table></figure>\n<h3 id=\"五-匹配换行数据\"><a href=\"#五-匹配换行数据\" class=\"headerlink\" title=\"五. 匹配换行数据\"></a><a name=\"five\">五. 匹配换行数据</a></h3><blockquote>\n<p>“我的正则本来好好的，突然不行了！”这个是很多正则新人遇到的问题，而这个问题，很多时候，就是因为原来正则中的.不能匹配新数据里的换行导致的。这时候，只需要把.改成[\\s\\S]这样的表达式就可以了。这个表达式表示空格或非空格，也就是任意字符啦。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：分别使用单行模式和普通模式匹配id=<span class=\"string\">\"author\"</span>的div中数据，div标签不在同一行</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div id=<span class=\"string\">\"author\"</span>&gt;</div><div class=\"line\">Zjmainstay</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">预期：Zjmainstay</div><div class=\"line\">正则<span class=\"number\">1</span>：<span class=\"string\">'@&lt;div[^&gt;]id=\"author\"&gt;(.*?)&lt;/div&gt;@ms'</span></div><div class=\"line\">正则<span class=\"number\">2</span>：</div></pre></td></tr></table></figure>\n<h3 id=\"六-存在（或）\"><a href=\"#六-存在（或）\" class=\"headerlink\" title=\"六. 存在（或）\"></a><a name=\"six\">六. 存在（或）</a></h3><ul>\n<li>匹配多种或条件的数据，没有特殊限制 </li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行中包含“作者”或者“读者”的数据</div><div class=\"line\">源串：</div><div class=\"line\">本文的作者是Zjmainstay</div><div class=\"line\">本文有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">什么乱七八糟的推理</div><div class=\"line\">你不匹配我，凭什么要我推荐你的博客 www.zjmainstay.cn</div><div class=\"line\">预期：匹配</div><div class=\"line\">本文的作者是Zjmainstay</div><div class=\"line\">本文有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">正则：$re = <span class=\"string\">'/^.*?(作者|读者).*?$/m'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>匹配多种或条件的数据，有特殊限制（不使用环视）</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行中“读者”在开头或结尾的数据</div><div class=\"line\">源串：</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">预期：匹配</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<ul>\n<li>匹配多种或条件的数据，有特殊限制（使用环视）</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行中“读者”在开头或结尾的数据</div><div class=\"line\">源串：</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">预期：匹配</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"七-存在（与）\"><a href=\"#七-存在（与）\" class=\"headerlink\" title=\"七. 存在（与）\"></a><a name=\"seven\">七. 存在（与）</a></h3><p>校验密码必须包含字母、数字和特殊字符，6-16位</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：校验密码必须包含字母、数字和特殊字符，<span class=\"number\">6</span><span class=\"number\">-16</span>位，假定特殊字符为 -_= 三个字符</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">12345</span></div><div class=\"line\"><span class=\"number\">123456</span></div><div class=\"line\"><span class=\"number\">1234561234561234</span></div><div class=\"line\"><span class=\"number\">12345612345612345</span></div><div class=\"line\">a1234</div><div class=\"line\">a12345</div><div class=\"line\"><span class=\"number\">-1234</span></div><div class=\"line\"><span class=\"number\">-12345</span></div><div class=\"line\">a<span class=\"number\">-123</span></div><div class=\"line\">a<span class=\"number\">-1234</span></div><div class=\"line\">a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span>a<span class=\"number\">-12</span></div><div class=\"line\">a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span></div><div class=\"line\">aaaaa</div><div class=\"line\">aaaaaa</div><div class=\"line\">-_=-_</div><div class=\"line\">-_=-_=</div><div class=\"line\">预期：匹配</div><div class=\"line\">a<span class=\"number\">-1234</span></div><div class=\"line\">a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span>a<span class=\"number\">-12</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"八-特殊限制（环视否定）\"><a href=\"#八-特殊限制（环视否定）\" class=\"headerlink\" title=\"八. 特殊限制（环视否定）\"></a><a name=\"eight\">八. 特殊限制（环视否定）</a></h3><ul>\n<li>使用\\d{1,3}匹配1-999的数据，不能以0开头</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：使用\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;匹配每行中<span class=\"number\">1</span><span class=\"number\">-999</span>的数据，不能以<span class=\"number\">0</span>开头</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"number\">999</span></div><div class=\"line\"><span class=\"number\">1000</span></div><div class=\"line\"><span class=\"number\">01</span></div><div class=\"line\"><span class=\"number\">001</span></div><div class=\"line\">预期：匹配</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"number\">999</span></div><div class=\"line\">正则：<span class=\"string\">'/(?!0)(?&lt;!\\d)\\d&#123;1,3&#125;\\b/'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>匹配除了span标签外的所有标签</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配除了&lt;span&gt;内容&lt;/span&gt;标签外的所有&lt;tagName&gt;内容&lt;/tagName&gt;格式标签</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div&gt;匹配我&lt;/div&gt;</div><div class=\"line\">&lt;span&gt;不匹配我&lt;/span&gt;</div><div class=\"line\">&lt;p&gt;匹配我&lt;/p&gt;</div><div class=\"line\">&lt;i&gt;匹配我&lt;/i&gt;</div><div class=\"line\">预期：匹配</div><div class=\"line\">&lt;div&gt;匹配我&lt;/div&gt;</div><div class=\"line\">&lt;p&gt;匹配我&lt;/p&gt;</div><div class=\"line\">&lt;i&gt;匹配我&lt;/i&gt;</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"九-替换分组使用\"><a href=\"#九-替换分组使用\" class=\"headerlink\" title=\"九. 替换分组使用\"></a><a name=\"nine\">九. 替换分组使用</a></h3><ul>\n<li>给源串每个链接加上<a href=\"http://www.zjmainstay.cn前缀\" target=\"_blank\" rel=\"external\">http://www.zjmainstay.cn前缀</a></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：给源串每个链接加上http:<span class=\"comment\">//www.zjmainstay.cn前缀</span></div><div class=\"line\">源串：</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-1\"</span> href=<span class=\"string\">\"/regexp-one\"</span>&gt;正则文章合集（All In One)&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-2\"</span> href=<span class=\"string\">\"/my-regexp\"</span>&gt;正则入门教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-3\"</span> href=<span class=\"string\">\"/deep-regexp\"</span>&gt;正则高级教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-4\"</span> href=<span class=\"string\">\"/regexp-lookaround\"</span>&gt;正则环视详解&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-5\"</span> href=<span class=\"string\">\"/php-curl\"</span>&gt;PHP cURL应用&lt;/a&gt;</div><div class=\"line\">预期：替换得到</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-1\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/regexp-one\"</span>&gt;正则文章合集（All In One)&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-2\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/my-regexp\"</span>&gt;正则入门教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-3\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/deep-regexp\"</span>&gt;正则高级教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-4\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/regexp-lookaround\"</span>&gt;正则环视详解&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-5\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/php-curl\"</span>&gt;PHP cURL应用&lt;/a&gt;</div><div class=\"line\">查找：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<ul>\n<li>将每行数据格式化为一条SQL语句</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：将每行特定格式数据格式化为SQL语句</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-11</span> Zjmainstay</div><div class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-12</span> Nobody</div><div class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-13</span> Somebody</div><div class=\"line\">预期：替换得到</div><div class=\"line\">INSERT INTO table_log(`id`, `created_at`, `author`) values(<span class=\"string\">'1'</span>, <span class=\"string\">'2017-04-11'</span>, <span class=\"string\">'Zjmainstay'</span>);</div><div class=\"line\">INSERT INTO table_log(`id`, `created_at`, `author`) values(<span class=\"string\">'2'</span>, <span class=\"string\">'2017-04-12'</span>, <span class=\"string\">'Nobody'</span>);</div><div class=\"line\">INSERT INTO table_log(`id`, `created_at`, `author`) values(<span class=\"string\">'3'</span>, <span class=\"string\">'2017-04-13'</span>, <span class=\"string\">'Somebody'</span>);</div><div class=\"line\">查找：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<h3 id=\"十-分组可选\"><a href=\"#十-分组可选\" class=\"headerlink\" title=\"十. 分组可选\"></a><a name=\"ten\">十. 分组可选</a></h3><ul>\n<li>分组可选</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：判断如果单词以A开头，匹配Apple；如果单词以B开头，匹配Banana；否则匹配<span class=\"keyword\">Empty</span></div><div class=\"line\">源串：</div><div class=\"line\">Angle</div><div class=\"line\">Apple</div><div class=\"line\">Banana</div><div class=\"line\">Best</div><div class=\"line\"><span class=\"keyword\">Empty</span></div><div class=\"line\">预期：匹配</div><div class=\"line\">Apple</div><div class=\"line\">Banana</div><div class=\"line\"><span class=\"keyword\">Empty</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<ul>\n<li>分组可选与分组引用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配html标签的属性值，属性值可以由双引号、单引号、无单双引号定界</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div id=\"I'm Zjmainstay\" class=\"name\" data-year=2017 age='27'&gt;</div><div class=\"line\">预期：分组匹配</div><div class=\"line\">I<span class=\"string\">'m Zjmainstay</span></div><div class=\"line\"><span class=\"string\">author</span></div><div class=\"line\"><span class=\"string\">2017</span></div><div class=\"line\"><span class=\"string\">27</span></div><div class=\"line\"><span class=\"string\">正则：</span></div></pre></td></tr></table></figure>\n<h3 id=\"十一-单字符拆分（数字）\"><a href=\"#十一-单字符拆分（数字）\" class=\"headerlink\" title=\"十一. 单字符拆分（数字）\"></a><a name=\"eleven\">十一. 单字符拆分（数字）</a></h3><p>匹配0.00-100.00的数值，可以有0-2位小数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配<span class=\"number\">0.00</span><span class=\"number\">-100.00</span>的数值，可以有<span class=\"number\">0</span><span class=\"number\">-2</span>位小数，不能以小数点结尾，不能以<span class=\"number\">2</span>个以上的<span class=\"number\">0</span>开头</div><div class=\"line\">思路：(<span class=\"number\">100</span>|<span class=\"number\">10</span><span class=\"number\">-99</span>|<span class=\"number\">0</span><span class=\"number\">-9</span>) + <span class=\"number\">0</span><span class=\"number\">-2</span>小数位 + 排除小数点结尾、<span class=\"number\">2</span>个以上<span class=\"number\">0</span>开头的情况</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"number\">0.00</span></div><div class=\"line\"><span class=\"number\">9.00</span></div><div class=\"line\"><span class=\"number\">18.00</span></div><div class=\"line\"><span class=\"number\">27.0</span></div><div class=\"line\"><span class=\"number\">36.00</span></div><div class=\"line\"><span class=\"number\">45.00</span></div><div class=\"line\"><span class=\"number\">54.00</span></div><div class=\"line\"><span class=\"number\">63.00</span></div><div class=\"line\"><span class=\"number\">72.00</span></div><div class=\"line\"><span class=\"number\">81.00</span></div><div class=\"line\"><span class=\"number\">90.00</span></div><div class=\"line\"><span class=\"number\">99.99</span></div><div class=\"line\"><span class=\"number\">100.00</span></div><div class=\"line\"><span class=\"number\">0.</span></div><div class=\"line\"><span class=\"number\">001</span></div><div class=\"line\"><span class=\"number\">100.01</span></div><div class=\"line\"><span class=\"number\">100.001</span></div><div class=\"line\"><span class=\"number\">101</span></div><div class=\"line\">预期：匹配<span class=\"number\">0.00</span>~<span class=\"number\">100.00</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十二-贪婪模式\"><a href=\"#十二-贪婪模式\" class=\"headerlink\" title=\"十二. 贪婪模式\"></a><a name=\"twelve\">十二. 贪婪模式</a></h3><ul>\n<li>匹配链接中的文件名</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：利用贪婪模式，分组<span class=\"number\">1</span>得到每行链接中的文件名</div><div class=\"line\">源串：</div><div class=\"line\">http:<span class=\"comment\">//localhost.com/a/b/c/d/file1.txt</span></div><div class=\"line\">https:<span class=\"comment\">//localhost.com/a/b/file2long.jpg</span></div><div class=\"line\">预期：分组<span class=\"number\">0</span>匹配行数据，分组<span class=\"number\">1</span>匹配文件名</div><div class=\"line\">file1.txt</div><div class=\"line\">file2long.jpg</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<ul>\n<li>限定字符贪婪优化匹配性能</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配div id=<span class=\"string\">\"author\"</span>的标签内容</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div id=\"author\" class=\"author-text something-useless\"&gt;Zjmainstay&lt;/div&gt;</div><div class=\"line\">预期：利用贪婪模式去掉div中的噪点（无关数据），分组<span class=\"number\">1</span>匹配到Zjmainstay</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十三-非贪婪模式\"><a href=\"#十三-非贪婪模式\" class=\"headerlink\" title=\"十三. 非贪婪模式\"></a><a name=\"thirteen\">十三. 非贪婪模式</a></h3><blockquote>\n<p>贪婪模式，正则会优先尽可能少地匹配能匹配到的内容。当剩余正则匹配剩余部分字符（源串）但无法满足匹配时，非贪婪部分继续匹配更多内容，尝试满足剩余部分字符的匹配。</p>\n</blockquote>\n<p>匹配p标签内容</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配p标签内容</div><div class=\"line\">源串：</div><div class=\"line\">&lt;p&gt;内容<span class=\"number\">1</span>&lt;/p&gt;&lt;p&gt;内容<span class=\"number\">2</span>&lt;/p&gt;</div><div class=\"line\">预期：</div><div class=\"line\">在分组<span class=\"number\">1</span>中匹配到内容<span class=\"number\">1</span>和内容<span class=\"number\">2</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十四-占用模式-PCRE\"><a href=\"#十四-占用模式-PCRE\" class=\"headerlink\" title=\"十四. 占用模式(PCRE)\"></a><a name=\"fourteen\">十四. 占用模式(PCRE)</a></h3><blockquote>\n<p>贪婪模式后再加一个+量词，如.++，效果是贪婪而且不回溯。<br> 暂时没有想到应用场景。</p>\n</blockquote>\n<h3 id=\"十五-字符分界（-的作用域）\"><a href=\"#十五-字符分界（-的作用域）\" class=\"headerlink\" title=\"十五. |字符分界（|的作用域）\"></a><a name=\"fiveteen\">十五. |字符分界（|的作用域）</a></h3><blockquote>\n<p>|作为或条件分隔符，它的分隔区间常常存在误用。在使用|字符的过程中，我们常常需要结合()来对它进行限定。如，^([0-9]+|[a-z]+)$表示纯数字或纯字母，如果没有()，那它又是另一种意思了。^[0-9]+|[a-z]+$等价于^[0-9]+或[a-z]+$，因此，它表示数字开头或者字母结尾，跟我们的需求有了很大的差别。</p>\n</blockquote>\n<p>|字符分界</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：在分组<span class=\"number\">1</span>中匹配css或script的链接</div><div class=\"line\">源串：</div><div class=\"line\">&lt;script src=<span class=\"string\">\"main.min.js\"</span> type=<span class=\"string\">\"text/javascript\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"main.css\"</span>&gt;</div><div class=\"line\">预期：</div><div class=\"line\">main.min.js</div><div class=\"line\">main.css</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十六-元字符转义\"><a href=\"#十六-元字符转义\" class=\"headerlink\" title=\"十六. 元字符转义\"></a><a name=\"sixteen\">十六. 元字符转义</a></h3><blockquote>\n<p>元字符，指正则中有特殊意义的字符，如.表示匹配除了换行符以外的任意字符，这个.就是元字符。在正则书写过程中，如果我们真的要匹配这个.，就需要对它进行转义，而不是让它使用正则的含义，比如，匹配域名里的.，我们就要写成/zjmainstay.cn/这样的正则。</p>\n</blockquote>\n<p>元字符转义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：表达式格式固定，提取其中的数值</div><div class=\"line\">源串：</div><div class=\"line\">(<span class=\"number\">20</span>+<span class=\"number\">170</span>)<span class=\"number\">-5</span>*<span class=\"number\">1</span>/<span class=\"number\">5</span>=?</div><div class=\"line\">预期：</div><div class=\"line\">A:<span class=\"number\">20</span></div><div class=\"line\">B:<span class=\"number\">170</span></div><div class=\"line\">C:<span class=\"number\">5</span></div><div class=\"line\">D:<span class=\"number\">1</span></div><div class=\"line\">E:<span class=\"number\">5</span></div><div class=\"line\">F:?</div><div class=\"line\">正则：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<h3 id=\"十七-分隔符绕过（PCRE）\"><a href=\"#十七-分隔符绕过（PCRE）\" class=\"headerlink\" title=\"十七. 分隔符绕过（PCRE）\"></a><a name=\"seventeen\">十七. 分隔符绕过（PCRE）</a></h3><blockquote>\n<p>有时候，如果该语言支持多种分隔符，在写正则的过程中通常会通过规避分隔符的方式，减少对分隔符的转义，让正则看起来更清晰，写起来更舒服，当然，js中是不支持的。</p>\n</blockquote>\n<p>分隔符绕过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：在不对/转义的情况下匹配p标签内容</div><div class=\"line\">源串：</div><div class=\"line\">&lt;p&gt;内容<span class=\"number\">1</span>&lt;/p&gt;&lt;p&gt;内容<span class=\"number\">2</span>&lt;/p&gt;</div><div class=\"line\">预期：</div><div class=\"line\">在分组<span class=\"number\">1</span>中匹配到内容<span class=\"number\">1</span>和内容<span class=\"number\">2</span></div><div class=\"line\">正则：&lt;p&gt;([^&lt;]+)&lt;/p&gt;@m</div></pre></td></tr></table></figure>\n<h3 id=\"十八-匹配溢出排除\"><a href=\"#十八-匹配溢出排除\" class=\"headerlink\" title=\"十八. 匹配溢出排除\"></a><a name=\"eighteen\">十八. 匹配溢出排除</a></h3><blockquote>\n<p>匹配溢出，这不是一个术语名词，是我自己的叫法，主要指正则匹配内容超出了我们预期，导致匹配得到非预期的结果。</p>\n</blockquote>\n<ul>\n<li>div标签匹配溢出</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配内容为数字的div</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div class=\"aaa bbb\"&gt;ABC&lt;/div&gt;&lt;div class=\"bbb ccc\"&gt;123&lt;/div&gt;</div><div class=\"line\">预期：</div><div class=\"line\">&lt;div&gt;<span class=\"number\">123</span>&lt;/div&gt;</div><div class=\"line\">错误正则：/&lt;div.*<span class=\"meta\">?&gt;</span>\\d+&lt;\\/div&gt;/</div><div class=\"line\">正则：/&lt;div[^&gt;]*&gt;\\d+&lt;\\/div&gt;/</div></pre></td></tr></table></figure>\n<ul>\n<li>多字符排除</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配不包含某个单词或词语的内容</div><div class=\"line\">源串：</div><div class=\"line\">http:<span class=\"comment\">//www.zjmainstay.cn</span></div><div class=\"line\">http:<span class=\"comment\">//www.baidu.com</span></div><div class=\"line\">http:<span class=\"comment\">//www.qq.com</span></div><div class=\"line\">预期：</div><div class=\"line\">http:<span class=\"comment\">//www.zjmainstay.cn</span></div><div class=\"line\">http:<span class=\"comment\">//www.qq.com</span></div><div class=\"line\">正则：/http:\\/\\/www\\.[^baidu].*/m</div><div class=\"line\"></div><div class=\"line\">需求：匹配不包含某个单词或词语的内容</div><div class=\"line\">源串：</div><div class=\"line\">A(<span class=\"string\">\"Excalibur\"</span>, <span class=\"string\">\"誓约胜利之剑\"</span>, LONG_SWORD, (SPFX_NOGEN | SPFX_RESTR | SPFX_SEEK | SPFX_DEFN | SPFX_INTEL | SPFX_SEARCH), </div><div class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">0</span>, PHYS(<span class=\"number\">5</span>, <span class=\"number\">10</span>), DRLI(<span class=\"number\">0</span>, <span class=\"number\">0</span>), NO_CARY, <span class=\"number\">0</span>, A_LAWFUL, PM_KNIGHT, NON_PM, <span class=\"number\">4000</span>L, NO_COLOR);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Stormbringer only has a 2 because it can drain a level,</span></div><div class=\"line\"><span class=\"comment\"> * providing 8 more.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Stormbringer\"</span>, <span class=\"string\">\"兴风者\"</span>, RUNESWORD,</div><div class=\"line\">  (SPFX_RESTR | SPFX_ATTK | SPFX_DEFN | SPFX_INTEL | SPFX_DRLI), <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">  DRLI(<span class=\"number\">5</span>, <span class=\"number\">2</span>), DRLI(<span class=\"number\">0</span>, <span class=\"number\">0</span>), NO_CARY, <span class=\"number\">0</span>, A_CHAOTIC, NON_PM, NON_PM, <span class=\"number\">8000</span>L,</div><div class=\"line\">  NO_COLOR);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Mjollnir will return to the hand of the wielder when thrown</span></div><div class=\"line\"><span class=\"comment\"> * if the wielder is a Valkyrie wearing Gauntlets of Power.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Mjollnir\"</span>, <span class=\"string\">\"雷神之锤\"</span>, WAR_HAMMER, <span class=\"comment\">/* Mjo:llnir */</span></div><div class=\"line\">  (SPFX_RESTR | SPFX_ATTK), <span class=\"number\">0</span>, <span class=\"number\">0</span>, ELEC(<span class=\"number\">5</span>, <span class=\"number\">24</span>), NO_DFNS, NO_CARY, <span class=\"number\">0</span>,</div><div class=\"line\">  A_NEUTRAL, PM_VALKYRIE, NON_PM, <span class=\"number\">4000</span>L, NO_COLOR);</div><div class=\"line\">A(<span class=\"string\">\"Cleaver\"</span>, <span class=\"string\">\"撕裂者\"</span>, BATTLE_AXE, SPFX_RESTR, <span class=\"number\">0</span>, <span class=\"number\">0</span>, PHYS(<span class=\"number\">3</span>, <span class=\"number\">6</span>), NO_DFNS, NO_CARY, <span class=\"number\">0</span>, A_NEUTRAL, PM_BARBARIAN, NON_PM, <span class=\"number\">1500</span>L, NO_COLOR);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Grimtooth glows in warning when elves are present, but its</span></div><div class=\"line\"><span class=\"comment\"> * damage bonus applies to all targets rather than just elves</span></div><div class=\"line\"><span class=\"comment\"> * (handled as special case in spec_dbon()).</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Grimtooth\"</span>, <span class=\"string\">\"邪兽之牙\"</span>, ORCISH_DAGGER, (SPFX_RESTR | SPFX_WARN | SPFX_DFLAG2),</div><div class=\"line\">  <span class=\"number\">0</span>, M2_ELF, PHYS(<span class=\"number\">2</span>, <span class=\"number\">6</span>), NO_DFNS,</div><div class=\"line\">  NO_CARY, <span class=\"number\">0</span>, A_CHAOTIC, NON_PM, PM_ORC, <span class=\"number\">300</span>L, CLR_RED);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Orcrist and Sting have same alignment as elves.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * The combination of SPFX_WARN+SPFX_DFLAG2+M2_value will trigger</span></div><div class=\"line\"><span class=\"comment\"> * EWarn_of_mon for all monsters that have the M2_value flag.</span></div><div class=\"line\"><span class=\"comment\"> * Sting and Orcrist will warn of M2_ORC monsters.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Orcrist\"</span>, <span class=\"string\">\"杀兽剑\"</span>, ELVEN_BROADSWORD, (SPFX_WARN | SPFX_DFLAG2), <span class=\"number\">0</span>, M2_ORC, PHYS(<span class=\"number\">5</span>, <span class=\"number\">0</span>), </div><div class=\"line\">  NO_DFNS, NO_CARY, <span class=\"number\">0</span>, A_CHAOTIC, NON_PM, PM_ELF, <span class=\"number\">2000</span>L, CLR_BRIGHT_BLUE); <span class=\"comment\">/* bright blue is actually light blue */</span></div><div class=\"line\">预期：</div><div class=\"line\">Excalibur=誓约胜利之剑</div><div class=\"line\">Stormbringer=兴风者</div><div class=\"line\">Mjollnir=雷神之锤</div><div class=\"line\">Cleaver=撕裂者</div><div class=\"line\">Grimtooth=邪兽之牙</div><div class=\"line\">Orcrist=杀兽剑</div><div class=\"line\">查找：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<h3 id=\"十九-环视循环提取格式化\"><a href=\"#十九-环视循环提取格式化\" class=\"headerlink\" title=\"十九. 环视循环提取格式化\"></a><a name=\"nineteen\">十九. 环视循环提取格式化</a></h3><blockquote>\n<p>在数据处理过程中，经常遇到一些格式化处理，比如简单地将一批数据格式化为SQL（参考9.2），还有复杂的需要对一行数据的某部分进行循环提取，然后格式化为特定格式。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：循环提取每行数据的分支部分和固定部分，格式化为特定格式</div><div class=\"line\">源串：</div><div class=\"line\">BBB|CCC|DDD=AAA</div><div class=\"line\">FFF|GGG|HHH|III|JJJ|KKK=EEE</div><div class=\"line\">预期：</div><div class=\"line\">BBB=AAA</div><div class=\"line\">CCC=AAA</div><div class=\"line\">DDD=AAA</div><div class=\"line\">FFF=EEE</div><div class=\"line\">GGG=EEE</div><div class=\"line\">HHH=EEE</div><div class=\"line\">III=EEE</div><div class=\"line\">JJJ=EEE</div><div class=\"line\">KKK=EEE</div><div class=\"line\">查找：\\|(?=.*(=.*))</div><div class=\"line\">替换：$<span class=\"number\">1</span>\\n</div></pre></td></tr></table></figure>\n<h3 id=\"二十-三段论应用\"><a href=\"#二十-三段论应用\" class=\"headerlink\" title=\"二十. 三段论应用\"></a><a name=\"twenty\">二十. 三段论应用</a></h3><blockquote>\n<p>三段论:定锚点，去噪点，取数据。<br> <strong>锚点</strong>，在正则中指^、$、\\b这类零宽的位置，这里做了衍生，指能够唯一确定我们目标数据位置的参照点，比如author=lalala，我们要匹配author属性的数据，则author=就是我们的参照点，通过它，我们能快速写出提取author属性的数据的正则：author=(.+)。<br> <strong>噪点</strong>，就是对我们提取数据产生干扰的无关数据，我们在做正则匹配提取数据的过程中，可以选择性的忽略它们。当然，这里的忽略不是指不需要对它们做匹配，而是不需要对它们做精确匹配。<br> <strong>数据</strong>，这个当然是指我们需要提取的内容了，如上面锚点举例，我们通过author=(.+)的(.+)对lalala部分数据进行了提取，因此，匹配结果的分组1（程序语言中的数组下标1）中，就能得到我们的结果。而对于多个数据的提取，如噪点举例，我们只需要针对数据部分进行多个分组（括号）的提取即可。<br> 分组的计数，一般可以数左括号，排除环视和非捕获组的左括号，从1开始，依次加1递增，1,2,3,4….n，不同语言最大分组个数不同，大家在使用过程中自行留意，不过一般用不了那么多分组。<br> 理解了三段论的概念，我们在写正则的过程中，只需要将源串进行分割划分，根据目标数据确定锚点，过滤噪点，提取数据，就能得到我们想要的正则了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>正则掌握程度测试题,以下测试题来自于 <a href=\"https://www.zybuluo.com/Zjmainstay/note/709093，\" target=\"_blank\" rel=\"external\">https://www.zybuluo.com/Zjmainstay/note/709093，</a> 答案是我自己的分析，欢迎各位进行批评与指导,部分习题答案后续不上</p>\n</blockquote>\n<ul>\n<li><a href=\"#one\">一.分组提取/非捕获组</a></li>\n<li><a href=\"#two\">二.单字符或</a></li>\n<li><a href=\"#three\">三.多字符或</a></li>\n<li><a href=\"#four\">四.分组引用</a></li>\n<li><a href=\"#five\">五.匹配换行数据</a></li>\n<li><a href=\"#six\">六.存在（或）</a></li>\n<li><a href=\"#seven\">七. 存在（与）</a></li>\n<li><a href=\"#eight\">八. 特殊限制（环视否定）</a></li>\n<li><a href=\"#nine\">九. 替换分组使用</a></li>\n<li><a href=\"#ten\">十. 分组可选</a></li>\n<li><a href=\"#eleven\">十一. 单字符拆分（数字）</a></li>\n<li><a href=\"#twelve\">十二. 贪婪模式</a></li>\n<li><a href=\"#thirteen\">十三. 非贪婪模式</a></li>\n<li><a href=\"#fourteen\">十四. 占用模式(PCRE)</a></li>\n<li><a href=\"#fiveteen\">十五. |字符分界（|的作用域）</a></li>\n<li><a href=\"#sixteen\">十六. 元字符转义</a></li>\n<li><a href=\"#seventeen\">十七. 分隔符绕过（PCRE）</a></li>\n<li><a href=\"#eighteen\">十八. 匹配溢出排除</a></li>\n<li><a href=\"#nineteen\">十九. 环视循环提取格式化</a></li>\n<li><a href=\"#twenty\">二十. 三段论应用</a></li>\n</ul>\n<h3 id=\"一-分组提取-非捕获组\"><a href=\"#一-分组提取-非捕获组\" class=\"headerlink\" title=\"一. 分组提取/非捕获组 \"></a>一. <a name=\"one\">分组提取/非捕获组 </a></h3><blockquote>\n<p>分组，是正则里一个非常重要的概念，我们需要针对某个区域提取数据，往往需要依赖分组。而分组，其实就是正则里()括住的部分。</p>\n</blockquote>\n<ul>\n<li><p>分组提取 </p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：在分组<span class=\"number\">1</span>中匹配meta中author属性的值</div><div class=\"line\">源串：</div><div class=\"line\">   &lt;meta author=<span class=\"string\">\"Zjmainstay\"</span> /&gt;</div><div class=\"line\">   another author=<span class=\"string\">\"Zjmainstay too\"</span></div><div class=\"line\">预期：分组<span class=\"number\">1</span>得到Zjmainstay</div><div class=\"line\">正则：<span class=\"string\">'/&lt;meta[^&gt;]author=\"(.*?)\".*?\\/&gt;/'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>非捕获组</p>\n<blockquote>\n<p>针对上面的分组，有时候，我们并不需要捕获某个分组的内容，我们可以使用非捕获组(?:表达式)，从而不捕获表达式部分内容到分组中。</p>\n</blockquote>\n</li>\n</ul>\n<pre><code><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">源串：</div><div class=\"line\">a</div><div class=\"line\">ab</div><div class=\"line\">abc</div><div class=\"line\">abcd</div><div class=\"line\">预期：匹配得到 ab 和 abcd，不包含分组<span class=\"number\">1</span></div><div class=\"line\">正则： <span class=\"string\">'/^(?:\\w\\w)+$/m'</span></div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"二-单字符或\"><a href=\"#二-单字符或\" class=\"headerlink\" title=\"二. 单字符或\"></a><a name=\"two\">二. 单字符或</a></h3><blockquote>\n<p>或条件是正则使用过程中常用的概念，比如，密码由字母或数字组成，这里就用到了或条件，而且，由于字母或数字都是单个字符，因此，可以使用[a-z0-9]这样的单字符或语法实现。<br> 常犯错误：匹配a或b写成[a|b]，此表达式实际上表示a或b或|，在[]内部的|表示其本身，注意区分(a|b)表示a或b的写法。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配由 A/S/D/F <span class=\"number\">4</span>个字母(区分大小写)组成的长度为<span class=\"number\">3</span>字符串</div><div class=\"line\">源串：</div><div class=\"line\">ABC</div><div class=\"line\">ASD</div><div class=\"line\">ADS</div><div class=\"line\">ASF</div><div class=\"line\">BBC</div><div class=\"line\">A|S</div><div class=\"line\">A|D</div><div class=\"line\">ASDF</div><div class=\"line\">预期：以[]元字符获得<span class=\"number\">3</span>个字母的或集，匹配 ASD/ADS/ASF <span class=\"number\">3</span>组数据</div><div class=\"line\">正则：<span class=\"string\">'/\\b[ASDF]&#123;3&#125;\\b/m'</span></div></pre></td></tr></table></figure>\n<h3 id=\"三-多字符或\"><a href=\"#三-多字符或\" class=\"headerlink\" title=\"三. 多字符或\"></a><a name=\"three\">三. 多字符或</a></h3><blockquote>\n<p>相对单字符或条件，多字符或也是很常见的，比如，我们需要匹配http或ftp两个协议头的url，就需要^(http|ftp)://.+$这样的语法来实现。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行数据中以.jpg/.jpeg/.png/.gif结尾的图片名称（含后缀）</div><div class=\"line\">源串：</div><div class=\"line\">image.jpg</div><div class=\"line\">image.jpeg</div><div class=\"line\">image.png</div><div class=\"line\">image.gif</div><div class=\"line\">not_image.txt</div><div class=\"line\">not_image.doc</div><div class=\"line\">not_image.xls</div><div class=\"line\">not_image.ppt</div><div class=\"line\">预期：匹配 image.jpg/image.jpeg/image.png/image.gif <span class=\"number\">4</span>个结果</div><div class=\"line\">正则：<span class=\"string\">'/.*?\\.(jpg|jpeg|png|gif)/m'</span></div></pre></td></tr></table></figure>\n<h3 id=\"四-分组引用\"><a href=\"#四-分组引用\" class=\"headerlink\" title=\"四. 分组引用\"></a><a name=\"four\">四. 分组引用</a></h3><blockquote>\n<p>前面介绍了分组，那某个分组在我们匹配过程中重复出现，又该如何处理？分组引用恰恰解决这个问题。比如，匹配出现重复单词的一行数据，我们可以这么写（多行模式）：/^.<em>?(\\b\\S+\\b).</em>?\\1.*$/m，\\1表示引用前面分组1中匹配到的内容，也就是重复的单词内容。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配连续相同<span class=\"number\">3</span>次的数字</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">111</span></div><div class=\"line\"><span class=\"number\">121</span></div><div class=\"line\"><span class=\"number\">112</span></div><div class=\"line\"><span class=\"number\">222</span></div><div class=\"line\">预期：匹配 <span class=\"number\">111</span>/<span class=\"number\">222</span> 两组数据</div><div class=\"line\">正则：<span class=\"string\">'/(\\d)\\1\\1/m'</span></div></pre></td></tr></table></figure>\n<h3 id=\"五-匹配换行数据\"><a href=\"#五-匹配换行数据\" class=\"headerlink\" title=\"五. 匹配换行数据\"></a><a name=\"five\">五. 匹配换行数据</a></h3><blockquote>\n<p>“我的正则本来好好的，突然不行了！”这个是很多正则新人遇到的问题，而这个问题，很多时候，就是因为原来正则中的.不能匹配新数据里的换行导致的。这时候，只需要把.改成[\\s\\S]这样的表达式就可以了。这个表达式表示空格或非空格，也就是任意字符啦。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：分别使用单行模式和普通模式匹配id=<span class=\"string\">\"author\"</span>的div中数据，div标签不在同一行</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div id=<span class=\"string\">\"author\"</span>&gt;</div><div class=\"line\">Zjmainstay</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">预期：Zjmainstay</div><div class=\"line\">正则<span class=\"number\">1</span>：<span class=\"string\">'@&lt;div[^&gt;]id=\"author\"&gt;(.*?)&lt;/div&gt;@ms'</span></div><div class=\"line\">正则<span class=\"number\">2</span>：</div></pre></td></tr></table></figure>\n<h3 id=\"六-存在（或）\"><a href=\"#六-存在（或）\" class=\"headerlink\" title=\"六. 存在（或）\"></a><a name=\"six\">六. 存在（或）</a></h3><ul>\n<li>匹配多种或条件的数据，没有特殊限制 </li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行中包含“作者”或者“读者”的数据</div><div class=\"line\">源串：</div><div class=\"line\">本文的作者是Zjmainstay</div><div class=\"line\">本文有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">什么乱七八糟的推理</div><div class=\"line\">你不匹配我，凭什么要我推荐你的博客 www.zjmainstay.cn</div><div class=\"line\">预期：匹配</div><div class=\"line\">本文的作者是Zjmainstay</div><div class=\"line\">本文有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">正则：$re = <span class=\"string\">'/^.*?(作者|读者).*?$/m'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>匹配多种或条件的数据，有特殊限制（不使用环视）</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行中“读者”在开头或结尾的数据</div><div class=\"line\">源串：</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">预期：匹配</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<ul>\n<li>匹配多种或条件的数据，有特殊限制（使用环视）</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配每行中“读者”在开头或结尾的数据</div><div class=\"line\">源串：</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">这里的任何一个地方说明读者也能在国外</div><div class=\"line\">预期：匹配</div><div class=\"line\">本文作者是Zjmainstay，有很多读者</div><div class=\"line\">读者可以是任何一个地方的人</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"七-存在（与）\"><a href=\"#七-存在（与）\" class=\"headerlink\" title=\"七. 存在（与）\"></a><a name=\"seven\">七. 存在（与）</a></h3><p>校验密码必须包含字母、数字和特殊字符，6-16位</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：校验密码必须包含字母、数字和特殊字符，<span class=\"number\">6</span><span class=\"number\">-16</span>位，假定特殊字符为 -_= 三个字符</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">12345</span></div><div class=\"line\"><span class=\"number\">123456</span></div><div class=\"line\"><span class=\"number\">1234561234561234</span></div><div class=\"line\"><span class=\"number\">12345612345612345</span></div><div class=\"line\">a1234</div><div class=\"line\">a12345</div><div class=\"line\"><span class=\"number\">-1234</span></div><div class=\"line\"><span class=\"number\">-12345</span></div><div class=\"line\">a<span class=\"number\">-123</span></div><div class=\"line\">a<span class=\"number\">-1234</span></div><div class=\"line\">a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span>a<span class=\"number\">-12</span></div><div class=\"line\">a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span></div><div class=\"line\">aaaaa</div><div class=\"line\">aaaaaa</div><div class=\"line\">-_=-_</div><div class=\"line\">-_=-_=</div><div class=\"line\">预期：匹配</div><div class=\"line\">a<span class=\"number\">-1234</span></div><div class=\"line\">a<span class=\"number\">-1234</span>a<span class=\"number\">-1234</span>a<span class=\"number\">-12</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"八-特殊限制（环视否定）\"><a href=\"#八-特殊限制（环视否定）\" class=\"headerlink\" title=\"八. 特殊限制（环视否定）\"></a><a name=\"eight\">八. 特殊限制（环视否定）</a></h3><ul>\n<li>使用\\d{1,3}匹配1-999的数据，不能以0开头</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：使用\\d&#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;匹配每行中<span class=\"number\">1</span><span class=\"number\">-999</span>的数据，不能以<span class=\"number\">0</span>开头</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"number\">999</span></div><div class=\"line\"><span class=\"number\">1000</span></div><div class=\"line\"><span class=\"number\">01</span></div><div class=\"line\"><span class=\"number\">001</span></div><div class=\"line\">预期：匹配</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">10</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"number\">999</span></div><div class=\"line\">正则：<span class=\"string\">'/(?!0)(?&lt;!\\d)\\d&#123;1,3&#125;\\b/'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>匹配除了span标签外的所有标签</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配除了&lt;span&gt;内容&lt;/span&gt;标签外的所有&lt;tagName&gt;内容&lt;/tagName&gt;格式标签</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div&gt;匹配我&lt;/div&gt;</div><div class=\"line\">&lt;span&gt;不匹配我&lt;/span&gt;</div><div class=\"line\">&lt;p&gt;匹配我&lt;/p&gt;</div><div class=\"line\">&lt;i&gt;匹配我&lt;/i&gt;</div><div class=\"line\">预期：匹配</div><div class=\"line\">&lt;div&gt;匹配我&lt;/div&gt;</div><div class=\"line\">&lt;p&gt;匹配我&lt;/p&gt;</div><div class=\"line\">&lt;i&gt;匹配我&lt;/i&gt;</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"九-替换分组使用\"><a href=\"#九-替换分组使用\" class=\"headerlink\" title=\"九. 替换分组使用\"></a><a name=\"nine\">九. 替换分组使用</a></h3><ul>\n<li>给源串每个链接加上<a href=\"http://www.zjmainstay.cn前缀\" target=\"_blank\" rel=\"external\">http://www.zjmainstay.cn前缀</a></li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：给源串每个链接加上http:<span class=\"comment\">//www.zjmainstay.cn前缀</span></div><div class=\"line\">源串：</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-1\"</span> href=<span class=\"string\">\"/regexp-one\"</span>&gt;正则文章合集（All In One)&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-2\"</span> href=<span class=\"string\">\"/my-regexp\"</span>&gt;正则入门教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-3\"</span> href=<span class=\"string\">\"/deep-regexp\"</span>&gt;正则高级教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-4\"</span> href=<span class=\"string\">\"/regexp-lookaround\"</span>&gt;正则环视详解&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-5\"</span> href=<span class=\"string\">\"/php-curl\"</span>&gt;PHP cURL应用&lt;/a&gt;</div><div class=\"line\">预期：替换得到</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-1\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/regexp-one\"</span>&gt;正则文章合集（All In One)&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-2\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/my-regexp\"</span>&gt;正则入门教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-3\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/deep-regexp\"</span>&gt;正则高级教程&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-4\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/regexp-lookaround\"</span>&gt;正则环视详解&lt;/a&gt;</div><div class=\"line\">&lt;a id=<span class=\"string\">\"link-5\"</span> href=<span class=\"string\">\"http://www.zjmainstay.cn/php-curl\"</span>&gt;PHP cURL应用&lt;/a&gt;</div><div class=\"line\">查找：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<ul>\n<li>将每行数据格式化为一条SQL语句</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：将每行特定格式数据格式化为SQL语句</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-11</span> Zjmainstay</div><div class=\"line\"><span class=\"number\">2</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-12</span> Nobody</div><div class=\"line\"><span class=\"number\">3</span> <span class=\"number\">2017</span><span class=\"number\">-04</span><span class=\"number\">-13</span> Somebody</div><div class=\"line\">预期：替换得到</div><div class=\"line\">INSERT INTO table_log(`id`, `created_at`, `author`) values(<span class=\"string\">'1'</span>, <span class=\"string\">'2017-04-11'</span>, <span class=\"string\">'Zjmainstay'</span>);</div><div class=\"line\">INSERT INTO table_log(`id`, `created_at`, `author`) values(<span class=\"string\">'2'</span>, <span class=\"string\">'2017-04-12'</span>, <span class=\"string\">'Nobody'</span>);</div><div class=\"line\">INSERT INTO table_log(`id`, `created_at`, `author`) values(<span class=\"string\">'3'</span>, <span class=\"string\">'2017-04-13'</span>, <span class=\"string\">'Somebody'</span>);</div><div class=\"line\">查找：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<h3 id=\"十-分组可选\"><a href=\"#十-分组可选\" class=\"headerlink\" title=\"十. 分组可选\"></a><a name=\"ten\">十. 分组可选</a></h3><ul>\n<li>分组可选</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：判断如果单词以A开头，匹配Apple；如果单词以B开头，匹配Banana；否则匹配<span class=\"keyword\">Empty</span></div><div class=\"line\">源串：</div><div class=\"line\">Angle</div><div class=\"line\">Apple</div><div class=\"line\">Banana</div><div class=\"line\">Best</div><div class=\"line\"><span class=\"keyword\">Empty</span></div><div class=\"line\">预期：匹配</div><div class=\"line\">Apple</div><div class=\"line\">Banana</div><div class=\"line\"><span class=\"keyword\">Empty</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<ul>\n<li>分组可选与分组引用</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配html标签的属性值，属性值可以由双引号、单引号、无单双引号定界</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div id=\"I'm Zjmainstay\" class=\"name\" data-year=2017 age='27'&gt;</div><div class=\"line\">预期：分组匹配</div><div class=\"line\">I<span class=\"string\">'m Zjmainstay</span></div><div class=\"line\"><span class=\"string\">author</span></div><div class=\"line\"><span class=\"string\">2017</span></div><div class=\"line\"><span class=\"string\">27</span></div><div class=\"line\"><span class=\"string\">正则：</span></div></pre></td></tr></table></figure>\n<h3 id=\"十一-单字符拆分（数字）\"><a href=\"#十一-单字符拆分（数字）\" class=\"headerlink\" title=\"十一. 单字符拆分（数字）\"></a><a name=\"eleven\">十一. 单字符拆分（数字）</a></h3><p>匹配0.00-100.00的数值，可以有0-2位小数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配<span class=\"number\">0.00</span><span class=\"number\">-100.00</span>的数值，可以有<span class=\"number\">0</span><span class=\"number\">-2</span>位小数，不能以小数点结尾，不能以<span class=\"number\">2</span>个以上的<span class=\"number\">0</span>开头</div><div class=\"line\">思路：(<span class=\"number\">100</span>|<span class=\"number\">10</span><span class=\"number\">-99</span>|<span class=\"number\">0</span><span class=\"number\">-9</span>) + <span class=\"number\">0</span><span class=\"number\">-2</span>小数位 + 排除小数点结尾、<span class=\"number\">2</span>个以上<span class=\"number\">0</span>开头的情况</div><div class=\"line\">源串：</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">0.0</span></div><div class=\"line\"><span class=\"number\">0.00</span></div><div class=\"line\"><span class=\"number\">9.00</span></div><div class=\"line\"><span class=\"number\">18.00</span></div><div class=\"line\"><span class=\"number\">27.0</span></div><div class=\"line\"><span class=\"number\">36.00</span></div><div class=\"line\"><span class=\"number\">45.00</span></div><div class=\"line\"><span class=\"number\">54.00</span></div><div class=\"line\"><span class=\"number\">63.00</span></div><div class=\"line\"><span class=\"number\">72.00</span></div><div class=\"line\"><span class=\"number\">81.00</span></div><div class=\"line\"><span class=\"number\">90.00</span></div><div class=\"line\"><span class=\"number\">99.99</span></div><div class=\"line\"><span class=\"number\">100.00</span></div><div class=\"line\"><span class=\"number\">0.</span></div><div class=\"line\"><span class=\"number\">001</span></div><div class=\"line\"><span class=\"number\">100.01</span></div><div class=\"line\"><span class=\"number\">100.001</span></div><div class=\"line\"><span class=\"number\">101</span></div><div class=\"line\">预期：匹配<span class=\"number\">0.00</span>~<span class=\"number\">100.00</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十二-贪婪模式\"><a href=\"#十二-贪婪模式\" class=\"headerlink\" title=\"十二. 贪婪模式\"></a><a name=\"twelve\">十二. 贪婪模式</a></h3><ul>\n<li>匹配链接中的文件名</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：利用贪婪模式，分组<span class=\"number\">1</span>得到每行链接中的文件名</div><div class=\"line\">源串：</div><div class=\"line\">http:<span class=\"comment\">//localhost.com/a/b/c/d/file1.txt</span></div><div class=\"line\">https:<span class=\"comment\">//localhost.com/a/b/file2long.jpg</span></div><div class=\"line\">预期：分组<span class=\"number\">0</span>匹配行数据，分组<span class=\"number\">1</span>匹配文件名</div><div class=\"line\">file1.txt</div><div class=\"line\">file2long.jpg</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<ul>\n<li>限定字符贪婪优化匹配性能</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配div id=<span class=\"string\">\"author\"</span>的标签内容</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div id=\"author\" class=\"author-text something-useless\"&gt;Zjmainstay&lt;/div&gt;</div><div class=\"line\">预期：利用贪婪模式去掉div中的噪点（无关数据），分组<span class=\"number\">1</span>匹配到Zjmainstay</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十三-非贪婪模式\"><a href=\"#十三-非贪婪模式\" class=\"headerlink\" title=\"十三. 非贪婪模式\"></a><a name=\"thirteen\">十三. 非贪婪模式</a></h3><blockquote>\n<p>贪婪模式，正则会优先尽可能少地匹配能匹配到的内容。当剩余正则匹配剩余部分字符（源串）但无法满足匹配时，非贪婪部分继续匹配更多内容，尝试满足剩余部分字符的匹配。</p>\n</blockquote>\n<p>匹配p标签内容</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配p标签内容</div><div class=\"line\">源串：</div><div class=\"line\">&lt;p&gt;内容<span class=\"number\">1</span>&lt;/p&gt;&lt;p&gt;内容<span class=\"number\">2</span>&lt;/p&gt;</div><div class=\"line\">预期：</div><div class=\"line\">在分组<span class=\"number\">1</span>中匹配到内容<span class=\"number\">1</span>和内容<span class=\"number\">2</span></div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十四-占用模式-PCRE\"><a href=\"#十四-占用模式-PCRE\" class=\"headerlink\" title=\"十四. 占用模式(PCRE)\"></a><a name=\"fourteen\">十四. 占用模式(PCRE)</a></h3><blockquote>\n<p>贪婪模式后再加一个+量词，如.++，效果是贪婪而且不回溯。<br> 暂时没有想到应用场景。</p>\n</blockquote>\n<h3 id=\"十五-字符分界（-的作用域）\"><a href=\"#十五-字符分界（-的作用域）\" class=\"headerlink\" title=\"十五. |字符分界（|的作用域）\"></a><a name=\"fiveteen\">十五. |字符分界（|的作用域）</a></h3><blockquote>\n<p>|作为或条件分隔符，它的分隔区间常常存在误用。在使用|字符的过程中，我们常常需要结合()来对它进行限定。如，^([0-9]+|[a-z]+)$表示纯数字或纯字母，如果没有()，那它又是另一种意思了。^[0-9]+|[a-z]+$等价于^[0-9]+或[a-z]+$，因此，它表示数字开头或者字母结尾，跟我们的需求有了很大的差别。</p>\n</blockquote>\n<p>|字符分界</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：在分组<span class=\"number\">1</span>中匹配css或script的链接</div><div class=\"line\">源串：</div><div class=\"line\">&lt;script src=<span class=\"string\">\"main.min.js\"</span> type=<span class=\"string\">\"text/javascript\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"main.css\"</span>&gt;</div><div class=\"line\">预期：</div><div class=\"line\">main.min.js</div><div class=\"line\">main.css</div><div class=\"line\">正则：</div></pre></td></tr></table></figure>\n<h3 id=\"十六-元字符转义\"><a href=\"#十六-元字符转义\" class=\"headerlink\" title=\"十六. 元字符转义\"></a><a name=\"sixteen\">十六. 元字符转义</a></h3><blockquote>\n<p>元字符，指正则中有特殊意义的字符，如.表示匹配除了换行符以外的任意字符，这个.就是元字符。在正则书写过程中，如果我们真的要匹配这个.，就需要对它进行转义，而不是让它使用正则的含义，比如，匹配域名里的.，我们就要写成/zjmainstay.cn/这样的正则。</p>\n</blockquote>\n<p>元字符转义</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：表达式格式固定，提取其中的数值</div><div class=\"line\">源串：</div><div class=\"line\">(<span class=\"number\">20</span>+<span class=\"number\">170</span>)<span class=\"number\">-5</span>*<span class=\"number\">1</span>/<span class=\"number\">5</span>=?</div><div class=\"line\">预期：</div><div class=\"line\">A:<span class=\"number\">20</span></div><div class=\"line\">B:<span class=\"number\">170</span></div><div class=\"line\">C:<span class=\"number\">5</span></div><div class=\"line\">D:<span class=\"number\">1</span></div><div class=\"line\">E:<span class=\"number\">5</span></div><div class=\"line\">F:?</div><div class=\"line\">正则：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<h3 id=\"十七-分隔符绕过（PCRE）\"><a href=\"#十七-分隔符绕过（PCRE）\" class=\"headerlink\" title=\"十七. 分隔符绕过（PCRE）\"></a><a name=\"seventeen\">十七. 分隔符绕过（PCRE）</a></h3><blockquote>\n<p>有时候，如果该语言支持多种分隔符，在写正则的过程中通常会通过规避分隔符的方式，减少对分隔符的转义，让正则看起来更清晰，写起来更舒服，当然，js中是不支持的。</p>\n</blockquote>\n<p>分隔符绕过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：在不对/转义的情况下匹配p标签内容</div><div class=\"line\">源串：</div><div class=\"line\">&lt;p&gt;内容<span class=\"number\">1</span>&lt;/p&gt;&lt;p&gt;内容<span class=\"number\">2</span>&lt;/p&gt;</div><div class=\"line\">预期：</div><div class=\"line\">在分组<span class=\"number\">1</span>中匹配到内容<span class=\"number\">1</span>和内容<span class=\"number\">2</span></div><div class=\"line\">正则：&lt;p&gt;([^&lt;]+)&lt;/p&gt;@m</div></pre></td></tr></table></figure>\n<h3 id=\"十八-匹配溢出排除\"><a href=\"#十八-匹配溢出排除\" class=\"headerlink\" title=\"十八. 匹配溢出排除\"></a><a name=\"eighteen\">十八. 匹配溢出排除</a></h3><blockquote>\n<p>匹配溢出，这不是一个术语名词，是我自己的叫法，主要指正则匹配内容超出了我们预期，导致匹配得到非预期的结果。</p>\n</blockquote>\n<ul>\n<li>div标签匹配溢出</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配内容为数字的div</div><div class=\"line\">源串：</div><div class=\"line\">&lt;div class=\"aaa bbb\"&gt;ABC&lt;/div&gt;&lt;div class=\"bbb ccc\"&gt;123&lt;/div&gt;</div><div class=\"line\">预期：</div><div class=\"line\">&lt;div&gt;<span class=\"number\">123</span>&lt;/div&gt;</div><div class=\"line\">错误正则：/&lt;div.*<span class=\"meta\">?&gt;</span>\\d+&lt;\\/div&gt;/</div><div class=\"line\">正则：/&lt;div[^&gt;]*&gt;\\d+&lt;\\/div&gt;/</div></pre></td></tr></table></figure>\n<ul>\n<li>多字符排除</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：匹配不包含某个单词或词语的内容</div><div class=\"line\">源串：</div><div class=\"line\">http:<span class=\"comment\">//www.zjmainstay.cn</span></div><div class=\"line\">http:<span class=\"comment\">//www.baidu.com</span></div><div class=\"line\">http:<span class=\"comment\">//www.qq.com</span></div><div class=\"line\">预期：</div><div class=\"line\">http:<span class=\"comment\">//www.zjmainstay.cn</span></div><div class=\"line\">http:<span class=\"comment\">//www.qq.com</span></div><div class=\"line\">正则：/http:\\/\\/www\\.[^baidu].*/m</div><div class=\"line\"></div><div class=\"line\">需求：匹配不包含某个单词或词语的内容</div><div class=\"line\">源串：</div><div class=\"line\">A(<span class=\"string\">\"Excalibur\"</span>, <span class=\"string\">\"誓约胜利之剑\"</span>, LONG_SWORD, (SPFX_NOGEN | SPFX_RESTR | SPFX_SEEK | SPFX_DEFN | SPFX_INTEL | SPFX_SEARCH), </div><div class=\"line\">  <span class=\"number\">0</span>, <span class=\"number\">0</span>, PHYS(<span class=\"number\">5</span>, <span class=\"number\">10</span>), DRLI(<span class=\"number\">0</span>, <span class=\"number\">0</span>), NO_CARY, <span class=\"number\">0</span>, A_LAWFUL, PM_KNIGHT, NON_PM, <span class=\"number\">4000</span>L, NO_COLOR);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Stormbringer only has a 2 because it can drain a level,</span></div><div class=\"line\"><span class=\"comment\"> * providing 8 more.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Stormbringer\"</span>, <span class=\"string\">\"兴风者\"</span>, RUNESWORD,</div><div class=\"line\">  (SPFX_RESTR | SPFX_ATTK | SPFX_DEFN | SPFX_INTEL | SPFX_DRLI), <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">  DRLI(<span class=\"number\">5</span>, <span class=\"number\">2</span>), DRLI(<span class=\"number\">0</span>, <span class=\"number\">0</span>), NO_CARY, <span class=\"number\">0</span>, A_CHAOTIC, NON_PM, NON_PM, <span class=\"number\">8000</span>L,</div><div class=\"line\">  NO_COLOR);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Mjollnir will return to the hand of the wielder when thrown</span></div><div class=\"line\"><span class=\"comment\"> * if the wielder is a Valkyrie wearing Gauntlets of Power.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Mjollnir\"</span>, <span class=\"string\">\"雷神之锤\"</span>, WAR_HAMMER, <span class=\"comment\">/* Mjo:llnir */</span></div><div class=\"line\">  (SPFX_RESTR | SPFX_ATTK), <span class=\"number\">0</span>, <span class=\"number\">0</span>, ELEC(<span class=\"number\">5</span>, <span class=\"number\">24</span>), NO_DFNS, NO_CARY, <span class=\"number\">0</span>,</div><div class=\"line\">  A_NEUTRAL, PM_VALKYRIE, NON_PM, <span class=\"number\">4000</span>L, NO_COLOR);</div><div class=\"line\">A(<span class=\"string\">\"Cleaver\"</span>, <span class=\"string\">\"撕裂者\"</span>, BATTLE_AXE, SPFX_RESTR, <span class=\"number\">0</span>, <span class=\"number\">0</span>, PHYS(<span class=\"number\">3</span>, <span class=\"number\">6</span>), NO_DFNS, NO_CARY, <span class=\"number\">0</span>, A_NEUTRAL, PM_BARBARIAN, NON_PM, <span class=\"number\">1500</span>L, NO_COLOR);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Grimtooth glows in warning when elves are present, but its</span></div><div class=\"line\"><span class=\"comment\"> * damage bonus applies to all targets rather than just elves</span></div><div class=\"line\"><span class=\"comment\"> * (handled as special case in spec_dbon()).</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Grimtooth\"</span>, <span class=\"string\">\"邪兽之牙\"</span>, ORCISH_DAGGER, (SPFX_RESTR | SPFX_WARN | SPFX_DFLAG2),</div><div class=\"line\">  <span class=\"number\">0</span>, M2_ELF, PHYS(<span class=\"number\">2</span>, <span class=\"number\">6</span>), NO_DFNS,</div><div class=\"line\">  NO_CARY, <span class=\"number\">0</span>, A_CHAOTIC, NON_PM, PM_ORC, <span class=\"number\">300</span>L, CLR_RED);</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\"> * Orcrist and Sting have same alignment as elves.</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * The combination of SPFX_WARN+SPFX_DFLAG2+M2_value will trigger</span></div><div class=\"line\"><span class=\"comment\"> * EWarn_of_mon for all monsters that have the M2_value flag.</span></div><div class=\"line\"><span class=\"comment\"> * Sting and Orcrist will warn of M2_ORC monsters.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\">A(<span class=\"string\">\"Orcrist\"</span>, <span class=\"string\">\"杀兽剑\"</span>, ELVEN_BROADSWORD, (SPFX_WARN | SPFX_DFLAG2), <span class=\"number\">0</span>, M2_ORC, PHYS(<span class=\"number\">5</span>, <span class=\"number\">0</span>), </div><div class=\"line\">  NO_DFNS, NO_CARY, <span class=\"number\">0</span>, A_CHAOTIC, NON_PM, PM_ELF, <span class=\"number\">2000</span>L, CLR_BRIGHT_BLUE); <span class=\"comment\">/* bright blue is actually light blue */</span></div><div class=\"line\">预期：</div><div class=\"line\">Excalibur=誓约胜利之剑</div><div class=\"line\">Stormbringer=兴风者</div><div class=\"line\">Mjollnir=雷神之锤</div><div class=\"line\">Cleaver=撕裂者</div><div class=\"line\">Grimtooth=邪兽之牙</div><div class=\"line\">Orcrist=杀兽剑</div><div class=\"line\">查找：</div><div class=\"line\">替换：</div></pre></td></tr></table></figure>\n<h3 id=\"十九-环视循环提取格式化\"><a href=\"#十九-环视循环提取格式化\" class=\"headerlink\" title=\"十九. 环视循环提取格式化\"></a><a name=\"nineteen\">十九. 环视循环提取格式化</a></h3><blockquote>\n<p>在数据处理过程中，经常遇到一些格式化处理，比如简单地将一批数据格式化为SQL（参考9.2），还有复杂的需要对一行数据的某部分进行循环提取，然后格式化为特定格式。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">需求：循环提取每行数据的分支部分和固定部分，格式化为特定格式</div><div class=\"line\">源串：</div><div class=\"line\">BBB|CCC|DDD=AAA</div><div class=\"line\">FFF|GGG|HHH|III|JJJ|KKK=EEE</div><div class=\"line\">预期：</div><div class=\"line\">BBB=AAA</div><div class=\"line\">CCC=AAA</div><div class=\"line\">DDD=AAA</div><div class=\"line\">FFF=EEE</div><div class=\"line\">GGG=EEE</div><div class=\"line\">HHH=EEE</div><div class=\"line\">III=EEE</div><div class=\"line\">JJJ=EEE</div><div class=\"line\">KKK=EEE</div><div class=\"line\">查找：\\|(?=.*(=.*))</div><div class=\"line\">替换：$<span class=\"number\">1</span>\\n</div></pre></td></tr></table></figure>\n<h3 id=\"二十-三段论应用\"><a href=\"#二十-三段论应用\" class=\"headerlink\" title=\"二十. 三段论应用\"></a><a name=\"twenty\">二十. 三段论应用</a></h3><blockquote>\n<p>三段论:定锚点，去噪点，取数据。<br> <strong>锚点</strong>，在正则中指^、$、\\b这类零宽的位置，这里做了衍生，指能够唯一确定我们目标数据位置的参照点，比如author=lalala，我们要匹配author属性的数据，则author=就是我们的参照点，通过它，我们能快速写出提取author属性的数据的正则：author=(.+)。<br> <strong>噪点</strong>，就是对我们提取数据产生干扰的无关数据，我们在做正则匹配提取数据的过程中，可以选择性的忽略它们。当然，这里的忽略不是指不需要对它们做匹配，而是不需要对它们做精确匹配。<br> <strong>数据</strong>，这个当然是指我们需要提取的内容了，如上面锚点举例，我们通过author=(.+)的(.+)对lalala部分数据进行了提取，因此，匹配结果的分组1（程序语言中的数组下标1）中，就能得到我们的结果。而对于多个数据的提取，如噪点举例，我们只需要针对数据部分进行多个分组（括号）的提取即可。<br> 分组的计数，一般可以数左括号，排除环视和非捕获组的左括号，从1开始，依次加1递增，1,2,3,4….n，不同语言最大分组个数不同，大家在使用过程中自行留意，不过一般用不了那么多分组。<br> 理解了三段论的概念，我们在写正则的过程中，只需要将源串进行分割划分，根据目标数据确定锚点，过滤噪点，提取数据，就能得到我们想要的正则了。</p>\n</blockquote>\n"},{"title":"正则表达式的匹配原理","date":"2017-09-17T05:44:41.000Z","_content":">之所以会了解匹配原理，是因为之前也听过正则的引擎分为很多种，也听过NFA,DFA,但是究其根本还是模棱两可，因此仔细阅读《精通正则表达式》的第四章，对其关键点进行整理。\n\n* [一、正则引擎的分类](#one)\n* [二、匹配的基础](#two)\n* [三、DFA,NFA](#three)\n* [四、回溯](#four)\n* [五、总结](#five)\n\n\n### <a name=\"one\">一、正则引擎的分类</a>\n\n部分程序及其所使用的引擎\n![创建应用][id]\n     \n[id]: /img/regex.png \"正则引擎的分类\"\n\n### <a name=\"two\">二、匹配的基础</a>\n\n### <a name=\"three\">三、DFA,NFA</a>\n\nDFA:文本主导，速度快，最长的左子正则式优先匹配成功\nNFA:表达式主导，支持忽略优先量词，捕获型括号，回溯，最左子正则式优先匹配成功\n\n### <a name=\"four\">四、回溯</a>\n\n### <a name=\"five\">五、总结</a>","source":"_posts/regex3.md","raw":"---\ntitle: 正则表达式的匹配原理\ndate: 2017-09-17 13:44:41\ntags: 正则表达式\ncategories: 正则表达式\n\n---\n>之所以会了解匹配原理，是因为之前也听过正则的引擎分为很多种，也听过NFA,DFA,但是究其根本还是模棱两可，因此仔细阅读《精通正则表达式》的第四章，对其关键点进行整理。\n\n* [一、正则引擎的分类](#one)\n* [二、匹配的基础](#two)\n* [三、DFA,NFA](#three)\n* [四、回溯](#four)\n* [五、总结](#five)\n\n\n### <a name=\"one\">一、正则引擎的分类</a>\n\n部分程序及其所使用的引擎\n![创建应用][id]\n     \n[id]: /img/regex.png \"正则引擎的分类\"\n\n### <a name=\"two\">二、匹配的基础</a>\n\n### <a name=\"three\">三、DFA,NFA</a>\n\nDFA:文本主导，速度快，最长的左子正则式优先匹配成功\nNFA:表达式主导，支持忽略优先量词，捕获型括号，回溯，最左子正则式优先匹配成功\n\n### <a name=\"four\">四、回溯</a>\n\n### <a name=\"five\">五、总结</a>","slug":"regex3","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08u000w8a9ka2v8qqnk","content":"<blockquote>\n<p>之所以会了解匹配原理，是因为之前也听过正则的引擎分为很多种，也听过NFA,DFA,但是究其根本还是模棱两可，因此仔细阅读《精通正则表达式》的第四章，对其关键点进行整理。</p>\n</blockquote>\n<ul>\n<li><a href=\"#one\">一、正则引擎的分类</a></li>\n<li><a href=\"#two\">二、匹配的基础</a></li>\n<li><a href=\"#three\">三、DFA,NFA</a></li>\n<li><a href=\"#four\">四、回溯</a></li>\n<li><a href=\"#five\">五、总结</a></li>\n</ul>\n<h3 id=\"一、正则引擎的分类\"><a href=\"#一、正则引擎的分类\" class=\"headerlink\" title=\"一、正则引擎的分类\"></a><a name=\"one\">一、正则引擎的分类</a></h3><p>部分程序及其所使用的引擎<br><img src=\"/img/regex.png\" alt=\"创建应用\" title=\"正则引擎的分类\"></p>\n<h3 id=\"二、匹配的基础\"><a href=\"#二、匹配的基础\" class=\"headerlink\" title=\"二、匹配的基础\"></a><a name=\"two\">二、匹配的基础</a></h3><h3 id=\"三、DFA-NFA\"><a href=\"#三、DFA-NFA\" class=\"headerlink\" title=\"三、DFA,NFA\"></a><a name=\"three\">三、DFA,NFA</a></h3><p>DFA:文本主导，速度快，最长的左子正则式优先匹配成功<br>NFA:表达式主导，支持忽略优先量词，捕获型括号，回溯，最左子正则式优先匹配成功</p>\n<h3 id=\"四、回溯\"><a href=\"#四、回溯\" class=\"headerlink\" title=\"四、回溯\"></a><a name=\"four\">四、回溯</a></h3><h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a><a name=\"five\">五、总结</a></h3>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>之所以会了解匹配原理，是因为之前也听过正则的引擎分为很多种，也听过NFA,DFA,但是究其根本还是模棱两可，因此仔细阅读《精通正则表达式》的第四章，对其关键点进行整理。</p>\n</blockquote>\n<ul>\n<li><a href=\"#one\">一、正则引擎的分类</a></li>\n<li><a href=\"#two\">二、匹配的基础</a></li>\n<li><a href=\"#three\">三、DFA,NFA</a></li>\n<li><a href=\"#four\">四、回溯</a></li>\n<li><a href=\"#five\">五、总结</a></li>\n</ul>\n<h3 id=\"一、正则引擎的分类\"><a href=\"#一、正则引擎的分类\" class=\"headerlink\" title=\"一、正则引擎的分类\"></a><a name=\"one\">一、正则引擎的分类</a></h3><p>部分程序及其所使用的引擎<br><img src=\"/img/regex.png\" alt=\"创建应用\" title=\"正则引擎的分类\"></p>\n<h3 id=\"二、匹配的基础\"><a href=\"#二、匹配的基础\" class=\"headerlink\" title=\"二、匹配的基础\"></a><a name=\"two\">二、匹配的基础</a></h3><h3 id=\"三、DFA-NFA\"><a href=\"#三、DFA-NFA\" class=\"headerlink\" title=\"三、DFA,NFA\"></a><a name=\"three\">三、DFA,NFA</a></h3><p>DFA:文本主导，速度快，最长的左子正则式优先匹配成功<br>NFA:表达式主导，支持忽略优先量词，捕获型括号，回溯，最左子正则式优先匹配成功</p>\n<h3 id=\"四、回溯\"><a href=\"#四、回溯\" class=\"headerlink\" title=\"四、回溯\"></a><a name=\"four\">四、回溯</a></h3><h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a><a name=\"five\">五、总结</a></h3>"},{"title":"正则表达式高级应用","date":"2017-09-18T02:34:54.000Z","_content":"### 一、环视（断言、零宽断言）\n>以下内容参考《精通正则表达式》和[Zjmainstay学习笔记](http://www.zjmainstay.cn/my-regexp) 相关教程\n>环视，在不同的地方又称之为零宽断言，简称断言。 \n 环视强调的是它所在的**位置**，前面或者后面，必须满足环视表达式中的匹配情况，才能匹配成功。 \n 环视可以认为是虚拟加入到它所在位置的附加判断条件，并不消耗正则的匹配字符。\n 环视部分是不占宽度的，所以有零宽断言的叫法，所谓不占宽度就是：环视的匹配结果不纳入数据结果，环视它匹配过的地方，下次还能用它继续匹配\n 用一句通俗的话解释： \n 环视，就是先从全局环顾一遍正则，（然后断定结果，）再做进一步匹配处理。 \n 断言，就是先从全局环顾一遍正则，然后断定结果，再做进一步匹配处理。\n \n#### 1.环视的类型\n* 肯定顺序(?=exp) 匹配后面是exp的数据  a(?=b) 匹配后面是b的数据，即ab匹配，ac不匹配 ，匹配出来的结果是a\n* 否定顺序(?!=exp) 匹配后面不是exp的数据 a(?!=b) 匹配后面不是b的数据，即ab不匹配，ac,ad,ae 等可以匹配，匹配出来的结果是a\n* 肯定逆序(?<=exp) 匹配前面是exp的数据 (?<b)a 匹配前面是b的数据，即ba匹配，ca不匹配，匹配出来的结果是a\n* 否定逆序(?<!exp) 匹配前面不是exp的数据 (?<!b)a 匹配前面不是b的数据，即ba不匹配，ca,da 等可以匹配，匹配出来的结果是a\n**以上四个例子匹配出来的结果都是a,是因为环视强调的是它所在的位置，环视的匹配结果是不纳入数据结果的**\n\n#### 2.简单环视过程\n例如，对于源字符串ABC，正则(?=A)[A-Z]匹配的是:\n1). (?=A)所在的位置，后面必须是A,下图红色虚线位置所示\n2). 表达式[A-Z]匹配A-Z中任意一个字母 \n根据两个的先后位置关系，组合在一起，那就是： \n(?=A)所在的位置，后面是A，而且是A-Z中任意一个字母，因此，上面正则表达式匹配一个大写字母A。\n从例子可以看出，从左到右，正则分别匹配了环视(?=A)和[A-Z]，由于环视不消耗正则的匹配字符，因此，[A-Z]还能对A进行匹配，并得到结果。\n\n![创建应用][id]\n[id]: /img/regex2.png \"简单环视\"\n\n#### 3.什么是消耗正则的匹配字符？\n>文章开头提到正则的环视是不消耗正则的匹配字符，那么什么是消耗正则的匹配字符呢?\n 正则是按单个字符匹配的，从左到右逐个匹配源字符串中的内容。\n \n **1).一次匹配消耗匹配字符匹配过程**\n \n a. 正则A：因为没有位置限定，因此是从源字符串开始位置开始，也就是正则里的^，这个^是虚拟字符，表示匹配字符串开始位置，也就是源字符串ABCAD里的A前面的位置，因为正则A能够匹配源字符串A，匹配成功，匹配位置从源字符串^的位置后移一位，到达A后面，即此时源字符串ABCAD的A这个字符已经被消耗，接下来的正则匹配从A后面开始。 \n \n b. 正则[A-Z]：当前匹配位置为第一个A字母后面位置，正则[A-Z]对源字符串ABCAD里的B字母进行匹配，匹配成功，位置后移到B字母后面的位置。至此，由于正则已经匹配完成，因此，正则A[A-Z]匹配结果是AB。\n \n 我们知道，有些语言支持g模式修饰符，也就是全局匹配，那么，上面例子中，正则匹配1次成功之后，将会从匹配成功位置（B字母后面位置）开始，再从头进行匹配一次正则，直到源字符串全部消耗完为止。\n \n **2).多次匹配消耗匹配字符匹配过程**\n \n 因此，全局匹配的过程补充如下： \n c. 正则A：当前匹配位置为B字母后面位置，正则A去匹配源字符串中的C，匹配失败，匹配位置后移一位，此时C被消耗了。 \n \n d. 正则A：当前匹配位置为C字母后面位置，正则A去匹配源字符串中的第二个A字母，匹配成功，匹配位置后移一位，此时A被消耗了。 \n \n e. 正则[A-Z]：当前匹配位置为第二个A字母后面位置，正则[A-Z]对源字符串ABCAD里的D字母进行匹配，匹配成功，位置后移到D字母后面的位置，此时D被消耗了。\n\n f. 由于正则里还有个源字符串结束位置，也就是正则里的$，这个$也是虚拟字符，因此，还要继续进行匹配： \n 正则A：当前匹配位置为D字母后面的位置，正则A去匹配源字符串的结束位置，匹配失败，匹配结束。\n \n 最终匹配结果是AB和AD。\n \n **3).不消耗匹配字符**\n \n 需求：字母、数字组合，不区分大小写，不能纯数字或者纯字母，6-16个字符。\n 通用正则：^[a-z0-9]{6,16}$    字母数字组合，6-16个字符\n 排除纯字母：(?!^[a-z]+$)\n 排除纯数字：(?!^[0-9]+$)\n 组合起来：(?!^[a-z]+$)(?!^[0-9]+$)^[a-z0-9]{6,16}$\n \n","source":"_posts/regex4.md","raw":"---\ntitle: 正则表达式高级应用\ndate: 2017-09-18 10:34:54\ntags: 正则表达式\ncategories: 正则表达式\n\n---\n### 一、环视（断言、零宽断言）\n>以下内容参考《精通正则表达式》和[Zjmainstay学习笔记](http://www.zjmainstay.cn/my-regexp) 相关教程\n>环视，在不同的地方又称之为零宽断言，简称断言。 \n 环视强调的是它所在的**位置**，前面或者后面，必须满足环视表达式中的匹配情况，才能匹配成功。 \n 环视可以认为是虚拟加入到它所在位置的附加判断条件，并不消耗正则的匹配字符。\n 环视部分是不占宽度的，所以有零宽断言的叫法，所谓不占宽度就是：环视的匹配结果不纳入数据结果，环视它匹配过的地方，下次还能用它继续匹配\n 用一句通俗的话解释： \n 环视，就是先从全局环顾一遍正则，（然后断定结果，）再做进一步匹配处理。 \n 断言，就是先从全局环顾一遍正则，然后断定结果，再做进一步匹配处理。\n \n#### 1.环视的类型\n* 肯定顺序(?=exp) 匹配后面是exp的数据  a(?=b) 匹配后面是b的数据，即ab匹配，ac不匹配 ，匹配出来的结果是a\n* 否定顺序(?!=exp) 匹配后面不是exp的数据 a(?!=b) 匹配后面不是b的数据，即ab不匹配，ac,ad,ae 等可以匹配，匹配出来的结果是a\n* 肯定逆序(?<=exp) 匹配前面是exp的数据 (?<b)a 匹配前面是b的数据，即ba匹配，ca不匹配，匹配出来的结果是a\n* 否定逆序(?<!exp) 匹配前面不是exp的数据 (?<!b)a 匹配前面不是b的数据，即ba不匹配，ca,da 等可以匹配，匹配出来的结果是a\n**以上四个例子匹配出来的结果都是a,是因为环视强调的是它所在的位置，环视的匹配结果是不纳入数据结果的**\n\n#### 2.简单环视过程\n例如，对于源字符串ABC，正则(?=A)[A-Z]匹配的是:\n1). (?=A)所在的位置，后面必须是A,下图红色虚线位置所示\n2). 表达式[A-Z]匹配A-Z中任意一个字母 \n根据两个的先后位置关系，组合在一起，那就是： \n(?=A)所在的位置，后面是A，而且是A-Z中任意一个字母，因此，上面正则表达式匹配一个大写字母A。\n从例子可以看出，从左到右，正则分别匹配了环视(?=A)和[A-Z]，由于环视不消耗正则的匹配字符，因此，[A-Z]还能对A进行匹配，并得到结果。\n\n![创建应用][id]\n[id]: /img/regex2.png \"简单环视\"\n\n#### 3.什么是消耗正则的匹配字符？\n>文章开头提到正则的环视是不消耗正则的匹配字符，那么什么是消耗正则的匹配字符呢?\n 正则是按单个字符匹配的，从左到右逐个匹配源字符串中的内容。\n \n **1).一次匹配消耗匹配字符匹配过程**\n \n a. 正则A：因为没有位置限定，因此是从源字符串开始位置开始，也就是正则里的^，这个^是虚拟字符，表示匹配字符串开始位置，也就是源字符串ABCAD里的A前面的位置，因为正则A能够匹配源字符串A，匹配成功，匹配位置从源字符串^的位置后移一位，到达A后面，即此时源字符串ABCAD的A这个字符已经被消耗，接下来的正则匹配从A后面开始。 \n \n b. 正则[A-Z]：当前匹配位置为第一个A字母后面位置，正则[A-Z]对源字符串ABCAD里的B字母进行匹配，匹配成功，位置后移到B字母后面的位置。至此，由于正则已经匹配完成，因此，正则A[A-Z]匹配结果是AB。\n \n 我们知道，有些语言支持g模式修饰符，也就是全局匹配，那么，上面例子中，正则匹配1次成功之后，将会从匹配成功位置（B字母后面位置）开始，再从头进行匹配一次正则，直到源字符串全部消耗完为止。\n \n **2).多次匹配消耗匹配字符匹配过程**\n \n 因此，全局匹配的过程补充如下： \n c. 正则A：当前匹配位置为B字母后面位置，正则A去匹配源字符串中的C，匹配失败，匹配位置后移一位，此时C被消耗了。 \n \n d. 正则A：当前匹配位置为C字母后面位置，正则A去匹配源字符串中的第二个A字母，匹配成功，匹配位置后移一位，此时A被消耗了。 \n \n e. 正则[A-Z]：当前匹配位置为第二个A字母后面位置，正则[A-Z]对源字符串ABCAD里的D字母进行匹配，匹配成功，位置后移到D字母后面的位置，此时D被消耗了。\n\n f. 由于正则里还有个源字符串结束位置，也就是正则里的$，这个$也是虚拟字符，因此，还要继续进行匹配： \n 正则A：当前匹配位置为D字母后面的位置，正则A去匹配源字符串的结束位置，匹配失败，匹配结束。\n \n 最终匹配结果是AB和AD。\n \n **3).不消耗匹配字符**\n \n 需求：字母、数字组合，不区分大小写，不能纯数字或者纯字母，6-16个字符。\n 通用正则：^[a-z0-9]{6,16}$    字母数字组合，6-16个字符\n 排除纯字母：(?!^[a-z]+$)\n 排除纯数字：(?!^[0-9]+$)\n 组合起来：(?!^[a-z]+$)(?!^[0-9]+$)^[a-z0-9]{6,16}$\n \n","slug":"regex4","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08v00108a9kkmfcnoxf","content":"<h3 id=\"一、环视（断言、零宽断言）\"><a href=\"#一、环视（断言、零宽断言）\" class=\"headerlink\" title=\"一、环视（断言、零宽断言）\"></a>一、环视（断言、零宽断言）</h3><blockquote>\n<p>以下内容参考《精通正则表达式》和<a href=\"http://www.zjmainstay.cn/my-regexp\" target=\"_blank\" rel=\"external\">Zjmainstay学习笔记</a> 相关教程<br>环视，在不同的地方又称之为零宽断言，简称断言。<br> 环视强调的是它所在的<strong>位置</strong>，前面或者后面，必须满足环视表达式中的匹配情况，才能匹配成功。<br> 环视可以认为是虚拟加入到它所在位置的附加判断条件，并不消耗正则的匹配字符。<br> 环视部分是不占宽度的，所以有零宽断言的叫法，所谓不占宽度就是：环视的匹配结果不纳入数据结果，环视它匹配过的地方，下次还能用它继续匹配<br> 用一句通俗的话解释：<br> 环视，就是先从全局环顾一遍正则，（然后断定结果，）再做进一步匹配处理。<br> 断言，就是先从全局环顾一遍正则，然后断定结果，再做进一步匹配处理。</p>\n</blockquote>\n<h4 id=\"1-环视的类型\"><a href=\"#1-环视的类型\" class=\"headerlink\" title=\"1.环视的类型\"></a>1.环视的类型</h4><ul>\n<li>肯定顺序(?=exp) 匹配后面是exp的数据  a(?=b) 匹配后面是b的数据，即ab匹配，ac不匹配 ，匹配出来的结果是a</li>\n<li>否定顺序(?!=exp) 匹配后面不是exp的数据 a(?!=b) 匹配后面不是b的数据，即ab不匹配，ac,ad,ae 等可以匹配，匹配出来的结果是a</li>\n<li>肯定逆序(?&lt;=exp) 匹配前面是exp的数据 (?&lt;b)a 匹配前面是b的数据，即ba匹配，ca不匹配，匹配出来的结果是a</li>\n<li>否定逆序(?&lt;!exp) 匹配前面不是exp的数据 (?&lt;!b)a 匹配前面不是b的数据，即ba不匹配，ca,da 等可以匹配，匹配出来的结果是a<br><strong>以上四个例子匹配出来的结果都是a,是因为环视强调的是它所在的位置，环视的匹配结果是不纳入数据结果的</strong></li>\n</ul>\n<h4 id=\"2-简单环视过程\"><a href=\"#2-简单环视过程\" class=\"headerlink\" title=\"2.简单环视过程\"></a>2.简单环视过程</h4><p>例如，对于源字符串ABC，正则(?=A)[A-Z]匹配的是:<br>1). (?=A)所在的位置，后面必须是A,下图红色虚线位置所示<br>2). 表达式[A-Z]匹配A-Z中任意一个字母<br>根据两个的先后位置关系，组合在一起，那就是：<br>(?=A)所在的位置，后面是A，而且是A-Z中任意一个字母，因此，上面正则表达式匹配一个大写字母A。<br>从例子可以看出，从左到右，正则分别匹配了环视(?=A)和[A-Z]，由于环视不消耗正则的匹配字符，因此，[A-Z]还能对A进行匹配，并得到结果。</p>\n<p><img src=\"/img/regex2.png\" alt=\"创建应用\" title=\"简单环视\"></p>\n<h4 id=\"3-什么是消耗正则的匹配字符？\"><a href=\"#3-什么是消耗正则的匹配字符？\" class=\"headerlink\" title=\"3.什么是消耗正则的匹配字符？\"></a>3.什么是消耗正则的匹配字符？</h4><blockquote>\n<p>文章开头提到正则的环视是不消耗正则的匹配字符，那么什么是消耗正则的匹配字符呢?<br> 正则是按单个字符匹配的，从左到右逐个匹配源字符串中的内容。</p>\n</blockquote>\n<p> <strong>1).一次匹配消耗匹配字符匹配过程</strong></p>\n<p> a. 正则A：因为没有位置限定，因此是从源字符串开始位置开始，也就是正则里的^，这个^是虚拟字符，表示匹配字符串开始位置，也就是源字符串ABCAD里的A前面的位置，因为正则A能够匹配源字符串A，匹配成功，匹配位置从源字符串^的位置后移一位，到达A后面，即此时源字符串ABCAD的A这个字符已经被消耗，接下来的正则匹配从A后面开始。 </p>\n<p> b. 正则[A-Z]：当前匹配位置为第一个A字母后面位置，正则[A-Z]对源字符串ABCAD里的B字母进行匹配，匹配成功，位置后移到B字母后面的位置。至此，由于正则已经匹配完成，因此，正则A[A-Z]匹配结果是AB。</p>\n<p> 我们知道，有些语言支持g模式修饰符，也就是全局匹配，那么，上面例子中，正则匹配1次成功之后，将会从匹配成功位置（B字母后面位置）开始，再从头进行匹配一次正则，直到源字符串全部消耗完为止。</p>\n<p> <strong>2).多次匹配消耗匹配字符匹配过程</strong></p>\n<p> 因此，全局匹配的过程补充如下：<br> c. 正则A：当前匹配位置为B字母后面位置，正则A去匹配源字符串中的C，匹配失败，匹配位置后移一位，此时C被消耗了。 </p>\n<p> d. 正则A：当前匹配位置为C字母后面位置，正则A去匹配源字符串中的第二个A字母，匹配成功，匹配位置后移一位，此时A被消耗了。 </p>\n<p> e. 正则[A-Z]：当前匹配位置为第二个A字母后面位置，正则[A-Z]对源字符串ABCAD里的D字母进行匹配，匹配成功，位置后移到D字母后面的位置，此时D被消耗了。</p>\n<p> f. 由于正则里还有个源字符串结束位置，也就是正则里的$，这个$也是虚拟字符，因此，还要继续进行匹配：<br> 正则A：当前匹配位置为D字母后面的位置，正则A去匹配源字符串的结束位置，匹配失败，匹配结束。</p>\n<p> 最终匹配结果是AB和AD。</p>\n<p> <strong>3).不消耗匹配字符</strong></p>\n<p> 需求：字母、数字组合，不区分大小写，不能纯数字或者纯字母，6-16个字符。<br> 通用正则：^[a-z0-9]{6,16}$    字母数字组合，6-16个字符<br> 排除纯字母：(?!^[a-z]+$)<br> 排除纯数字：(?!^[0-9]+$)<br> 组合起来：(?!^[a-z]+$)(?!^[0-9]+$)^[a-z0-9]{6,16}$</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、环视（断言、零宽断言）\"><a href=\"#一、环视（断言、零宽断言）\" class=\"headerlink\" title=\"一、环视（断言、零宽断言）\"></a>一、环视（断言、零宽断言）</h3><blockquote>\n<p>以下内容参考《精通正则表达式》和<a href=\"http://www.zjmainstay.cn/my-regexp\" target=\"_blank\" rel=\"external\">Zjmainstay学习笔记</a> 相关教程<br>环视，在不同的地方又称之为零宽断言，简称断言。<br> 环视强调的是它所在的<strong>位置</strong>，前面或者后面，必须满足环视表达式中的匹配情况，才能匹配成功。<br> 环视可以认为是虚拟加入到它所在位置的附加判断条件，并不消耗正则的匹配字符。<br> 环视部分是不占宽度的，所以有零宽断言的叫法，所谓不占宽度就是：环视的匹配结果不纳入数据结果，环视它匹配过的地方，下次还能用它继续匹配<br> 用一句通俗的话解释：<br> 环视，就是先从全局环顾一遍正则，（然后断定结果，）再做进一步匹配处理。<br> 断言，就是先从全局环顾一遍正则，然后断定结果，再做进一步匹配处理。</p>\n</blockquote>\n<h4 id=\"1-环视的类型\"><a href=\"#1-环视的类型\" class=\"headerlink\" title=\"1.环视的类型\"></a>1.环视的类型</h4><ul>\n<li>肯定顺序(?=exp) 匹配后面是exp的数据  a(?=b) 匹配后面是b的数据，即ab匹配，ac不匹配 ，匹配出来的结果是a</li>\n<li>否定顺序(?!=exp) 匹配后面不是exp的数据 a(?!=b) 匹配后面不是b的数据，即ab不匹配，ac,ad,ae 等可以匹配，匹配出来的结果是a</li>\n<li>肯定逆序(?&lt;=exp) 匹配前面是exp的数据 (?&lt;b)a 匹配前面是b的数据，即ba匹配，ca不匹配，匹配出来的结果是a</li>\n<li>否定逆序(?&lt;!exp) 匹配前面不是exp的数据 (?&lt;!b)a 匹配前面不是b的数据，即ba不匹配，ca,da 等可以匹配，匹配出来的结果是a<br><strong>以上四个例子匹配出来的结果都是a,是因为环视强调的是它所在的位置，环视的匹配结果是不纳入数据结果的</strong></li>\n</ul>\n<h4 id=\"2-简单环视过程\"><a href=\"#2-简单环视过程\" class=\"headerlink\" title=\"2.简单环视过程\"></a>2.简单环视过程</h4><p>例如，对于源字符串ABC，正则(?=A)[A-Z]匹配的是:<br>1). (?=A)所在的位置，后面必须是A,下图红色虚线位置所示<br>2). 表达式[A-Z]匹配A-Z中任意一个字母<br>根据两个的先后位置关系，组合在一起，那就是：<br>(?=A)所在的位置，后面是A，而且是A-Z中任意一个字母，因此，上面正则表达式匹配一个大写字母A。<br>从例子可以看出，从左到右，正则分别匹配了环视(?=A)和[A-Z]，由于环视不消耗正则的匹配字符，因此，[A-Z]还能对A进行匹配，并得到结果。</p>\n<p><img src=\"/img/regex2.png\" alt=\"创建应用\" title=\"简单环视\"></p>\n<h4 id=\"3-什么是消耗正则的匹配字符？\"><a href=\"#3-什么是消耗正则的匹配字符？\" class=\"headerlink\" title=\"3.什么是消耗正则的匹配字符？\"></a>3.什么是消耗正则的匹配字符？</h4><blockquote>\n<p>文章开头提到正则的环视是不消耗正则的匹配字符，那么什么是消耗正则的匹配字符呢?<br> 正则是按单个字符匹配的，从左到右逐个匹配源字符串中的内容。</p>\n</blockquote>\n<p> <strong>1).一次匹配消耗匹配字符匹配过程</strong></p>\n<p> a. 正则A：因为没有位置限定，因此是从源字符串开始位置开始，也就是正则里的^，这个^是虚拟字符，表示匹配字符串开始位置，也就是源字符串ABCAD里的A前面的位置，因为正则A能够匹配源字符串A，匹配成功，匹配位置从源字符串^的位置后移一位，到达A后面，即此时源字符串ABCAD的A这个字符已经被消耗，接下来的正则匹配从A后面开始。 </p>\n<p> b. 正则[A-Z]：当前匹配位置为第一个A字母后面位置，正则[A-Z]对源字符串ABCAD里的B字母进行匹配，匹配成功，位置后移到B字母后面的位置。至此，由于正则已经匹配完成，因此，正则A[A-Z]匹配结果是AB。</p>\n<p> 我们知道，有些语言支持g模式修饰符，也就是全局匹配，那么，上面例子中，正则匹配1次成功之后，将会从匹配成功位置（B字母后面位置）开始，再从头进行匹配一次正则，直到源字符串全部消耗完为止。</p>\n<p> <strong>2).多次匹配消耗匹配字符匹配过程</strong></p>\n<p> 因此，全局匹配的过程补充如下：<br> c. 正则A：当前匹配位置为B字母后面位置，正则A去匹配源字符串中的C，匹配失败，匹配位置后移一位，此时C被消耗了。 </p>\n<p> d. 正则A：当前匹配位置为C字母后面位置，正则A去匹配源字符串中的第二个A字母，匹配成功，匹配位置后移一位，此时A被消耗了。 </p>\n<p> e. 正则[A-Z]：当前匹配位置为第二个A字母后面位置，正则[A-Z]对源字符串ABCAD里的D字母进行匹配，匹配成功，位置后移到D字母后面的位置，此时D被消耗了。</p>\n<p> f. 由于正则里还有个源字符串结束位置，也就是正则里的$，这个$也是虚拟字符，因此，还要继续进行匹配：<br> 正则A：当前匹配位置为D字母后面的位置，正则A去匹配源字符串的结束位置，匹配失败，匹配结束。</p>\n<p> 最终匹配结果是AB和AD。</p>\n<p> <strong>3).不消耗匹配字符</strong></p>\n<p> 需求：字母、数字组合，不区分大小写，不能纯数字或者纯字母，6-16个字符。<br> 通用正则：^[a-z0-9]{6,16}$    字母数字组合，6-16个字符<br> 排除纯字母：(?!^[a-z]+$)<br> 排除纯数字：(?!^[0-9]+$)<br> 组合起来：(?!^[a-z]+$)(?!^[0-9]+$)^[a-z0-9]{6,16}$</p>\n"},{"title":"PHP中的正则","date":"2017-09-19T06:26:49.000Z","_content":"### 一、PHP的特性和流派\n详细内容见：http://lyj1215.com/2017/09/12/regex1/\n\n**字符缩略表示法**\n\n* \\a警报,\\b退格（在字符组内部支持，外部是单词分界符）,\\eEscape字符,\\f进制符,\\n,\\r,\\t,\n\n**字符组及相关结构**\n\n* 字符组[...][^...]\n* 几乎任何字符 点号\n* 字符组缩略表示法 \\w,\\d,\\s,\\W,\\D,\\S\n* Unicode混合序列\\X ,只能与模式修饰符u连用\n* Unicode属性和区块\\p{Prop},\\P{Prop} ，可用于字符组内部，只能与模式修饰符u连用\n\n**锚点及其他零长度断言**\n\n*  **行/字符串起始位置** ^ \\A   正常情况：^匹配字符串起始位置;增强型行锚点模式：^还可以匹配任何换行符之后的位置，\\A总是和^一样\n* **行字符串结束位置** $ \\Z \\z 正常情况：$匹配字符串的结束位置，匹配字符串结尾的换行符；增强型行锚点模式：$匹配字符串的末尾，匹配**任何**换行符之前的位置。\\Z 总是和普通的$一样，\\z总是匹配字符串的末尾。\n* **当前匹配的起始位置**  \\G\n* **单词分界符** \\b \\B\n* **环视结构** (?=exp) (?!exp) (?<=exp) (?<!exp)  详细信息见：http://lyj1215.com/2017/09/12/regex4/\n\n**注释及模式修饰符**\n\n*  **表达式内部模式修饰符** (?i),允许出现的有 i,m,s ,x,U,X  ,\n*  **模式修饰范围**（?i:）\n*  **注释** (?#...),只在模式修饰符x下有效\n\n**分组及捕获**\n\n* **捕获型括号**(...)  反向引用 \\1 \\2\n* **命名捕获** (?\\<name\\>) 或者(?'name')     反向引用 \\k\\<name\\>或者 \\k 'name'\n* **非捕获型** (?:exp)\n* **让多个子组可以共用一个后向引用数字** (?|)\n*  **固化分组**\n*  **匹配优先量词**  *,+,?,{n},{n,},{x,y}\n*  **忽略优先量词** *?,+?,??,{n}?,{n,}?,{x,y}?\n*  **占有优先量词** *+,++,?+,{n}+,{n,}+,{x,y}+\n*  **文字（非元字符）范围** \\Q...\\E\n*  **多选结构** |\n*  **递归**\n*  **条件判断**\n\n### 二、preg函数\n\n* **preg_match** 测试正则表达式能否在字符串中找到匹配，并提取数据\n* **preg_match_all** 从字符串中提取数据\n* **preg_replace** 在字符串的副本中替换匹配的文本\n* **preg\\_replace\\_callback** 对字符串中的每处匹配文本调用处理函数\n* **preg_split** 将字符串切分为子串数组\n* **preg_grep** 选出数组中能/不能由表达式匹配的元素\n* **preg_quote** 转义字符串中的正则表达式元字符\n\n### 三、PHP单引号字符串\n详细内容见：http://lyj1215.com/2017/09/20/string/\n\n>因为正则表达式很有可能包含反斜线，如果使用单引号字符串文本，正则表达式就可以省略许多额外的转义。PHP的单引号字符串只有两个元序列。'\\'','\\\\'\n在正则表达式中使用\\\\匹配一个\\,在单引号字符串中，\\都应表示为\\\\,所以\\\\就成了\\\\\\\\,四个反斜线才能匹配一个反斜线。\n\n>反斜线在单引号字符串和双引号字符串 中都有特殊含义，因此要匹配一个反斜线， 模式中必须写为 ”\\\\\\\\”。 译注： “/\\\\/”， 首先它作为字符串，反斜线会进行转义， 那么转义后的结果是/\\/，这个才是正则表达式引擎拿到的模式， 而正则表达式引擎也认为 \\ 是转义标记，它会将分隔符 / 进行转义， 从而得到的是一个错误，因此，需要 4 个反斜线才可以匹配一个反斜线。\n\n```php\n//以下例子 需要匹配abc\\,写正则应该为abc\\\\,在代码中用单引号引起来应该是四个\\\n$re = '/abc\\\\\\\\/';\n$str = 'abc\\\\';\npreg_match_all($re, $str, $matches);\nprint_r($matches);\n\nprint_r('/^.*\\/'); //   /^.*\\/\nprint_r('/^.*\\\\/');//   /^.*\\/\nprint_r('/^.*\\\\\\/');//   /^.*\\\\/\nprint_r('/^.*\\\\\\\\/');//   /^.*\\\\/\n```\n\n### 四、递归的正则表达式\n> 请先思考如何来匹配(1*(3+2))  嵌套括号的内容((()))这种  ，\\(([^)]*)\\)这个正则只能匹配 到(1*(3+2)，在以前, 这种情况, 正则无法处理, 最多只能处理固定层数的递归, 而无法处理无线递归的情况… 而在perl 5.6以后, 引入了一个新的特性: Recursive patterns, 使得这种需求可以被正确的处理.**(?R) ,这个表示正则模式本身(?R)的作用就是递归地替换它所在的整条正则表达式**\n\n```php\n#1(?R)*#\n//我们来仔细看一下, 这个正则, 首先它匹配数字\"1\", 然后(?R)*表示, 正则式本身, 也就是说, 可以认为是:\n#1(正则本身(正则本身).....)*#   或者#1(1(1(1)))# ,匹配一堆1\n//于是, 对于文章开头说到的情况:\"括号配对\", 可以写下如下的正则式:\n#\\((?R)*\\)#\n```\n\n>现在再来思考一下如何匹配(a(b(c)d)e) ,先剧透下正则应该是：'/\\(([^()]+|(?R))*\\)/'\n>\n>现在我们来思考一下为什么是这样写：\n我们已经知道了(?R)的作用就是递归的替换他所在的整条正则表达式，在每次迭代的时候，PHP语法分析器都会将(?R)替换为\"\\(([^()]+|(?R))*\\)\" ,因此上面的正则表达式等价于：\n\n>\"\\(([^()]+|\\(([^()]+|\\(([^()]+)*\\))*\\))*\\))/\"\n>\n>现在我们来分析下\"\\(([^()]+|(?R))*\\)\"是如何匹配 \"(a(b(c)d)e)\"的：\n\n>\"(c)\"这部分被正则式 \"\\(([^()]+)*\\)\" 匹配. 请注意, (c) 其实就相当于整个递归的一个缩影, 麻雀虽小五脏俱全, 因此它用到了整个正则表达式. 换言之, 下一步中的(c), 可以使用(?R) 来匹配. \n>\n>(b(c)d)的匹配过程为: \n>\n>\"\\(\"匹配\"(\"; \n>\n>\"[^()]+\"匹配\"b\"; \n>\n>(?R)匹配\"(c)\"; \n>\n>\"[^()]+\"匹配\"d\"; \n>\n>\"\\)\"匹配\")\". \n>\n>所有捕获子组最终被设置的捕获值都是从递归最外层子模式捕获的值。 如果上面的模式匹配 (a(b(c)d)e)，捕获子组最终被设置的值为 ”e”， 即顶级得到的最后一个值。 如果增加了额外的括号，\\((((?>[^()]+)|(?R))*)\\)，捕获到的字符串就是顶层括号的匹配内容 ”a(b(c)d)e”\n","source":"_posts/regex5.md","raw":"---\ntitle: PHP中的正则\ndate: 2017-09-19 14:26:49\ntags: [正则表达式,PHP]\ncategories: 正则表达式\n\n---\n### 一、PHP的特性和流派\n详细内容见：http://lyj1215.com/2017/09/12/regex1/\n\n**字符缩略表示法**\n\n* \\a警报,\\b退格（在字符组内部支持，外部是单词分界符）,\\eEscape字符,\\f进制符,\\n,\\r,\\t,\n\n**字符组及相关结构**\n\n* 字符组[...][^...]\n* 几乎任何字符 点号\n* 字符组缩略表示法 \\w,\\d,\\s,\\W,\\D,\\S\n* Unicode混合序列\\X ,只能与模式修饰符u连用\n* Unicode属性和区块\\p{Prop},\\P{Prop} ，可用于字符组内部，只能与模式修饰符u连用\n\n**锚点及其他零长度断言**\n\n*  **行/字符串起始位置** ^ \\A   正常情况：^匹配字符串起始位置;增强型行锚点模式：^还可以匹配任何换行符之后的位置，\\A总是和^一样\n* **行字符串结束位置** $ \\Z \\z 正常情况：$匹配字符串的结束位置，匹配字符串结尾的换行符；增强型行锚点模式：$匹配字符串的末尾，匹配**任何**换行符之前的位置。\\Z 总是和普通的$一样，\\z总是匹配字符串的末尾。\n* **当前匹配的起始位置**  \\G\n* **单词分界符** \\b \\B\n* **环视结构** (?=exp) (?!exp) (?<=exp) (?<!exp)  详细信息见：http://lyj1215.com/2017/09/12/regex4/\n\n**注释及模式修饰符**\n\n*  **表达式内部模式修饰符** (?i),允许出现的有 i,m,s ,x,U,X  ,\n*  **模式修饰范围**（?i:）\n*  **注释** (?#...),只在模式修饰符x下有效\n\n**分组及捕获**\n\n* **捕获型括号**(...)  反向引用 \\1 \\2\n* **命名捕获** (?\\<name\\>) 或者(?'name')     反向引用 \\k\\<name\\>或者 \\k 'name'\n* **非捕获型** (?:exp)\n* **让多个子组可以共用一个后向引用数字** (?|)\n*  **固化分组**\n*  **匹配优先量词**  *,+,?,{n},{n,},{x,y}\n*  **忽略优先量词** *?,+?,??,{n}?,{n,}?,{x,y}?\n*  **占有优先量词** *+,++,?+,{n}+,{n,}+,{x,y}+\n*  **文字（非元字符）范围** \\Q...\\E\n*  **多选结构** |\n*  **递归**\n*  **条件判断**\n\n### 二、preg函数\n\n* **preg_match** 测试正则表达式能否在字符串中找到匹配，并提取数据\n* **preg_match_all** 从字符串中提取数据\n* **preg_replace** 在字符串的副本中替换匹配的文本\n* **preg\\_replace\\_callback** 对字符串中的每处匹配文本调用处理函数\n* **preg_split** 将字符串切分为子串数组\n* **preg_grep** 选出数组中能/不能由表达式匹配的元素\n* **preg_quote** 转义字符串中的正则表达式元字符\n\n### 三、PHP单引号字符串\n详细内容见：http://lyj1215.com/2017/09/20/string/\n\n>因为正则表达式很有可能包含反斜线，如果使用单引号字符串文本，正则表达式就可以省略许多额外的转义。PHP的单引号字符串只有两个元序列。'\\'','\\\\'\n在正则表达式中使用\\\\匹配一个\\,在单引号字符串中，\\都应表示为\\\\,所以\\\\就成了\\\\\\\\,四个反斜线才能匹配一个反斜线。\n\n>反斜线在单引号字符串和双引号字符串 中都有特殊含义，因此要匹配一个反斜线， 模式中必须写为 ”\\\\\\\\”。 译注： “/\\\\/”， 首先它作为字符串，反斜线会进行转义， 那么转义后的结果是/\\/，这个才是正则表达式引擎拿到的模式， 而正则表达式引擎也认为 \\ 是转义标记，它会将分隔符 / 进行转义， 从而得到的是一个错误，因此，需要 4 个反斜线才可以匹配一个反斜线。\n\n```php\n//以下例子 需要匹配abc\\,写正则应该为abc\\\\,在代码中用单引号引起来应该是四个\\\n$re = '/abc\\\\\\\\/';\n$str = 'abc\\\\';\npreg_match_all($re, $str, $matches);\nprint_r($matches);\n\nprint_r('/^.*\\/'); //   /^.*\\/\nprint_r('/^.*\\\\/');//   /^.*\\/\nprint_r('/^.*\\\\\\/');//   /^.*\\\\/\nprint_r('/^.*\\\\\\\\/');//   /^.*\\\\/\n```\n\n### 四、递归的正则表达式\n> 请先思考如何来匹配(1*(3+2))  嵌套括号的内容((()))这种  ，\\(([^)]*)\\)这个正则只能匹配 到(1*(3+2)，在以前, 这种情况, 正则无法处理, 最多只能处理固定层数的递归, 而无法处理无线递归的情况… 而在perl 5.6以后, 引入了一个新的特性: Recursive patterns, 使得这种需求可以被正确的处理.**(?R) ,这个表示正则模式本身(?R)的作用就是递归地替换它所在的整条正则表达式**\n\n```php\n#1(?R)*#\n//我们来仔细看一下, 这个正则, 首先它匹配数字\"1\", 然后(?R)*表示, 正则式本身, 也就是说, 可以认为是:\n#1(正则本身(正则本身).....)*#   或者#1(1(1(1)))# ,匹配一堆1\n//于是, 对于文章开头说到的情况:\"括号配对\", 可以写下如下的正则式:\n#\\((?R)*\\)#\n```\n\n>现在再来思考一下如何匹配(a(b(c)d)e) ,先剧透下正则应该是：'/\\(([^()]+|(?R))*\\)/'\n>\n>现在我们来思考一下为什么是这样写：\n我们已经知道了(?R)的作用就是递归的替换他所在的整条正则表达式，在每次迭代的时候，PHP语法分析器都会将(?R)替换为\"\\(([^()]+|(?R))*\\)\" ,因此上面的正则表达式等价于：\n\n>\"\\(([^()]+|\\(([^()]+|\\(([^()]+)*\\))*\\))*\\))/\"\n>\n>现在我们来分析下\"\\(([^()]+|(?R))*\\)\"是如何匹配 \"(a(b(c)d)e)\"的：\n\n>\"(c)\"这部分被正则式 \"\\(([^()]+)*\\)\" 匹配. 请注意, (c) 其实就相当于整个递归的一个缩影, 麻雀虽小五脏俱全, 因此它用到了整个正则表达式. 换言之, 下一步中的(c), 可以使用(?R) 来匹配. \n>\n>(b(c)d)的匹配过程为: \n>\n>\"\\(\"匹配\"(\"; \n>\n>\"[^()]+\"匹配\"b\"; \n>\n>(?R)匹配\"(c)\"; \n>\n>\"[^()]+\"匹配\"d\"; \n>\n>\"\\)\"匹配\")\". \n>\n>所有捕获子组最终被设置的捕获值都是从递归最外层子模式捕获的值。 如果上面的模式匹配 (a(b(c)d)e)，捕获子组最终被设置的值为 ”e”， 即顶级得到的最后一个值。 如果增加了额外的括号，\\((((?>[^()]+)|(?R))*)\\)，捕获到的字符串就是顶层括号的匹配内容 ”a(b(c)d)e”\n","slug":"regex5","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08x00138a9kry0t4od9","content":"<h3 id=\"一、PHP的特性和流派\"><a href=\"#一、PHP的特性和流派\" class=\"headerlink\" title=\"一、PHP的特性和流派\"></a>一、PHP的特性和流派</h3><p>详细内容见：<a href=\"http://lyj1215.com/2017/09/12/regex1/\" target=\"_blank\" rel=\"external\">http://lyj1215.com/2017/09/12/regex1/</a></p>\n<p><strong>字符缩略表示法</strong></p>\n<ul>\n<li>\\a警报,\\b退格（在字符组内部支持，外部是单词分界符）,\\eEscape字符,\\f进制符,\\n,\\r,\\t,</li>\n</ul>\n<p><strong>字符组及相关结构</strong></p>\n<ul>\n<li>字符组[…][^…]</li>\n<li>几乎任何字符 点号</li>\n<li>字符组缩略表示法 \\w,\\d,\\s,\\W,\\D,\\S</li>\n<li>Unicode混合序列\\X ,只能与模式修饰符u连用</li>\n<li>Unicode属性和区块\\p{Prop},\\P{Prop} ，可用于字符组内部，只能与模式修饰符u连用</li>\n</ul>\n<p><strong>锚点及其他零长度断言</strong></p>\n<ul>\n<li><strong>行/字符串起始位置</strong> ^ \\A   正常情况：^匹配字符串起始位置;增强型行锚点模式：^还可以匹配任何换行符之后的位置，\\A总是和^一样</li>\n<li><strong>行字符串结束位置</strong> $ \\Z \\z 正常情况：$匹配字符串的结束位置，匹配字符串结尾的换行符；增强型行锚点模式：$匹配字符串的末尾，匹配<strong>任何</strong>换行符之前的位置。\\Z 总是和普通的$一样，\\z总是匹配字符串的末尾。</li>\n<li><strong>当前匹配的起始位置</strong>  \\G</li>\n<li><strong>单词分界符</strong> \\b \\B</li>\n<li><strong>环视结构</strong> (?=exp) (?!exp) (?&lt;=exp) (?&lt;!exp)  详细信息见：<a href=\"http://lyj1215.com/2017/09/12/regex4/\" target=\"_blank\" rel=\"external\">http://lyj1215.com/2017/09/12/regex4/</a></li>\n</ul>\n<p><strong>注释及模式修饰符</strong></p>\n<ul>\n<li><strong>表达式内部模式修饰符</strong> (?i),允许出现的有 i,m,s ,x,U,X  ,</li>\n<li><strong>模式修饰范围</strong>（?i:）</li>\n<li><strong>注释</strong> (?#…),只在模式修饰符x下有效</li>\n</ul>\n<p><strong>分组及捕获</strong></p>\n<ul>\n<li><strong>捕获型括号</strong>(…)  反向引用 \\1 \\2</li>\n<li><strong>命名捕获</strong> (?\\<name\\>) 或者(?’name’)     反向引用 \\k\\<name\\>或者 \\k ‘name’</name\\></name\\></li>\n<li><strong>非捕获型</strong> (?:exp)</li>\n<li><strong>让多个子组可以共用一个后向引用数字</strong> (?|)</li>\n<li><strong>固化分组</strong></li>\n<li><strong>匹配优先量词</strong>  *,+,?,{n},{n,},{x,y}</li>\n<li><strong>忽略优先量词</strong> *?,+?,??,{n}?,{n,}?,{x,y}?</li>\n<li><strong>占有优先量词</strong> *+,++,?+,{n}+,{n,}+,{x,y}+</li>\n<li><strong>文字（非元字符）范围</strong> \\Q…\\E</li>\n<li><strong>多选结构</strong> |</li>\n<li><strong>递归</strong></li>\n<li><strong>条件判断</strong></li>\n</ul>\n<h3 id=\"二、preg函数\"><a href=\"#二、preg函数\" class=\"headerlink\" title=\"二、preg函数\"></a>二、preg函数</h3><ul>\n<li><strong>preg_match</strong> 测试正则表达式能否在字符串中找到匹配，并提取数据</li>\n<li><strong>preg_match_all</strong> 从字符串中提取数据</li>\n<li><strong>preg_replace</strong> 在字符串的副本中替换匹配的文本</li>\n<li><strong>preg_replace_callback</strong> 对字符串中的每处匹配文本调用处理函数</li>\n<li><strong>preg_split</strong> 将字符串切分为子串数组</li>\n<li><strong>preg_grep</strong> 选出数组中能/不能由表达式匹配的元素</li>\n<li><strong>preg_quote</strong> 转义字符串中的正则表达式元字符</li>\n</ul>\n<h3 id=\"三、PHP单引号字符串\"><a href=\"#三、PHP单引号字符串\" class=\"headerlink\" title=\"三、PHP单引号字符串\"></a>三、PHP单引号字符串</h3><p>详细内容见：<a href=\"http://lyj1215.com/2017/09/20/string/\" target=\"_blank\" rel=\"external\">http://lyj1215.com/2017/09/20/string/</a></p>\n<blockquote>\n<p>因为正则表达式很有可能包含反斜线，如果使用单引号字符串文本，正则表达式就可以省略许多额外的转义。PHP的单引号字符串只有两个元序列。’\\’’,’\\‘<br>在正则表达式中使用\\匹配一个\\,在单引号字符串中，\\都应表示为\\,所以\\就成了\\\\,四个反斜线才能匹配一个反斜线。</p>\n<p>反斜线在单引号字符串和双引号字符串 中都有特殊含义，因此要匹配一个反斜线， 模式中必须写为 ”\\\\”。 译注： “/\\/”， 首先它作为字符串，反斜线会进行转义， 那么转义后的结果是/\\/，这个才是正则表达式引擎拿到的模式， 而正则表达式引擎也认为 \\ 是转义标记，它会将分隔符 / 进行转义， 从而得到的是一个错误，因此，需要 4 个反斜线才可以匹配一个反斜线。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//以下例子 需要匹配abc\\,写正则应该为abc\\\\,在代码中用单引号引起来应该是四个\\</span></div><div class=\"line\">$re = <span class=\"string\">'/abc\\\\\\\\/'</span>;</div><div class=\"line\">$str = <span class=\"string\">'abc\\\\'</span>;</div><div class=\"line\">preg_match_all($re, $str, $matches);</div><div class=\"line\">print_r($matches);</div><div class=\"line\"></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\/'</span>); <span class=\"comment\">//   /^.*\\/</span></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\\\/'</span>);<span class=\"comment\">//   /^.*\\/</span></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\\\\\/'</span>);<span class=\"comment\">//   /^.*\\\\/</span></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\\\\\\\/'</span>);<span class=\"comment\">//   /^.*\\\\/</span></div></pre></td></tr></table></figure>\n<h3 id=\"四、递归的正则表达式\"><a href=\"#四、递归的正则表达式\" class=\"headerlink\" title=\"四、递归的正则表达式\"></a>四、递归的正则表达式</h3><blockquote>\n<p>请先思考如何来匹配(1<em>(3+2))  嵌套括号的内容((()))这种  ，(([^)]</em>))这个正则只能匹配 到(1<em>(3+2)，在以前, 这种情况, 正则无法处理, 最多只能处理固定层数的递归, 而无法处理无线递归的情况… 而在perl 5.6以后, 引入了一个新的特性: Recursive patterns, 使得这种需求可以被正确的处理.<em>*(?R) ,这个表示正则模式本身(?R)的作用就是递归地替换它所在的整条正则表达式</em></em></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#1(?R)*#</span></div><div class=\"line\"><span class=\"comment\">//我们来仔细看一下, 这个正则, 首先它匹配数字\"1\", 然后(?R)*表示, 正则式本身, 也就是说, 可以认为是:</span></div><div class=\"line\"><span class=\"comment\">#1(正则本身(正则本身).....)*#   或者#1(1(1(1)))# ,匹配一堆1</span></div><div class=\"line\"><span class=\"comment\">//于是, 对于文章开头说到的情况:\"括号配对\", 可以写下如下的正则式:</span></div><div class=\"line\"><span class=\"comment\">#\\((?R)*\\)#</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>现在再来思考一下如何匹配(a(b(c)d)e) ,先剧透下正则应该是：’/(([^()]+|(?R))*)/‘</p>\n<p>现在我们来思考一下为什么是这样写：<br>我们已经知道了(?R)的作用就是递归的替换他所在的整条正则表达式，在每次迭代的时候，PHP语法分析器都会将(?R)替换为”(([^()]+|(?R))*)“ ,因此上面的正则表达式等价于：</p>\n<p>“(([^()]+|(([^()]+|(([^()]+)<em>))</em>))*))/“</p>\n<p>现在我们来分析下”(([^()]+|(?R))*)“是如何匹配 “(a(b(c)d)e)”的：</p>\n<p>“(c)”这部分被正则式 “(([^()]+)*)“ 匹配. 请注意, (c) 其实就相当于整个递归的一个缩影, 麻雀虽小五脏俱全, 因此它用到了整个正则表达式. 换言之, 下一步中的(c), 可以使用(?R) 来匹配. </p>\n<p>(b(c)d)的匹配过程为: </p>\n<p>“(“匹配”(“; </p>\n<p>“[^()]+”匹配”b”; </p>\n<p>(?R)匹配”(c)”; </p>\n<p>“[^()]+”匹配”d”; </p>\n<p>“)“匹配”)”. </p>\n<p>所有捕获子组最终被设置的捕获值都是从递归最外层子模式捕获的值。 如果上面的模式匹配 (a(b(c)d)e)，捕获子组最终被设置的值为 ”e”， 即顶级得到的最后一个值。 如果增加了额外的括号，((((?&gt;[^()]+)|(?R))*))，捕获到的字符串就是顶层括号的匹配内容 ”a(b(c)d)e”</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、PHP的特性和流派\"><a href=\"#一、PHP的特性和流派\" class=\"headerlink\" title=\"一、PHP的特性和流派\"></a>一、PHP的特性和流派</h3><p>详细内容见：<a href=\"http://lyj1215.com/2017/09/12/regex1/\" target=\"_blank\" rel=\"external\">http://lyj1215.com/2017/09/12/regex1/</a></p>\n<p><strong>字符缩略表示法</strong></p>\n<ul>\n<li>\\a警报,\\b退格（在字符组内部支持，外部是单词分界符）,\\eEscape字符,\\f进制符,\\n,\\r,\\t,</li>\n</ul>\n<p><strong>字符组及相关结构</strong></p>\n<ul>\n<li>字符组[…][^…]</li>\n<li>几乎任何字符 点号</li>\n<li>字符组缩略表示法 \\w,\\d,\\s,\\W,\\D,\\S</li>\n<li>Unicode混合序列\\X ,只能与模式修饰符u连用</li>\n<li>Unicode属性和区块\\p{Prop},\\P{Prop} ，可用于字符组内部，只能与模式修饰符u连用</li>\n</ul>\n<p><strong>锚点及其他零长度断言</strong></p>\n<ul>\n<li><strong>行/字符串起始位置</strong> ^ \\A   正常情况：^匹配字符串起始位置;增强型行锚点模式：^还可以匹配任何换行符之后的位置，\\A总是和^一样</li>\n<li><strong>行字符串结束位置</strong> $ \\Z \\z 正常情况：$匹配字符串的结束位置，匹配字符串结尾的换行符；增强型行锚点模式：$匹配字符串的末尾，匹配<strong>任何</strong>换行符之前的位置。\\Z 总是和普通的$一样，\\z总是匹配字符串的末尾。</li>\n<li><strong>当前匹配的起始位置</strong>  \\G</li>\n<li><strong>单词分界符</strong> \\b \\B</li>\n<li><strong>环视结构</strong> (?=exp) (?!exp) (?&lt;=exp) (?&lt;!exp)  详细信息见：<a href=\"http://lyj1215.com/2017/09/12/regex4/\" target=\"_blank\" rel=\"external\">http://lyj1215.com/2017/09/12/regex4/</a></li>\n</ul>\n<p><strong>注释及模式修饰符</strong></p>\n<ul>\n<li><strong>表达式内部模式修饰符</strong> (?i),允许出现的有 i,m,s ,x,U,X  ,</li>\n<li><strong>模式修饰范围</strong>（?i:）</li>\n<li><strong>注释</strong> (?#…),只在模式修饰符x下有效</li>\n</ul>\n<p><strong>分组及捕获</strong></p>\n<ul>\n<li><strong>捕获型括号</strong>(…)  反向引用 \\1 \\2</li>\n<li><strong>命名捕获</strong> (?\\<name\\>) 或者(?’name’)     反向引用 \\k\\<name\\>或者 \\k ‘name’</name\\></name\\></li>\n<li><strong>非捕获型</strong> (?:exp)</li>\n<li><strong>让多个子组可以共用一个后向引用数字</strong> (?|)</li>\n<li><strong>固化分组</strong></li>\n<li><strong>匹配优先量词</strong>  *,+,?,{n},{n,},{x,y}</li>\n<li><strong>忽略优先量词</strong> *?,+?,??,{n}?,{n,}?,{x,y}?</li>\n<li><strong>占有优先量词</strong> *+,++,?+,{n}+,{n,}+,{x,y}+</li>\n<li><strong>文字（非元字符）范围</strong> \\Q…\\E</li>\n<li><strong>多选结构</strong> |</li>\n<li><strong>递归</strong></li>\n<li><strong>条件判断</strong></li>\n</ul>\n<h3 id=\"二、preg函数\"><a href=\"#二、preg函数\" class=\"headerlink\" title=\"二、preg函数\"></a>二、preg函数</h3><ul>\n<li><strong>preg_match</strong> 测试正则表达式能否在字符串中找到匹配，并提取数据</li>\n<li><strong>preg_match_all</strong> 从字符串中提取数据</li>\n<li><strong>preg_replace</strong> 在字符串的副本中替换匹配的文本</li>\n<li><strong>preg_replace_callback</strong> 对字符串中的每处匹配文本调用处理函数</li>\n<li><strong>preg_split</strong> 将字符串切分为子串数组</li>\n<li><strong>preg_grep</strong> 选出数组中能/不能由表达式匹配的元素</li>\n<li><strong>preg_quote</strong> 转义字符串中的正则表达式元字符</li>\n</ul>\n<h3 id=\"三、PHP单引号字符串\"><a href=\"#三、PHP单引号字符串\" class=\"headerlink\" title=\"三、PHP单引号字符串\"></a>三、PHP单引号字符串</h3><p>详细内容见：<a href=\"http://lyj1215.com/2017/09/20/string/\" target=\"_blank\" rel=\"external\">http://lyj1215.com/2017/09/20/string/</a></p>\n<blockquote>\n<p>因为正则表达式很有可能包含反斜线，如果使用单引号字符串文本，正则表达式就可以省略许多额外的转义。PHP的单引号字符串只有两个元序列。’\\’’,’\\‘<br>在正则表达式中使用\\匹配一个\\,在单引号字符串中，\\都应表示为\\,所以\\就成了\\\\,四个反斜线才能匹配一个反斜线。</p>\n<p>反斜线在单引号字符串和双引号字符串 中都有特殊含义，因此要匹配一个反斜线， 模式中必须写为 ”\\\\”。 译注： “/\\/”， 首先它作为字符串，反斜线会进行转义， 那么转义后的结果是/\\/，这个才是正则表达式引擎拿到的模式， 而正则表达式引擎也认为 \\ 是转义标记，它会将分隔符 / 进行转义， 从而得到的是一个错误，因此，需要 4 个反斜线才可以匹配一个反斜线。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//以下例子 需要匹配abc\\,写正则应该为abc\\\\,在代码中用单引号引起来应该是四个\\</span></div><div class=\"line\">$re = <span class=\"string\">'/abc\\\\\\\\/'</span>;</div><div class=\"line\">$str = <span class=\"string\">'abc\\\\'</span>;</div><div class=\"line\">preg_match_all($re, $str, $matches);</div><div class=\"line\">print_r($matches);</div><div class=\"line\"></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\/'</span>); <span class=\"comment\">//   /^.*\\/</span></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\\\/'</span>);<span class=\"comment\">//   /^.*\\/</span></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\\\\\/'</span>);<span class=\"comment\">//   /^.*\\\\/</span></div><div class=\"line\">print_r(<span class=\"string\">'/^.*\\\\\\\\/'</span>);<span class=\"comment\">//   /^.*\\\\/</span></div></pre></td></tr></table></figure>\n<h3 id=\"四、递归的正则表达式\"><a href=\"#四、递归的正则表达式\" class=\"headerlink\" title=\"四、递归的正则表达式\"></a>四、递归的正则表达式</h3><blockquote>\n<p>请先思考如何来匹配(1<em>(3+2))  嵌套括号的内容((()))这种  ，(([^)]</em>))这个正则只能匹配 到(1<em>(3+2)，在以前, 这种情况, 正则无法处理, 最多只能处理固定层数的递归, 而无法处理无线递归的情况… 而在perl 5.6以后, 引入了一个新的特性: Recursive patterns, 使得这种需求可以被正确的处理.<em>*(?R) ,这个表示正则模式本身(?R)的作用就是递归地替换它所在的整条正则表达式</em></em></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#1(?R)*#</span></div><div class=\"line\"><span class=\"comment\">//我们来仔细看一下, 这个正则, 首先它匹配数字\"1\", 然后(?R)*表示, 正则式本身, 也就是说, 可以认为是:</span></div><div class=\"line\"><span class=\"comment\">#1(正则本身(正则本身).....)*#   或者#1(1(1(1)))# ,匹配一堆1</span></div><div class=\"line\"><span class=\"comment\">//于是, 对于文章开头说到的情况:\"括号配对\", 可以写下如下的正则式:</span></div><div class=\"line\"><span class=\"comment\">#\\((?R)*\\)#</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>现在再来思考一下如何匹配(a(b(c)d)e) ,先剧透下正则应该是：’/(([^()]+|(?R))*)/‘</p>\n<p>现在我们来思考一下为什么是这样写：<br>我们已经知道了(?R)的作用就是递归的替换他所在的整条正则表达式，在每次迭代的时候，PHP语法分析器都会将(?R)替换为”(([^()]+|(?R))*)“ ,因此上面的正则表达式等价于：</p>\n<p>“(([^()]+|(([^()]+|(([^()]+)<em>))</em>))*))/“</p>\n<p>现在我们来分析下”(([^()]+|(?R))*)“是如何匹配 “(a(b(c)d)e)”的：</p>\n<p>“(c)”这部分被正则式 “(([^()]+)*)“ 匹配. 请注意, (c) 其实就相当于整个递归的一个缩影, 麻雀虽小五脏俱全, 因此它用到了整个正则表达式. 换言之, 下一步中的(c), 可以使用(?R) 来匹配. </p>\n<p>(b(c)d)的匹配过程为: </p>\n<p>“(“匹配”(“; </p>\n<p>“[^()]+”匹配”b”; </p>\n<p>(?R)匹配”(c)”; </p>\n<p>“[^()]+”匹配”d”; </p>\n<p>“)“匹配”)”. </p>\n<p>所有捕获子组最终被设置的捕获值都是从递归最外层子模式捕获的值。 如果上面的模式匹配 (a(b(c)d)e)，捕获子组最终被设置的值为 ”e”， 即顶级得到的最后一个值。 如果增加了额外的括号，((((?&gt;[^()]+)|(?R))*))，捕获到的字符串就是顶层括号的匹配内容 ”a(b(c)d)e”</p>\n</blockquote>\n"},{"title":"常见查找算法","date":"2017-07-16T15:30:07.000Z","updated":"2017-07-16T15:30:07.000Z","_content":"查找定义：根据给定的某个值，在查找表中确定一个七关键字等于给定值得数据元素。\n\n查找算法分类：\n\n1. 静态查找和动态查找\n2. 有序查找和无序查找\n\n平均查找长度\n\n　　查找算法分类：\n　　\n　　1）静态查找和动态查找；\n　　　　注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。\n　　2）无序查找和有序查找。\n　　　　无序查找：被查找数列有序无序均可；\n　　　　有序查找：被查找数列必须为有序数列。\n　　平均查找长度（Average Search Length，ASL）：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。\n　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。\n　　Pi：查找表中第i个数据元素的概率。\n　　Ci：找到第i个数据元素时已经比较过的次数。\n\n\n\n一、顺序查找\n思路：一个一个的查\n复杂度：o(n)\n代码：\n{% codeblock %}\nfunction seqSearch($arr,$k){\n    for($i=0;$i<count($arr);$i++){\n        if($arr[$i] == $k){\n            return $i;\n        }\n    }\n    return false;\n}\n\n$items=[1,3,5,7,9,11,13,15];\n\nvar_dump(seqSearch($items, 4));\nvar_dump(seqSearch($items, 5));\n\n示例2：\n// $array为数组，$k为要查找的值\n function search2 ($array, $val ){\n      $array[]=$val;\n        $n = count($array);\n        $i = 0;\n        while( $array[$i] != $val ){ \n            $i++;\n        }\n       return ($i == $n-1) ? false : $i;\n}\n$items=[32,55,6,33,921,543,123,666];\nvar_dump(search2($items, 4));\nvar_dump(search2($items, 55));\n{% endcodeblock %}\n\n二、二分查找\n思路：也称为是折半查找，属于有序查找算法。需要设定三个值，low=0；high=count-1;mid=(low+high)/2,用给定值k先与mid的关键字比较，若相等则查找成功；若mid值比k值大，则去查找前半部分，high=mid-1;若mid值比K值小，则去查找后半部分，low=mid+1;循环比较，直到mid==k,循环条件：low<=high\n说明：必须是有序的，如果不是有序的可以先排序一下\n复杂度：最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；\n代码：\n{% codeblock %}\nfunction binarySearch($arr,$k){\n    $len = count($arr);\n    $low = 0;\n    $high = $len-1;\n    while($low <= $high) {\n        $mid = intval(($low + $high) / 2);\n        if ($arr[$mid] == $k) {\n            return $mid;\n        } elseif ($arr[$mid] > $k) {\n            $high = $mid-1;\n        } else {\n            $low = $mid+1;\n        }\n    }\n    return false;\n\n}\n\n$array  = array(2,3,4,7,9,10,11,18,19,20,33);\nvar_dump(binarySearch($array,7));\n{% endcodeblock %}\n\n三、插值查找\n思路：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。\nmid=low+(key-a[low])/(a[high]-a[low])*(high-low)\n说明：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。　　\n复杂度：查找成功或者失败的时间复杂度均为O(log2(log2n))。\n代码：\n{% codeblock %}\nfunction binarySearch ($array, $val ){\n    $low=0;\n    $high=count($array)-1;\n    while( $low<=$high ){\n        if($low==$high){\n            $mid=$low;\n        }else{\n            $mid= $low +( ( $val -$array[$low] )/( $array[$high]-$array[$low] ) ) * (  $high - $low  ) ;\n            if($mid<0)return false;\n        }\n        if( $val<$array[$mid] ){\n            $high=$high-1;\n        }else if( $val>$array[$mid] ){\n            $low=$low+1;\n        }else{\n            return $mid;\n        }\n    }\n    return false;\n}\n\n$items=[1,3,5,7,9,11,13,15];\n\nvar_dump(binarySearch($items, 4));\nvar_dump(binarySearch($items, 5));\n{% endcodeblock %}","source":"_posts/search.md","raw":"---\ntitle: 常见查找算法\ndate: 2017-07-16 23:30:07\nupdated: 2017-07-16 23:30:07\ntags: 算法\ncategories: 数据结构与算法\n---\n查找定义：根据给定的某个值，在查找表中确定一个七关键字等于给定值得数据元素。\n\n查找算法分类：\n\n1. 静态查找和动态查找\n2. 有序查找和无序查找\n\n平均查找长度\n\n　　查找算法分类：\n　　\n　　1）静态查找和动态查找；\n　　　　注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。\n　　2）无序查找和有序查找。\n　　　　无序查找：被查找数列有序无序均可；\n　　　　有序查找：被查找数列必须为有序数列。\n　　平均查找长度（Average Search Length，ASL）：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。\n　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。\n　　Pi：查找表中第i个数据元素的概率。\n　　Ci：找到第i个数据元素时已经比较过的次数。\n\n\n\n一、顺序查找\n思路：一个一个的查\n复杂度：o(n)\n代码：\n{% codeblock %}\nfunction seqSearch($arr,$k){\n    for($i=0;$i<count($arr);$i++){\n        if($arr[$i] == $k){\n            return $i;\n        }\n    }\n    return false;\n}\n\n$items=[1,3,5,7,9,11,13,15];\n\nvar_dump(seqSearch($items, 4));\nvar_dump(seqSearch($items, 5));\n\n示例2：\n// $array为数组，$k为要查找的值\n function search2 ($array, $val ){\n      $array[]=$val;\n        $n = count($array);\n        $i = 0;\n        while( $array[$i] != $val ){ \n            $i++;\n        }\n       return ($i == $n-1) ? false : $i;\n}\n$items=[32,55,6,33,921,543,123,666];\nvar_dump(search2($items, 4));\nvar_dump(search2($items, 55));\n{% endcodeblock %}\n\n二、二分查找\n思路：也称为是折半查找，属于有序查找算法。需要设定三个值，low=0；high=count-1;mid=(low+high)/2,用给定值k先与mid的关键字比较，若相等则查找成功；若mid值比k值大，则去查找前半部分，high=mid-1;若mid值比K值小，则去查找后半部分，low=mid+1;循环比较，直到mid==k,循环条件：low<=high\n说明：必须是有序的，如果不是有序的可以先排序一下\n复杂度：最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；\n代码：\n{% codeblock %}\nfunction binarySearch($arr,$k){\n    $len = count($arr);\n    $low = 0;\n    $high = $len-1;\n    while($low <= $high) {\n        $mid = intval(($low + $high) / 2);\n        if ($arr[$mid] == $k) {\n            return $mid;\n        } elseif ($arr[$mid] > $k) {\n            $high = $mid-1;\n        } else {\n            $low = $mid+1;\n        }\n    }\n    return false;\n\n}\n\n$array  = array(2,3,4,7,9,10,11,18,19,20,33);\nvar_dump(binarySearch($array,7));\n{% endcodeblock %}\n\n三、插值查找\n思路：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。\nmid=low+(key-a[low])/(a[high]-a[low])*(high-low)\n说明：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。　　\n复杂度：查找成功或者失败的时间复杂度均为O(log2(log2n))。\n代码：\n{% codeblock %}\nfunction binarySearch ($array, $val ){\n    $low=0;\n    $high=count($array)-1;\n    while( $low<=$high ){\n        if($low==$high){\n            $mid=$low;\n        }else{\n            $mid= $low +( ( $val -$array[$low] )/( $array[$high]-$array[$low] ) ) * (  $high - $low  ) ;\n            if($mid<0)return false;\n        }\n        if( $val<$array[$mid] ){\n            $high=$high-1;\n        }else if( $val>$array[$mid] ){\n            $low=$low+1;\n        }else{\n            return $mid;\n        }\n    }\n    return false;\n}\n\n$items=[1,3,5,7,9,11,13,15];\n\nvar_dump(binarySearch($items, 4));\nvar_dump(binarySearch($items, 5));\n{% endcodeblock %}","slug":"search","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb08z00168a9kmtm1233u","content":"<p>查找定义：根据给定的某个值，在查找表中确定一个七关键字等于给定值得数据元素。</p>\n<p>查找算法分类：</p>\n<ol>\n<li>静态查找和动态查找</li>\n<li>有序查找和无序查找</li>\n</ol>\n<p>平均查找长度</p>\n<p>　　查找算法分类：<br>　　<br>　　1）静态查找和动态查找；<br>　　　　注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。<br>　　2）无序查找和有序查找。<br>　　　　无序查找：被查找数列有序无序均可；<br>　　　　有序查找：被查找数列必须为有序数列。<br>　　平均查找长度（Average Search Length，ASL）：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。<br>　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。<br>　　Pi：查找表中第i个数据元素的概率。<br>　　Ci：找到第i个数据元素时已经比较过的次数。</p>\n<p>一、顺序查找<br>思路：一个一个的查<br>复杂度：o(n)<br>代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seqSearch</span><span class=\"params\">($arr,$k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;count($arr);$i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($arr[$i] == $k)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$items=[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">15</span>];</div><div class=\"line\"></div><div class=\"line\">var_dump(seqSearch($items, <span class=\"number\">4</span>));</div><div class=\"line\">var_dump(seqSearch($items, <span class=\"number\">5</span>));</div><div class=\"line\"></div><div class=\"line\">示例<span class=\"number\">2</span>：</div><div class=\"line\"><span class=\"comment\">// $array为数组，$k为要查找的值</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search2</span> <span class=\"params\">($array, $val )</span></span>&#123;</div><div class=\"line\">      $array[]=$val;</div><div class=\"line\">        $n = count($array);</div><div class=\"line\">        $i = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>( $array[$i] != $val )&#123; </div><div class=\"line\">            $i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> ($i == $n<span class=\"number\">-1</span>) ? <span class=\"keyword\">false</span> : $i;</div><div class=\"line\">&#125;</div><div class=\"line\">$items=[<span class=\"number\">32</span>,<span class=\"number\">55</span>,<span class=\"number\">6</span>,<span class=\"number\">33</span>,<span class=\"number\">921</span>,<span class=\"number\">543</span>,<span class=\"number\">123</span>,<span class=\"number\">666</span>];</div><div class=\"line\">var_dump(search2($items, <span class=\"number\">4</span>));</div><div class=\"line\">var_dump(search2($items, <span class=\"number\">55</span>));</div></pre></td></tr></table></figure></p>\n<p>二、二分查找<br>思路：也称为是折半查找，属于有序查找算法。需要设定三个值，low=0；high=count-1;mid=(low+high)/2,用给定值k先与mid的关键字比较，若相等则查找成功；若mid值比k值大，则去查找前半部分，high=mid-1;若mid值比K值小，则去查找后半部分，low=mid+1;循环比较，直到mid==k,循环条件：low&lt;=high<br>说明：必须是有序的，如果不是有序的可以先排序一下<br>复杂度：最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；<br>代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span><span class=\"params\">($arr,$k)</span></span>&#123;</div><div class=\"line\">    $len = count($arr);</div><div class=\"line\">    $low = <span class=\"number\">0</span>;</div><div class=\"line\">    $high = $len<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>($low &lt;= $high) &#123;</div><div class=\"line\">        $mid = intval(($low + $high) / <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> ($arr[$mid] == $k) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">        &#125; <span class=\"keyword\">elseif</span> ($arr[$mid] &gt; $k) &#123;</div><div class=\"line\">            $high = $mid<span class=\"number\">-1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $low = $mid+<span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$array  = <span class=\"keyword\">array</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>,<span class=\"number\">33</span>);</div><div class=\"line\">var_dump(binarySearch($array,<span class=\"number\">7</span>));</div></pre></td></tr></table></figure></p>\n<p>三、插值查找<br>思路：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。<br>mid=low+(key-a[low])/(a[high]-a[low])*(high-low)<br>说明：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。　　<br>复杂度：查找成功或者失败的时间复杂度均为O(log2(log2n))。<br>代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span> <span class=\"params\">($array, $val )</span></span>&#123;</div><div class=\"line\">    $low=<span class=\"number\">0</span>;</div><div class=\"line\">    $high=count($array)<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>( $low&lt;=$high )&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($low==$high)&#123;</div><div class=\"line\">            $mid=$low;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            $mid= $low +( ( $val -$array[$low] )/( $array[$high]-$array[$low] ) ) * (  $high - $low  ) ;</div><div class=\"line\">            <span class=\"keyword\">if</span>($mid&lt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>( $val&lt;$array[$mid] )&#123;</div><div class=\"line\">            $high=$high<span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( $val&gt;$array[$mid] )&#123;</div><div class=\"line\">            $low=$low+<span class=\"number\">1</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$items=[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">15</span>];</div><div class=\"line\"></div><div class=\"line\">var_dump(binarySearch($items, <span class=\"number\">4</span>));</div><div class=\"line\">var_dump(binarySearch($items, <span class=\"number\">5</span>));</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>查找定义：根据给定的某个值，在查找表中确定一个七关键字等于给定值得数据元素。</p>\n<p>查找算法分类：</p>\n<ol>\n<li>静态查找和动态查找</li>\n<li>有序查找和无序查找</li>\n</ol>\n<p>平均查找长度</p>\n<p>　　查找算法分类：<br>　　<br>　　1）静态查找和动态查找；<br>　　　　注：静态或者动态都是针对查找表而言的。动态表指查找表中有删除和插入操作的表。<br>　　2）无序查找和有序查找。<br>　　　　无序查找：被查找数列有序无序均可；<br>　　　　有序查找：被查找数列必须为有序数列。<br>　　平均查找长度（Average Search Length，ASL）：需和指定key进行比较的关键字的个数的期望值，称为查找算法在查找成功时的平均查找长度。<br>　　对于含有n个数据元素的查找表，查找成功的平均查找长度为：ASL = Pi*Ci的和。<br>　　Pi：查找表中第i个数据元素的概率。<br>　　Ci：找到第i个数据元素时已经比较过的次数。</p>\n<p>一、顺序查找<br>思路：一个一个的查<br>复杂度：o(n)<br>代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seqSearch</span><span class=\"params\">($arr,$k)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i=<span class=\"number\">0</span>;$i&lt;count($arr);$i++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($arr[$i] == $k)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$items=[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">15</span>];</div><div class=\"line\"></div><div class=\"line\">var_dump(seqSearch($items, <span class=\"number\">4</span>));</div><div class=\"line\">var_dump(seqSearch($items, <span class=\"number\">5</span>));</div><div class=\"line\"></div><div class=\"line\">示例<span class=\"number\">2</span>：</div><div class=\"line\"><span class=\"comment\">// $array为数组，$k为要查找的值</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search2</span> <span class=\"params\">($array, $val )</span></span>&#123;</div><div class=\"line\">      $array[]=$val;</div><div class=\"line\">        $n = count($array);</div><div class=\"line\">        $i = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>( $array[$i] != $val )&#123; </div><div class=\"line\">            $i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> ($i == $n<span class=\"number\">-1</span>) ? <span class=\"keyword\">false</span> : $i;</div><div class=\"line\">&#125;</div><div class=\"line\">$items=[<span class=\"number\">32</span>,<span class=\"number\">55</span>,<span class=\"number\">6</span>,<span class=\"number\">33</span>,<span class=\"number\">921</span>,<span class=\"number\">543</span>,<span class=\"number\">123</span>,<span class=\"number\">666</span>];</div><div class=\"line\">var_dump(search2($items, <span class=\"number\">4</span>));</div><div class=\"line\">var_dump(search2($items, <span class=\"number\">55</span>));</div></pre></td></tr></table></figure></p>\n<p>二、二分查找<br>思路：也称为是折半查找，属于有序查找算法。需要设定三个值，low=0；high=count-1;mid=(low+high)/2,用给定值k先与mid的关键字比较，若相等则查找成功；若mid值比k值大，则去查找前半部分，high=mid-1;若mid值比K值小，则去查找后半部分，low=mid+1;循环比较，直到mid==k,循环条件：low&lt;=high<br>说明：必须是有序的，如果不是有序的可以先排序一下<br>复杂度：最坏情况下，关键词比较次数为log2(n+1)，且期望时间复杂度为O(log2n)；<br>代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span><span class=\"params\">($arr,$k)</span></span>&#123;</div><div class=\"line\">    $len = count($arr);</div><div class=\"line\">    $low = <span class=\"number\">0</span>;</div><div class=\"line\">    $high = $len<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>($low &lt;= $high) &#123;</div><div class=\"line\">        $mid = intval(($low + $high) / <span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> ($arr[$mid] == $k) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">        &#125; <span class=\"keyword\">elseif</span> ($arr[$mid] &gt; $k) &#123;</div><div class=\"line\">            $high = $mid<span class=\"number\">-1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            $low = $mid+<span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$array  = <span class=\"keyword\">array</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>,<span class=\"number\">33</span>);</div><div class=\"line\">var_dump(binarySearch($array,<span class=\"number\">7</span>));</div></pre></td></tr></table></figure></p>\n<p>三、插值查找<br>思路：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。<br>mid=low+(key-a[low])/(a[high]-a[low])*(high-low)<br>说明：对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。　　<br>复杂度：查找成功或者失败的时间复杂度均为O(log2(log2n))。<br>代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span> <span class=\"params\">($array, $val )</span></span>&#123;</div><div class=\"line\">    $low=<span class=\"number\">0</span>;</div><div class=\"line\">    $high=count($array)<span class=\"number\">-1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>( $low&lt;=$high )&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($low==$high)&#123;</div><div class=\"line\">            $mid=$low;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            $mid= $low +( ( $val -$array[$low] )/( $array[$high]-$array[$low] ) ) * (  $high - $low  ) ;</div><div class=\"line\">            <span class=\"keyword\">if</span>($mid&lt;<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>( $val&lt;$array[$mid] )&#123;</div><div class=\"line\">            $high=$high<span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( $val&gt;$array[$mid] )&#123;</div><div class=\"line\">            $low=$low+<span class=\"number\">1</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$items=[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">15</span>];</div><div class=\"line\"></div><div class=\"line\">var_dump(binarySearch($items, <span class=\"number\">4</span>));</div><div class=\"line\">var_dump(binarySearch($items, <span class=\"number\">5</span>));</div></pre></td></tr></table></figure></p>\n"},{"title":"单例模式","date":"2017-03-16T13:40:35.000Z","updated":"2017-03-16T15:30:07.000Z","img":"/img/singleton.jpg","_content":"一、概览\n* 设计原则：无\n* 常用场景：应用中有对象需要是全局的且唯一\n* 使用概率：99.99999%\n* 复杂度：低\n* 变化点：无\n* 选择关键点：一个对象在应用中出现多个实例是否会引起逻辑上或者是程序上的错误\n* 逆鳞：在以为是单例的情况下，却产生了多个实例\n* 相关设计模式：\n    * 原型模式：单例模式是只有一个实例，原型模式每拷贝一次都会创造一个新的实例。\n\n二、定义：单例模式：单例模式保证一个类只有一个实例，同时这个类还必须提供一个访问该类的全局访问点。\n\n三、UML类图\n\n ![创建应用][id]\n     \n [id]: /img/singleton.jpg \"create\"\n单例模式的三个要点：\n1. 需要一个保存类的唯一实例的静态成员变量\n2. 构造函数和克隆函数必须私有\n3. 必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用\n\n那么为什么要使用PHP单例模式？\n\nPHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。\n\n\n单例模式代码：\n{% codeblock %}\n<?php\n\n/**\n * class Singleton\n */\nclass Singleton\n{\n    /**\n     * @var Singleton reference to singleton instance\n     */\n    private static $instance;\n\n    /**\n     * gets the instance via lazy initialization (created on first usage)\n     *\n     * @return self\n     */\n    public static function getInstance()\n    {\n\n        if (null === static::$instance) {\n            static::$instance = new static;                          //static 相当于self\n        }\n\n        return static::$instance;\n    }\n\n    /**\n     * is not allowed to call from outside: private!\n     *\n     */\n    private function __construct()\n    {\n\n    }\n\n    /**\n     * prevent the instance from being cloned\n     *\n     * @return void\n     */\n    private function __clone()\n    {\n\n    }\n\n    /**\n     * prevent from being unserialized\n     *\n     * @return void\n     */\n    private function __wakeup()\n    {\n\n    }\n}\n{% endcodeblock %}\n\n\n单例模式优缺点：\n优点：\n1. 由于在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁的创建，销毁时\n2. 减少了系统的性能开销，读取配置，产生其他依赖对象时，可以通过在应用启动时直接产生一个单例对象。\n3. 可以避免对资源的多重占用，比如写文件动作，由于只有一个实例在内存中，可以避免对同一个资源文件的同时写操作\n4. 可以在系统设置全局的访问点，优化和共享资源访问，可以设计一个单例类，负责所有的数据表的映射处理\n缺点：\n1.一般没有接口，扩展困难，\n","source":"_posts/singleton.md","raw":"---\ntitle: 单例模式\ndate: 2017-03-16 21:40:35\nupdated: 2017-03-16 23:30:07\ntags: [设计模式,单例]\ncategories: 设计模式\nimg: /img/singleton.jpg\n---\n一、概览\n* 设计原则：无\n* 常用场景：应用中有对象需要是全局的且唯一\n* 使用概率：99.99999%\n* 复杂度：低\n* 变化点：无\n* 选择关键点：一个对象在应用中出现多个实例是否会引起逻辑上或者是程序上的错误\n* 逆鳞：在以为是单例的情况下，却产生了多个实例\n* 相关设计模式：\n    * 原型模式：单例模式是只有一个实例，原型模式每拷贝一次都会创造一个新的实例。\n\n二、定义：单例模式：单例模式保证一个类只有一个实例，同时这个类还必须提供一个访问该类的全局访问点。\n\n三、UML类图\n\n ![创建应用][id]\n     \n [id]: /img/singleton.jpg \"create\"\n单例模式的三个要点：\n1. 需要一个保存类的唯一实例的静态成员变量\n2. 构造函数和克隆函数必须私有\n3. 必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用\n\n那么为什么要使用PHP单例模式？\n\nPHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。\n\n\n单例模式代码：\n{% codeblock %}\n<?php\n\n/**\n * class Singleton\n */\nclass Singleton\n{\n    /**\n     * @var Singleton reference to singleton instance\n     */\n    private static $instance;\n\n    /**\n     * gets the instance via lazy initialization (created on first usage)\n     *\n     * @return self\n     */\n    public static function getInstance()\n    {\n\n        if (null === static::$instance) {\n            static::$instance = new static;                          //static 相当于self\n        }\n\n        return static::$instance;\n    }\n\n    /**\n     * is not allowed to call from outside: private!\n     *\n     */\n    private function __construct()\n    {\n\n    }\n\n    /**\n     * prevent the instance from being cloned\n     *\n     * @return void\n     */\n    private function __clone()\n    {\n\n    }\n\n    /**\n     * prevent from being unserialized\n     *\n     * @return void\n     */\n    private function __wakeup()\n    {\n\n    }\n}\n{% endcodeblock %}\n\n\n单例模式优缺点：\n优点：\n1. 由于在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁的创建，销毁时\n2. 减少了系统的性能开销，读取配置，产生其他依赖对象时，可以通过在应用启动时直接产生一个单例对象。\n3. 可以避免对资源的多重占用，比如写文件动作，由于只有一个实例在内存中，可以避免对同一个资源文件的同时写操作\n4. 可以在系统设置全局的访问点，优化和共享资源访问，可以设计一个单例类，负责所有的数据表的映射处理\n缺点：\n1.一般没有接口，扩展困难，\n","slug":"singleton","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb09000188a9knxzkmpqh","content":"<p>一、概览</p>\n<ul>\n<li>设计原则：无</li>\n<li>常用场景：应用中有对象需要是全局的且唯一</li>\n<li>使用概率：99.99999%</li>\n<li>复杂度：低</li>\n<li>变化点：无</li>\n<li>选择关键点：一个对象在应用中出现多个实例是否会引起逻辑上或者是程序上的错误</li>\n<li>逆鳞：在以为是单例的情况下，却产生了多个实例</li>\n<li>相关设计模式：<ul>\n<li>原型模式：单例模式是只有一个实例，原型模式每拷贝一次都会创造一个新的实例。</li>\n</ul>\n</li>\n</ul>\n<p>二、定义：单例模式：单例模式保证一个类只有一个实例，同时这个类还必须提供一个访问该类的全局访问点。</p>\n<p>三、UML类图</p>\n<p> <img src=\"/img/singleton.jpg\" alt=\"创建应用\" title=\"create\"></p>\n<p>单例模式的三个要点：</p>\n<ol>\n<li>需要一个保存类的唯一实例的静态成员变量</li>\n<li>构造函数和克隆函数必须私有</li>\n<li>必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用</li>\n</ol>\n<p>那么为什么要使用PHP单例模式？</p>\n<p>PHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。</p>\n<p>单例模式代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * class Singleton</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Singleton reference to singleton instance</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * gets the instance via lazy initialization (created on first usage)</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> self</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> === <span class=\"keyword\">static</span>::$instance) &#123;</div><div class=\"line\">            <span class=\"keyword\">static</span>::$instance = <span class=\"keyword\">new</span> <span class=\"keyword\">static</span>;                          <span class=\"comment\">//static 相当于self</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">static</span>::$instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * is not allowed to call from outside: private!</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * prevent the instance from being cloned</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * prevent from being unserialized</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>单例模式优缺点：<br>优点：</p>\n<ol>\n<li>由于在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁的创建，销毁时</li>\n<li>减少了系统的性能开销，读取配置，产生其他依赖对象时，可以通过在应用启动时直接产生一个单例对象。</li>\n<li>可以避免对资源的多重占用，比如写文件动作，由于只有一个实例在内存中，可以避免对同一个资源文件的同时写操作</li>\n<li>可以在系统设置全局的访问点，优化和共享资源访问，可以设计一个单例类，负责所有的数据表的映射处理<br>缺点：<br>1.一般没有接口，扩展困难，</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>一、概览</p>\n<ul>\n<li>设计原则：无</li>\n<li>常用场景：应用中有对象需要是全局的且唯一</li>\n<li>使用概率：99.99999%</li>\n<li>复杂度：低</li>\n<li>变化点：无</li>\n<li>选择关键点：一个对象在应用中出现多个实例是否会引起逻辑上或者是程序上的错误</li>\n<li>逆鳞：在以为是单例的情况下，却产生了多个实例</li>\n<li>相关设计模式：<ul>\n<li>原型模式：单例模式是只有一个实例，原型模式每拷贝一次都会创造一个新的实例。</li>\n</ul>\n</li>\n</ul>\n<p>二、定义：单例模式：单例模式保证一个类只有一个实例，同时这个类还必须提供一个访问该类的全局访问点。</p>\n<p>三、UML类图</p>\n<p> <img src=\"/img/singleton.jpg\" alt=\"创建应用\" title=\"create\"></p>\n<p>单例模式的三个要点：</p>\n<ol>\n<li>需要一个保存类的唯一实例的静态成员变量</li>\n<li>构造函数和克隆函数必须私有</li>\n<li>必须提供一个访问这个实例的公共静态方法，从而返回唯一实例的一个引用</li>\n</ol>\n<p>那么为什么要使用PHP单例模式？</p>\n<p>PHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。</p>\n<p>单例模式代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * class Singleton</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></div><div class=\"line\"><span class=\"class\"></span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Singleton reference to singleton instance</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $instance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * gets the instance via lazy initialization (created on first usage)</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> self</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> === <span class=\"keyword\">static</span>::$instance) &#123;</div><div class=\"line\">            <span class=\"keyword\">static</span>::$instance = <span class=\"keyword\">new</span> <span class=\"keyword\">static</span>;                          <span class=\"comment\">//static 相当于self</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">static</span>::$instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * is not allowed to call from outside: private!</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * prevent the instance from being cloned</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">     * prevent from being unserialized</span></div><div class=\"line\"><span class=\"comment\">     *</span></div><div class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></div><div class=\"line\"><span class=\"comment\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"function\">    </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>单例模式优缺点：<br>优点：</p>\n<ol>\n<li>由于在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁的创建，销毁时</li>\n<li>减少了系统的性能开销，读取配置，产生其他依赖对象时，可以通过在应用启动时直接产生一个单例对象。</li>\n<li>可以避免对资源的多重占用，比如写文件动作，由于只有一个实例在内存中，可以避免对同一个资源文件的同时写操作</li>\n<li>可以在系统设置全局的访问点，优化和共享资源访问，可以设计一个单例类，负责所有的数据表的映射处理<br>缺点：<br>1.一般没有接口，扩展困难，</li>\n</ol>\n"},{"title":"SQL注入","date":"2017-09-07T14:01:39.000Z","_content":"### 一、目的简介\n * 让这些输入被认为是一个SQL查询，或者是查询的一部分,针对程序员编程的忽略通过SQL语句，实现无账号登录甚至篡改数据库。\n\n### 二、SQL注入攻击的总体思路：\n1. 寻找到SQL注入的位置\n2. 判断服务器类型和后台数据库类型\n3. 针对不同的服务器和数据库特点进行SQL注入攻击\n\n### 三、SQL注入攻击实例\n```php\n    免账号登录：\n    sql = \"select * from user_table where username=' \"+userName+\" ' and password=' \"+password+\" '\";\n    当用户输入的用户名为 ‘or 1=1 --\n    sql = \"select * from user_table where username=‘’ or 1=1 -- ' and password=' \"+password+\" ‘\";\n    由于1=1肯定会成功 ，--是注释后面的语句不用执行，因此不用账号密码就可以登录成功。\n    当用户输入的用户名为 ' ;DROP DATABASE (DB Name) —'\n    以上语句则会删除数据库\n```\n\n### 四、防范：\n* 服务器配置防范\n    1. 关闭注册全局变量，在PHP中提交的变量，包括post或者get提交的变量，都将自动注册为全局变量，能够直接访问，对服务器是不安全的，所以应该关闭 register_globals=off\n    2. 打开magic_quotes_gpc 防止SQL注入。 默认是关闭的，如果打开后将自动把用户提交对SQL的查询进行转换，比如把’ 转为\\’ 等\n    3. 错误信息控制 一般数据库会在没有连接到数据库或者在其他情况下会有提示错误，一般错误信息中会包含PHP脚本当前的路径信息或者查询的SQL语句信息，因此display_errors = off ，关闭错误信息后把错误日志打开\n* PHP方法：\n    1. addslashes() 强行加\\\n    2. mysql_real_escape_string()会判断字符集，但是对PHP版本有要求\n    3. mysql_escape_string() 不考虑连接的当前字符集","source":"_posts/sql-injection.md","raw":"---\ntitle: SQL注入\ndate: 2017-09-07 22:01:39\ntags: [安全，SQL注入]\ncategories: 安全\n---\n### 一、目的简介\n * 让这些输入被认为是一个SQL查询，或者是查询的一部分,针对程序员编程的忽略通过SQL语句，实现无账号登录甚至篡改数据库。\n\n### 二、SQL注入攻击的总体思路：\n1. 寻找到SQL注入的位置\n2. 判断服务器类型和后台数据库类型\n3. 针对不同的服务器和数据库特点进行SQL注入攻击\n\n### 三、SQL注入攻击实例\n```php\n    免账号登录：\n    sql = \"select * from user_table where username=' \"+userName+\" ' and password=' \"+password+\" '\";\n    当用户输入的用户名为 ‘or 1=1 --\n    sql = \"select * from user_table where username=‘’ or 1=1 -- ' and password=' \"+password+\" ‘\";\n    由于1=1肯定会成功 ，--是注释后面的语句不用执行，因此不用账号密码就可以登录成功。\n    当用户输入的用户名为 ' ;DROP DATABASE (DB Name) —'\n    以上语句则会删除数据库\n```\n\n### 四、防范：\n* 服务器配置防范\n    1. 关闭注册全局变量，在PHP中提交的变量，包括post或者get提交的变量，都将自动注册为全局变量，能够直接访问，对服务器是不安全的，所以应该关闭 register_globals=off\n    2. 打开magic_quotes_gpc 防止SQL注入。 默认是关闭的，如果打开后将自动把用户提交对SQL的查询进行转换，比如把’ 转为\\’ 等\n    3. 错误信息控制 一般数据库会在没有连接到数据库或者在其他情况下会有提示错误，一般错误信息中会包含PHP脚本当前的路径信息或者查询的SQL语句信息，因此display_errors = off ，关闭错误信息后把错误日志打开\n* PHP方法：\n    1. addslashes() 强行加\\\n    2. mysql_real_escape_string()会判断字符集，但是对PHP版本有要求\n    3. mysql_escape_string() 不考虑连接的当前字符集","slug":"sql-injection","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb093001c8a9kyls9nafm","content":"<h3 id=\"一、目的简介\"><a href=\"#一、目的简介\" class=\"headerlink\" title=\"一、目的简介\"></a>一、目的简介</h3><ul>\n<li>让这些输入被认为是一个SQL查询，或者是查询的一部分,针对程序员编程的忽略通过SQL语句，实现无账号登录甚至篡改数据库。</li>\n</ul>\n<h3 id=\"二、SQL注入攻击的总体思路：\"><a href=\"#二、SQL注入攻击的总体思路：\" class=\"headerlink\" title=\"二、SQL注入攻击的总体思路：\"></a>二、SQL注入攻击的总体思路：</h3><ol>\n<li>寻找到SQL注入的位置</li>\n<li>判断服务器类型和后台数据库类型</li>\n<li>针对不同的服务器和数据库特点进行SQL注入攻击</li>\n</ol>\n<h3 id=\"三、SQL注入攻击实例\"><a href=\"#三、SQL注入攻击实例\" class=\"headerlink\" title=\"三、SQL注入攻击实例\"></a>三、SQL注入攻击实例</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">免账号登录：</div><div class=\"line\">sql = <span class=\"string\">\"select * from user_table where username=' \"</span>+userName+<span class=\"string\">\" ' and password=' \"</span>+password+<span class=\"string\">\" '\"</span>;</div><div class=\"line\">当用户输入的用户名为 ‘<span class=\"keyword\">or</span> <span class=\"number\">1</span>=<span class=\"number\">1</span> --</div><div class=\"line\">sql = <span class=\"string\">\"select * from user_table where username=‘’ or 1=1 -- ' and password=' \"</span>+password+<span class=\"string\">\" ‘\"</span>;</div><div class=\"line\">由于<span class=\"number\">1</span>=<span class=\"number\">1</span>肯定会成功 ，--是注释后面的语句不用执行，因此不用账号密码就可以登录成功。</div><div class=\"line\">当用户输入的用户名为 <span class=\"string\">' ;DROP DATABASE (DB Name) —'</span></div><div class=\"line\">以上语句则会删除数据库</div></pre></td></tr></table></figure>\n<h3 id=\"四、防范：\"><a href=\"#四、防范：\" class=\"headerlink\" title=\"四、防范：\"></a>四、防范：</h3><ul>\n<li>服务器配置防范<ol>\n<li>关闭注册全局变量，在PHP中提交的变量，包括post或者get提交的变量，都将自动注册为全局变量，能够直接访问，对服务器是不安全的，所以应该关闭 register_globals=off</li>\n<li>打开magic_quotes_gpc 防止SQL注入。 默认是关闭的，如果打开后将自动把用户提交对SQL的查询进行转换，比如把’ 转为\\’ 等</li>\n<li>错误信息控制 一般数据库会在没有连接到数据库或者在其他情况下会有提示错误，一般错误信息中会包含PHP脚本当前的路径信息或者查询的SQL语句信息，因此display_errors = off ，关闭错误信息后把错误日志打开</li>\n</ol>\n</li>\n<li>PHP方法：<ol>\n<li>addslashes() 强行加\\</li>\n<li>mysql_real_escape_string()会判断字符集，但是对PHP版本有要求</li>\n<li>mysql_escape_string() 不考虑连接的当前字符集</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、目的简介\"><a href=\"#一、目的简介\" class=\"headerlink\" title=\"一、目的简介\"></a>一、目的简介</h3><ul>\n<li>让这些输入被认为是一个SQL查询，或者是查询的一部分,针对程序员编程的忽略通过SQL语句，实现无账号登录甚至篡改数据库。</li>\n</ul>\n<h3 id=\"二、SQL注入攻击的总体思路：\"><a href=\"#二、SQL注入攻击的总体思路：\" class=\"headerlink\" title=\"二、SQL注入攻击的总体思路：\"></a>二、SQL注入攻击的总体思路：</h3><ol>\n<li>寻找到SQL注入的位置</li>\n<li>判断服务器类型和后台数据库类型</li>\n<li>针对不同的服务器和数据库特点进行SQL注入攻击</li>\n</ol>\n<h3 id=\"三、SQL注入攻击实例\"><a href=\"#三、SQL注入攻击实例\" class=\"headerlink\" title=\"三、SQL注入攻击实例\"></a>三、SQL注入攻击实例</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">免账号登录：</div><div class=\"line\">sql = <span class=\"string\">\"select * from user_table where username=' \"</span>+userName+<span class=\"string\">\" ' and password=' \"</span>+password+<span class=\"string\">\" '\"</span>;</div><div class=\"line\">当用户输入的用户名为 ‘<span class=\"keyword\">or</span> <span class=\"number\">1</span>=<span class=\"number\">1</span> --</div><div class=\"line\">sql = <span class=\"string\">\"select * from user_table where username=‘’ or 1=1 -- ' and password=' \"</span>+password+<span class=\"string\">\" ‘\"</span>;</div><div class=\"line\">由于<span class=\"number\">1</span>=<span class=\"number\">1</span>肯定会成功 ，--是注释后面的语句不用执行，因此不用账号密码就可以登录成功。</div><div class=\"line\">当用户输入的用户名为 <span class=\"string\">' ;DROP DATABASE (DB Name) —'</span></div><div class=\"line\">以上语句则会删除数据库</div></pre></td></tr></table></figure>\n<h3 id=\"四、防范：\"><a href=\"#四、防范：\" class=\"headerlink\" title=\"四、防范：\"></a>四、防范：</h3><ul>\n<li>服务器配置防范<ol>\n<li>关闭注册全局变量，在PHP中提交的变量，包括post或者get提交的变量，都将自动注册为全局变量，能够直接访问，对服务器是不安全的，所以应该关闭 register_globals=off</li>\n<li>打开magic_quotes_gpc 防止SQL注入。 默认是关闭的，如果打开后将自动把用户提交对SQL的查询进行转换，比如把’ 转为\\’ 等</li>\n<li>错误信息控制 一般数据库会在没有连接到数据库或者在其他情况下会有提示错误，一般错误信息中会包含PHP脚本当前的路径信息或者查询的SQL语句信息，因此display_errors = off ，关闭错误信息后把错误日志打开</li>\n</ol>\n</li>\n<li>PHP方法：<ol>\n<li>addslashes() 强行加\\</li>\n<li>mysql_real_escape_string()会判断字符集，但是对PHP版本有要求</li>\n<li>mysql_escape_string() 不考虑连接的当前字符集</li>\n</ol>\n</li>\n</ul>\n"},{"title":"PHP字符串","date":"2017-09-20T08:28:52.000Z","_content":"\n>一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode \n\n一个字符串可以用以下四种方式表达：\n\n* 单引号\n* 双引号\n* Heredoc 语法结构\n* Nowdoc 语法结构（自 PHP 5.3.0 起）\n\n### 单引号\n>定义一个字符串的最简单的方法是用单引号把它包围起来('),当表达一个单引号自身，需要用反斜线(\\)来转义，表达一个反斜线，需要两个反斜线。其他任何方式出现的反斜线都被会当成反斜线本身。**单引号中的变量和除了转义(',\\)的其他特殊字符都不会被转义**\n\n```php\necho 'this is a simple string';\n\n// 可以录入多行\necho 'You can also have embedded newlines in \nstrings this way as it is\nokay to do';\necho 'Arnold once said: \"I\\'ll be back\"'; // 输出： Arnold once said: \"I'll be back\"   \\' 输出'\necho 'You deleted C:\\\\*.*?'; // 输出： You deleted C:\\*.*?\necho 'You deleted C:\\*.*?'; // 输出： You deleted C:\\*.*?\necho 'This will not expand: \\n a newline'; // 输出： This will not expand: \\n a newline  \\n不会被转义\necho 'Variables do not $expand $either'; // 输出： Variables do not $expand $either   变量不会被解析\n```\n\n### 双引号\n\n>定义一个字符串还可以包围在双引号(\")中，双引号中PHP会对一些特殊的字符进行解析  \\n,\\r,\\t,\\v,\\e,\\f,\\\\,\\$,\\\",\\[0-7]{1,3},\\x[0-9A-Fa-f]{1,2}  **双引号可以解析变量，除了前面的特殊字符其他字符的转义反斜线都会被显示出来**\n\n```php\n<?php\necho \"this is test\";   //this is test\necho \"this is \ntest\ntest \";  //this is test test \necho \"Arnold once said: \\\"I'll be back\\\"\"; //Arnold once said: \"I'll be back\"\necho \"You deleted C:\\\\*.*?\";  //You deleted C:\\*.*?\necho \"You deleted C:\\*.*?\";  You deleted C:\\*.*?\necho \"This will not expand: \\n a newline\";  //This will not expand: a newline\n$expand=\"one\";\n$either=\"two\";\necho \"Variables do not $expand $either\";  //Variables do not one two\n```\n\n### heredoc \n><<<EOT结构，注意结束标识符这行除了可能有一个分号外，绝对不能包含其他字符，不能缩进，不能有任何空白或制表符 **Heredoc 就像是没有使用双引号的双引号字符串，变量可以解析，转义序列也可以使用，也可以用来初始化静态变量和类的属性和常量**\n\n```php\n$str = <<<EOD\nExample of string\nspanning multiple lines\nusing heredoc syntax.\nEOD;\n//\n```\n\n### Nowdoc\n>类似于Heredoc,但是开始必须是<<<'EOT',标识符要用单引号引起来**变量并不会被解析**\n\n```PHP\n$str = <<<'EOD'\nExample of string\nspanning multiple lines\nusing nowdoc syntax.\nEOD;\n```\n\n### 字符串转换为数值\n\n>当一个字符串被当做一个数值来取值。如果该字符串没有包含'.','e','E' 并且其数字值在整型的范围之内，该字符串被当做整型来取值，其他所有情况下都被作为浮点数来取值。字符串的开始部分决定了它的值。\n\n```php\n<?php\n$foo = 1 + \"10.5\";                // $foo is float (11.5)\n$foo = 1 + \"-1.3e3\";              // $foo is float (-1299)\n$foo = 1 + \"bob-1.3e3\";           // $foo is integer (1)\n$foo = 1 + \"bob3\";                // $foo is integer (1)\n$foo = 1 + \"10 Small Pigs\";       // $foo is integer (11)\n$foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2)\n$foo = \"10.0 pigs \" + 1;          // $foo is float (11)\n$foo = \"10.0 pigs \" + 1.0;        // $foo is float (11) \n```\n\n### 转换成字符串\n\n* 布尔型的TRUE被转换成‘1’，FALSE被转换成‘0’\n* 整型，浮点型 被转换成数字的字面样式的string\n* 数组总是转换成字符串'Array'\n* 对象总是被转换成字符串 \"Object\"\n* 资源 resource 总会被转变成 \"Resource id #1\" 这种结构的字符串\n* NULL总是被转变成空字符串\n* 大部分的 PHP 值可以转变成 string 来永久保存，这被称作串行化，可以用函数 serialize() ，json_encode ()， var_export($items, true);都可以实现\n\n### 字符串编码\n**ASCII编码**\n>我们知道，一个二进制位(Bit)有0、1两种状态，一个字节(Byte)有8个二进制位，有256种状态，每种状态对应一个符号，就是256个符号，从0000000到11111111。计算机诞生于美国，早期的计算机使用者大多使用英文，上世纪60年代，美国制定了一套英文字符与二进制位的对应关系，称为**ASCII码**，沿用至今\n\n**GB2312和GBK编码**\n>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气 地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 中国人民看到这样很不错，于是就把这种汉字方案叫做 **“GB2312“**。GB2312 是对 ASCII 的中文扩展。\n\n>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。 后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字 符集里的内容。结果扩展之后的编码方案被称为 **GBK** 标准，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号\n\n\n**Unicode（万国码，国际码，统一码）**\n>随着计算机的流行，使用计算机的人越来越多，不仅限于美国，整个世界都在使用,因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码。正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。这就是\n**Unicode编码（Unique Code），也称统一码、万国码**。\n\n**UTF-8 和 Unicode的关系**\n>* Unicode是一种字符编码方法\r* 实际传输过程中, 不同系统平台的设计不一定一致\r* 不同的编码空间利用率不同\r* UTF-8是为了传输而设计\r* UTF-8是一种针对Unicode的可变长度字符编码\r* UTF-8是以8位为基本编码单位\n* 注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节\n\n**GB2312和GBK编码**\n>* GB2312由中国国家标准总局发布\r* 古汉语的罕用字和繁体字，GB2312不能处理\r* 收录的汉字已经覆盖中国大陆99.75%的使用频率。 \r* 注意GB2312/GBK是定长编码（ascii字符占1个字节）\r* GBK不是标准，它对罕见字，繁体字都支持\n\n**UTF8，GBK之间的转换与选择**\n>* GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换\n>* 优先选择UTF-8，对程序员有利\n>* 为了节省存储空间，选择GBK\r>* 考虑兼容其它系统，选择GBK\r>* 要给外国人看(韩国人)，就选 UTF-8\r>* 需要支持多语言，得选择UTF-8\r\n\n### 字符串函数\n**多字节转码函数 mbstring 和 iconv**\n\n* 优先选择mbstring \r* 为了追求速度，可以用iconv\r* mbstring功能更强大，考虑的编码类型更多\r* mbstring有55个函数，iconv只有11个\n\n**输入输出函数**\n\n* echo —输出一个或多个字符串\r* print —输出字符串\r* vprintf —输出格式化字符串\r* printf —将格式化后的字符串写入到流\r* sprintf —返回格式化字符串\r* vsprintf —同sprintf，但是接收一个数组参数\r* sscanf —根据指定格式解析输入的字符\n\n**查找字符位置函数**\n\n* strpos — 查找字符串首次出现的位置\r* stripos —不区分大小写\r* strrpos — 查找最后一次出现的位置\r* strripos —不区分大小写\n\n**字符串替换函数**\n\n* str_replace — 子字符串替换\r* substr_replace — 替换字符串的子串\n\n**字符串分割和合并相关**\n\n* explode — 使用一个字符串分割另一个字符串\r* implode — 将一个一维数组的值转化为字符串\r* join — 别名 implode\r* str_getcsv — 解析 CSV 字符串为一个数组\r* str_split — 将字符串转换为数组\r* strtok — 标记分割字符串\r* chunk_split — 将字符串分割成小块\r* parse_str — 将字符串解析成多个变量\n\n**字符串去除空白字符**\n\n * trim — 去除字符串首尾处的空白字符\r * ltrim — 删除字符串开头的空白字符\r * rtrim — 删除字符串末端的空白字符\n\n**HTML代码相关**\n \n* nl2br — 换行转为<br />\r* htmlentities —转化所有可能的html字符(编码)\r* html_entity_decode\r* htmlspecialchars — 转化html几个特有的字符\r* htmlspecialchars_decode\n\n**数据库相关**\n\n* addslashes — 使用反斜线引用字符串\r* stripslashes — 反引用\r* addcslashes — 转义制定字符串中的字符\r* stripcslashes — 反引用\r* mysql_real_escape_string\n\n**URL字符串函数**\n\n* base64_decode — 对使用 base64 编码的数据进行解码\r* base64_encode — 使用 MIME base64 对数据进行编码\r* http_build_query — 生成 URL-encode 之后的请求字符串\r* parse_url — 解析 URL，返回其组成部分\r* rawurldecode — 对已编码的 URL 字符串进行解码\r* rawurlencode — 按照 RFC 1738 对 URL 进行编码\r* urldecode — 解码已编码的 URL 字符串\r* urlencode — 编码 URL 字符串\n\n**字符类型函数**\n\r* ctype_alpha    是否字母 ，全部是才返回true，否则返回false\r* ctype_lower    是否小写 ，全部是才返回true，否则返回false\r* ctype_upper   是否大写 ，全部是才返回true，否则返回false\r* ctype_digit     是否数字 ，全部是才返回true，否则返回false\n\n### 字符串安全处理\n```php\n//过滤危险的HTML(默认级别)\n$str = preg_replace(\"#script:#i\", \"s c r i p t :\", $str);\n$str = preg_replace(\"#[\\/]{0,1}(link|meta|ifr|fra|src)[^>]*#isU\", '', $str);\n$str = preg_replace(\"#[\\r\\n\\t]{1,}#\", '', $str);\n\n//完全禁止HTML并转换一些不安全字符串\n$str = addslashes(htmlspecialchars(stripcslashes($str)));\n$str = preg_replace(\"#eval#i\", 'e v a l', $str);\n$str = preg_replace(\"#union#i\", 'u n i o n', $str);\n$str = preg_replace(\"#concat#i\", 'c o n c a t', $str);\n$str = preg_replace(\"#--#\", '- - ', $str);\n$str = preg_replace(\"#[\\r\\n\\r]{1,}#\", '', $str);\n```\r\r\r\r\r\r\r\r\r","source":"_posts/string.md","raw":"---\ntitle: PHP字符串\ndate: 2017-09-20 16:28:52\ncategories: PHP\ntags: [PHP,字符串]\n\n---\n\n>一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode \n\n一个字符串可以用以下四种方式表达：\n\n* 单引号\n* 双引号\n* Heredoc 语法结构\n* Nowdoc 语法结构（自 PHP 5.3.0 起）\n\n### 单引号\n>定义一个字符串的最简单的方法是用单引号把它包围起来('),当表达一个单引号自身，需要用反斜线(\\)来转义，表达一个反斜线，需要两个反斜线。其他任何方式出现的反斜线都被会当成反斜线本身。**单引号中的变量和除了转义(',\\)的其他特殊字符都不会被转义**\n\n```php\necho 'this is a simple string';\n\n// 可以录入多行\necho 'You can also have embedded newlines in \nstrings this way as it is\nokay to do';\necho 'Arnold once said: \"I\\'ll be back\"'; // 输出： Arnold once said: \"I'll be back\"   \\' 输出'\necho 'You deleted C:\\\\*.*?'; // 输出： You deleted C:\\*.*?\necho 'You deleted C:\\*.*?'; // 输出： You deleted C:\\*.*?\necho 'This will not expand: \\n a newline'; // 输出： This will not expand: \\n a newline  \\n不会被转义\necho 'Variables do not $expand $either'; // 输出： Variables do not $expand $either   变量不会被解析\n```\n\n### 双引号\n\n>定义一个字符串还可以包围在双引号(\")中，双引号中PHP会对一些特殊的字符进行解析  \\n,\\r,\\t,\\v,\\e,\\f,\\\\,\\$,\\\",\\[0-7]{1,3},\\x[0-9A-Fa-f]{1,2}  **双引号可以解析变量，除了前面的特殊字符其他字符的转义反斜线都会被显示出来**\n\n```php\n<?php\necho \"this is test\";   //this is test\necho \"this is \ntest\ntest \";  //this is test test \necho \"Arnold once said: \\\"I'll be back\\\"\"; //Arnold once said: \"I'll be back\"\necho \"You deleted C:\\\\*.*?\";  //You deleted C:\\*.*?\necho \"You deleted C:\\*.*?\";  You deleted C:\\*.*?\necho \"This will not expand: \\n a newline\";  //This will not expand: a newline\n$expand=\"one\";\n$either=\"two\";\necho \"Variables do not $expand $either\";  //Variables do not one two\n```\n\n### heredoc \n><<<EOT结构，注意结束标识符这行除了可能有一个分号外，绝对不能包含其他字符，不能缩进，不能有任何空白或制表符 **Heredoc 就像是没有使用双引号的双引号字符串，变量可以解析，转义序列也可以使用，也可以用来初始化静态变量和类的属性和常量**\n\n```php\n$str = <<<EOD\nExample of string\nspanning multiple lines\nusing heredoc syntax.\nEOD;\n//\n```\n\n### Nowdoc\n>类似于Heredoc,但是开始必须是<<<'EOT',标识符要用单引号引起来**变量并不会被解析**\n\n```PHP\n$str = <<<'EOD'\nExample of string\nspanning multiple lines\nusing nowdoc syntax.\nEOD;\n```\n\n### 字符串转换为数值\n\n>当一个字符串被当做一个数值来取值。如果该字符串没有包含'.','e','E' 并且其数字值在整型的范围之内，该字符串被当做整型来取值，其他所有情况下都被作为浮点数来取值。字符串的开始部分决定了它的值。\n\n```php\n<?php\n$foo = 1 + \"10.5\";                // $foo is float (11.5)\n$foo = 1 + \"-1.3e3\";              // $foo is float (-1299)\n$foo = 1 + \"bob-1.3e3\";           // $foo is integer (1)\n$foo = 1 + \"bob3\";                // $foo is integer (1)\n$foo = 1 + \"10 Small Pigs\";       // $foo is integer (11)\n$foo = 4 + \"10.2 Little Piggies\"; // $foo is float (14.2)\n$foo = \"10.0 pigs \" + 1;          // $foo is float (11)\n$foo = \"10.0 pigs \" + 1.0;        // $foo is float (11) \n```\n\n### 转换成字符串\n\n* 布尔型的TRUE被转换成‘1’，FALSE被转换成‘0’\n* 整型，浮点型 被转换成数字的字面样式的string\n* 数组总是转换成字符串'Array'\n* 对象总是被转换成字符串 \"Object\"\n* 资源 resource 总会被转变成 \"Resource id #1\" 这种结构的字符串\n* NULL总是被转变成空字符串\n* 大部分的 PHP 值可以转变成 string 来永久保存，这被称作串行化，可以用函数 serialize() ，json_encode ()， var_export($items, true);都可以实现\n\n### 字符串编码\n**ASCII编码**\n>我们知道，一个二进制位(Bit)有0、1两种状态，一个字节(Byte)有8个二进制位，有256种状态，每种状态对应一个符号，就是256个符号，从0000000到11111111。计算机诞生于美国，早期的计算机使用者大多使用英文，上世纪60年代，美国制定了一套英文字符与二进制位的对应关系，称为**ASCII码**，沿用至今\n\n**GB2312和GBK编码**\n>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气 地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 中国人民看到这样很不错，于是就把这种汉字方案叫做 **“GB2312“**。GB2312 是对 ASCII 的中文扩展。\n\n>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。 后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字 符集里的内容。结果扩展之后的编码方案被称为 **GBK** 标准，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号\n\n\n**Unicode（万国码，国际码，统一码）**\n>随着计算机的流行，使用计算机的人越来越多，不仅限于美国，整个世界都在使用,因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码。正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。这就是\n**Unicode编码（Unique Code），也称统一码、万国码**。\n\n**UTF-8 和 Unicode的关系**\n>* Unicode是一种字符编码方法\r* 实际传输过程中, 不同系统平台的设计不一定一致\r* 不同的编码空间利用率不同\r* UTF-8是为了传输而设计\r* UTF-8是一种针对Unicode的可变长度字符编码\r* UTF-8是以8位为基本编码单位\n* 注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节\n\n**GB2312和GBK编码**\n>* GB2312由中国国家标准总局发布\r* 古汉语的罕用字和繁体字，GB2312不能处理\r* 收录的汉字已经覆盖中国大陆99.75%的使用频率。 \r* 注意GB2312/GBK是定长编码（ascii字符占1个字节）\r* GBK不是标准，它对罕见字，繁体字都支持\n\n**UTF8，GBK之间的转换与选择**\n>* GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换\n>* 优先选择UTF-8，对程序员有利\n>* 为了节省存储空间，选择GBK\r>* 考虑兼容其它系统，选择GBK\r>* 要给外国人看(韩国人)，就选 UTF-8\r>* 需要支持多语言，得选择UTF-8\r\n\n### 字符串函数\n**多字节转码函数 mbstring 和 iconv**\n\n* 优先选择mbstring \r* 为了追求速度，可以用iconv\r* mbstring功能更强大，考虑的编码类型更多\r* mbstring有55个函数，iconv只有11个\n\n**输入输出函数**\n\n* echo —输出一个或多个字符串\r* print —输出字符串\r* vprintf —输出格式化字符串\r* printf —将格式化后的字符串写入到流\r* sprintf —返回格式化字符串\r* vsprintf —同sprintf，但是接收一个数组参数\r* sscanf —根据指定格式解析输入的字符\n\n**查找字符位置函数**\n\n* strpos — 查找字符串首次出现的位置\r* stripos —不区分大小写\r* strrpos — 查找最后一次出现的位置\r* strripos —不区分大小写\n\n**字符串替换函数**\n\n* str_replace — 子字符串替换\r* substr_replace — 替换字符串的子串\n\n**字符串分割和合并相关**\n\n* explode — 使用一个字符串分割另一个字符串\r* implode — 将一个一维数组的值转化为字符串\r* join — 别名 implode\r* str_getcsv — 解析 CSV 字符串为一个数组\r* str_split — 将字符串转换为数组\r* strtok — 标记分割字符串\r* chunk_split — 将字符串分割成小块\r* parse_str — 将字符串解析成多个变量\n\n**字符串去除空白字符**\n\n * trim — 去除字符串首尾处的空白字符\r * ltrim — 删除字符串开头的空白字符\r * rtrim — 删除字符串末端的空白字符\n\n**HTML代码相关**\n \n* nl2br — 换行转为<br />\r* htmlentities —转化所有可能的html字符(编码)\r* html_entity_decode\r* htmlspecialchars — 转化html几个特有的字符\r* htmlspecialchars_decode\n\n**数据库相关**\n\n* addslashes — 使用反斜线引用字符串\r* stripslashes — 反引用\r* addcslashes — 转义制定字符串中的字符\r* stripcslashes — 反引用\r* mysql_real_escape_string\n\n**URL字符串函数**\n\n* base64_decode — 对使用 base64 编码的数据进行解码\r* base64_encode — 使用 MIME base64 对数据进行编码\r* http_build_query — 生成 URL-encode 之后的请求字符串\r* parse_url — 解析 URL，返回其组成部分\r* rawurldecode — 对已编码的 URL 字符串进行解码\r* rawurlencode — 按照 RFC 1738 对 URL 进行编码\r* urldecode — 解码已编码的 URL 字符串\r* urlencode — 编码 URL 字符串\n\n**字符类型函数**\n\r* ctype_alpha    是否字母 ，全部是才返回true，否则返回false\r* ctype_lower    是否小写 ，全部是才返回true，否则返回false\r* ctype_upper   是否大写 ，全部是才返回true，否则返回false\r* ctype_digit     是否数字 ，全部是才返回true，否则返回false\n\n### 字符串安全处理\n```php\n//过滤危险的HTML(默认级别)\n$str = preg_replace(\"#script:#i\", \"s c r i p t :\", $str);\n$str = preg_replace(\"#[\\/]{0,1}(link|meta|ifr|fra|src)[^>]*#isU\", '', $str);\n$str = preg_replace(\"#[\\r\\n\\t]{1,}#\", '', $str);\n\n//完全禁止HTML并转换一些不安全字符串\n$str = addslashes(htmlspecialchars(stripcslashes($str)));\n$str = preg_replace(\"#eval#i\", 'e v a l', $str);\n$str = preg_replace(\"#union#i\", 'u n i o n', $str);\n$str = preg_replace(\"#concat#i\", 'c o n c a t', $str);\n$str = preg_replace(\"#--#\", '- - ', $str);\n$str = preg_replace(\"#[\\r\\n\\r]{1,}#\", '', $str);\n```\r\r\r\r\r\r\r\r\r","slug":"string","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb096001e8a9kxcwl5rmu","content":"<blockquote>\n<p>一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode </p>\n</blockquote>\n<p>一个字符串可以用以下四种方式表达：</p>\n<ul>\n<li>单引号</li>\n<li>双引号</li>\n<li>Heredoc 语法结构</li>\n<li>Nowdoc 语法结构（自 PHP 5.3.0 起）</li>\n</ul>\n<h3 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h3><blockquote>\n<p>定义一个字符串的最简单的方法是用单引号把它包围起来(‘),当表达一个单引号自身，需要用反斜线()来转义，表达一个反斜线，需要两个反斜线。其他任何方式出现的反斜线都被会当成反斜线本身。<strong>单引号中的变量和除了转义(‘,)的其他特殊字符都不会被转义</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'this is a simple string'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以录入多行</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'You can also have embedded newlines in </span></div><div class=\"line\"><span class=\"string\">strings this way as it is</span></div><div class=\"line\"><span class=\"string\">okay to do'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Arnold once said: \"I\\'ll be back\"'</span>; <span class=\"comment\">// 输出： Arnold once said: \"I'll be back\"   \\' 输出'</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'You deleted C:\\\\*.*?'</span>; <span class=\"comment\">// 输出： You deleted C:\\*.*?</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'You deleted C:\\*.*?'</span>; <span class=\"comment\">// 输出： You deleted C:\\*.*?</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'This will not expand: \\n a newline'</span>; <span class=\"comment\">// 输出： This will not expand: \\n a newline  \\n不会被转义</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Variables do not $expand $either'</span>; <span class=\"comment\">// 输出： Variables do not $expand $either   变量不会被解析</span></div></pre></td></tr></table></figure>\n<h3 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h3><blockquote>\n<p>定义一个字符串还可以包围在双引号(“)中，双引号中PHP会对一些特殊的字符进行解析  \\n,\\r,\\t,\\v,\\e,\\f,\\,\\$,\\”,[0-7]{1,3},\\x[0-9A-Fa-f]{1,2}  <strong>双引号可以解析变量，除了前面的特殊字符其他字符的转义反斜线都会被显示出来</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"this is test\"</span>;   <span class=\"comment\">//this is test</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"this is </span></div><div class=\"line\"><span class=\"string\">test</span></div><div class=\"line\"><span class=\"string\">test \"</span>;  <span class=\"comment\">//this is test test </span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Arnold once said: \\\"I'll be back\\\"\"</span>; <span class=\"comment\">//Arnold once said: \"I'll be back\"</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"You deleted C:\\\\*.*?\"</span>;  <span class=\"comment\">//You deleted C:\\*.*?</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"You deleted C:\\*.*?\"</span>;  You deleted C:\\*.*?</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"This will not expand: \\n a newline\"</span>;  <span class=\"comment\">//This will not expand: a newline</span></div><div class=\"line\">$expand=<span class=\"string\">\"one\"</span>;</div><div class=\"line\">$either=<span class=\"string\">\"two\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Variables do not $expand $either\"</span>;  <span class=\"comment\">//Variables do not one two</span></div></pre></td></tr></table></figure>\n<h3 id=\"heredoc\"><a href=\"#heredoc\" class=\"headerlink\" title=\"heredoc\"></a>heredoc</h3><blockquote>\n<p>&lt;&lt;&lt;EOT结构，注意结束标识符这行除了可能有一个分号外，绝对不能包含其他字符，不能缩进，不能有任何空白或制表符 <strong>Heredoc 就像是没有使用双引号的双引号字符串，变量可以解析，转义序列也可以使用，也可以用来初始化静态变量和类的属性和常量</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">&lt;&lt;&lt;EOD</span></div><div class=\"line\"><span class=\"string\">Example of string</span></div><div class=\"line\"><span class=\"string\">spanning multiple lines</span></div><div class=\"line\"><span class=\"string\">using heredoc syntax.</span></div><div class=\"line\"><span class=\"string\">EOD;</span></div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<h3 id=\"Nowdoc\"><a href=\"#Nowdoc\" class=\"headerlink\" title=\"Nowdoc\"></a>Nowdoc</h3><blockquote>\n<p>类似于Heredoc,但是开始必须是&lt;&lt;&lt;’EOT’,标识符要用单引号引起来<strong>变量并不会被解析</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">&lt;&lt;&lt;'EOD'</span></div><div class=\"line\"><span class=\"string\">Example of string</span></div><div class=\"line\"><span class=\"string\">spanning multiple lines</span></div><div class=\"line\"><span class=\"string\">using nowdoc syntax.</span></div><div class=\"line\"><span class=\"string\">EOD;</span></div></pre></td></tr></table></figure>\n<h3 id=\"字符串转换为数值\"><a href=\"#字符串转换为数值\" class=\"headerlink\" title=\"字符串转换为数值\"></a>字符串转换为数值</h3><blockquote>\n<p>当一个字符串被当做一个数值来取值。如果该字符串没有包含’.’,’e’,’E’ 并且其数字值在整型的范围之内，该字符串被当做整型来取值，其他所有情况下都被作为浮点数来取值。字符串的开始部分决定了它的值。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10.5\"</span>;                <span class=\"comment\">// $foo is float (11.5)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"-1.3e3\"</span>;              <span class=\"comment\">// $foo is float (-1299)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob-1.3e3\"</span>;           <span class=\"comment\">// $foo is integer (1)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob3\"</span>;                <span class=\"comment\">// $foo is integer (1)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10 Small Pigs\"</span>;       <span class=\"comment\">// $foo is integer (11)</span></div><div class=\"line\">$foo = <span class=\"number\">4</span> + <span class=\"string\">\"10.2 Little Piggies\"</span>; <span class=\"comment\">// $foo is float (14.2)</span></div><div class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1</span>;          <span class=\"comment\">// $foo is float (11)</span></div><div class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1.0</span>;        <span class=\"comment\">// $foo is float (11)</span></div></pre></td></tr></table></figure>\n<h3 id=\"转换成字符串\"><a href=\"#转换成字符串\" class=\"headerlink\" title=\"转换成字符串\"></a>转换成字符串</h3><ul>\n<li>布尔型的TRUE被转换成‘1’，FALSE被转换成‘0’</li>\n<li>整型，浮点型 被转换成数字的字面样式的string</li>\n<li>数组总是转换成字符串’Array’</li>\n<li>对象总是被转换成字符串 “Object”</li>\n<li>资源 resource 总会被转变成 “Resource id #1” 这种结构的字符串</li>\n<li>NULL总是被转变成空字符串</li>\n<li>大部分的 PHP 值可以转变成 string 来永久保存，这被称作串行化，可以用函数 serialize() ，json_encode ()， var_export($items, true);都可以实现</li>\n</ul>\n<h3 id=\"字符串编码\"><a href=\"#字符串编码\" class=\"headerlink\" title=\"字符串编码\"></a>字符串编码</h3><p><strong>ASCII编码</strong></p>\n<blockquote>\n<p>我们知道，一个二进制位(Bit)有0、1两种状态，一个字节(Byte)有8个二进制位，有256种状态，每种状态对应一个符号，就是256个符号，从0000000到11111111。计算机诞生于美国，早期的计算机使用者大多使用英文，上世纪60年代，美国制定了一套英文字符与二进制位的对应关系，称为<strong>ASCII码</strong>，沿用至今</p>\n</blockquote>\n<p><strong>GB2312和GBK编码</strong></p>\n<blockquote>\n<p>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气 地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 中国人民看到这样很不错，于是就把这种汉字方案叫做 <strong>“GB2312“</strong>。GB2312 是对 ASCII 的中文扩展。</p>\n<p>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。 后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字 符集里的内容。结果扩展之后的编码方案被称为 <strong>GBK</strong> 标准，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号</p>\n</blockquote>\n<p><strong>Unicode（万国码，国际码，统一码）</strong></p>\n<blockquote>\n<p>随着计算机的流行，使用计算机的人越来越多，不仅限于美国，整个世界都在使用,因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码。正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。这就是<br><strong>Unicode编码（Unique Code），也称统一码、万国码</strong>。</p>\n</blockquote>\n<p><strong>UTF-8 和 Unicode的关系</strong></p>\n<blockquote>\n<ul>\n<li>Unicode是一种字符编码方法</li>\n<li>实际传输过程中, 不同系统平台的设计不一定一致</li>\n<li>不同的编码空间利用率不同</li>\n<li>UTF-8是为了传输而设计</li>\n<li>UTF-8是一种针对Unicode的可变长度字符编码</li>\n<li>UTF-8是以8位为基本编码单位</li>\n<li>注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节</li>\n</ul>\n</blockquote>\n<p><strong>GB2312和GBK编码</strong></p>\n<blockquote>\n<ul>\n<li>GB2312由中国国家标准总局发布</li>\n<li>古汉语的罕用字和繁体字，GB2312不能处理</li>\n<li>收录的汉字已经覆盖中国大陆99.75%的使用频率。 </li>\n<li>注意GB2312/GBK是定长编码（ascii字符占1个字节）</li>\n<li>GBK不是标准，它对罕见字，繁体字都支持</li>\n</ul>\n</blockquote>\n<p><strong>UTF8，GBK之间的转换与选择</strong></p>\n<blockquote>\n<ul>\n<li>GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换</li>\n<li>优先选择UTF-8，对程序员有利</li>\n<li>为了节省存储空间，选择GBK</li>\n<li>考虑兼容其它系统，选择GBK</li>\n<li>要给外国人看(韩国人)，就选 UTF-8</li>\n<li>需要支持多语言，得选择UTF-8</li>\n</ul>\n</blockquote>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p><strong>多字节转码函数 mbstring 和 iconv</strong></p>\n<ul>\n<li>优先选择mbstring </li>\n<li>为了追求速度，可以用iconv</li>\n<li>mbstring功能更强大，考虑的编码类型更多</li>\n<li>mbstring有55个函数，iconv只有11个</li>\n</ul>\n<p><strong>输入输出函数</strong></p>\n<ul>\n<li>echo —输出一个或多个字符串</li>\n<li>print —输出字符串</li>\n<li>vprintf —输出格式化字符串</li>\n<li>printf —将格式化后的字符串写入到流</li>\n<li>sprintf —返回格式化字符串</li>\n<li>vsprintf —同sprintf，但是接收一个数组参数</li>\n<li>sscanf —根据指定格式解析输入的字符</li>\n</ul>\n<p><strong>查找字符位置函数</strong></p>\n<ul>\n<li>strpos — 查找字符串首次出现的位置</li>\n<li>stripos —不区分大小写</li>\n<li>strrpos — 查找最后一次出现的位置</li>\n<li>strripos —不区分大小写</li>\n</ul>\n<p><strong>字符串替换函数</strong></p>\n<ul>\n<li>str_replace — 子字符串替换</li>\n<li>substr_replace — 替换字符串的子串</li>\n</ul>\n<p><strong>字符串分割和合并相关</strong></p>\n<ul>\n<li>explode — 使用一个字符串分割另一个字符串</li>\n<li>implode — 将一个一维数组的值转化为字符串</li>\n<li>join — 别名 implode</li>\n<li>str_getcsv — 解析 CSV 字符串为一个数组</li>\n<li>str_split — 将字符串转换为数组</li>\n<li>strtok — 标记分割字符串</li>\n<li>chunk_split — 将字符串分割成小块</li>\n<li>parse_str — 将字符串解析成多个变量</li>\n</ul>\n<p><strong>字符串去除空白字符</strong></p>\n<ul>\n<li>trim — 去除字符串首尾处的空白字符</li>\n<li>ltrim — 删除字符串开头的空白字符</li>\n<li>rtrim — 删除字符串末端的空白字符</li>\n</ul>\n<p><strong>HTML代码相关</strong></p>\n<ul>\n<li>nl2br — 换行转为<br></li>\n<li>htmlentities —转化所有可能的html字符(编码)</li>\n<li>html_entity_decode</li>\n<li>htmlspecialchars — 转化html几个特有的字符</li>\n<li>htmlspecialchars_decode</li>\n</ul>\n<p><strong>数据库相关</strong></p>\n<ul>\n<li>addslashes — 使用反斜线引用字符串</li>\n<li>stripslashes — 反引用</li>\n<li>addcslashes — 转义制定字符串中的字符</li>\n<li>stripcslashes — 反引用</li>\n<li>mysql_real_escape_string</li>\n</ul>\n<p><strong>URL字符串函数</strong></p>\n<ul>\n<li>base64_decode — 对使用 base64 编码的数据进行解码</li>\n<li>base64_encode — 使用 MIME base64 对数据进行编码</li>\n<li>http_build_query — 生成 URL-encode 之后的请求字符串</li>\n<li>parse_url — 解析 URL，返回其组成部分</li>\n<li>rawurldecode — 对已编码的 URL 字符串进行解码</li>\n<li>rawurlencode — 按照 RFC 1738 对 URL 进行编码</li>\n<li>urldecode — 解码已编码的 URL 字符串</li>\n<li>urlencode — 编码 URL 字符串</li>\n</ul>\n<p><strong>字符类型函数</strong></p>\n<ul>\n<li>ctype_alpha    是否字母 ，全部是才返回true，否则返回false</li>\n<li>ctype_lower    是否小写 ，全部是才返回true，否则返回false</li>\n<li>ctype_upper   是否大写 ，全部是才返回true，否则返回false</li>\n<li>ctype_digit     是否数字 ，全部是才返回true，否则返回false</li>\n</ul>\n<h3 id=\"字符串安全处理\"><a href=\"#字符串安全处理\" class=\"headerlink\" title=\"字符串安全处理\"></a>字符串安全处理</h3><pre><code class=\"php\"><span class=\"comment\">//过滤危险的HTML(默认级别)</span>\n$str = preg_replace(<span class=\"string\">\"#script:#i\"</span>, <span class=\"string\">\"s c r i p t :\"</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#[\\/]{0,1}(link|meta|ifr|fra|src)[^&gt;]*#isU\"</span>, <span class=\"string\">''</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#[\\r\\n\\t]{1,}#\"</span>, <span class=\"string\">''</span>, $str);\n\n<span class=\"comment\">//完全禁止HTML并转换一些不安全字符串</span>\n$str = addslashes(htmlspecialchars(stripcslashes($str)));\n$str = preg_replace(<span class=\"string\">\"#eval#i\"</span>, <span class=\"string\">'e v a l'</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#union#i\"</span>, <span class=\"string\">'u n i o n'</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#concat#i\"</span>, <span class=\"string\">'c o n c a t'</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#--#\"</span>, <span class=\"string\">'- - '</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#[\\r\\n\\r]{1,}#\"</span>, <span class=\"string\">''</span>, $str);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode </p>\n</blockquote>\n<p>一个字符串可以用以下四种方式表达：</p>\n<ul>\n<li>单引号</li>\n<li>双引号</li>\n<li>Heredoc 语法结构</li>\n<li>Nowdoc 语法结构（自 PHP 5.3.0 起）</li>\n</ul>\n<h3 id=\"单引号\"><a href=\"#单引号\" class=\"headerlink\" title=\"单引号\"></a>单引号</h3><blockquote>\n<p>定义一个字符串的最简单的方法是用单引号把它包围起来(‘),当表达一个单引号自身，需要用反斜线()来转义，表达一个反斜线，需要两个反斜线。其他任何方式出现的反斜线都被会当成反斜线本身。<strong>单引号中的变量和除了转义(‘,)的其他特殊字符都不会被转义</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'this is a simple string'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以录入多行</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'You can also have embedded newlines in </span></div><div class=\"line\"><span class=\"string\">strings this way as it is</span></div><div class=\"line\"><span class=\"string\">okay to do'</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Arnold once said: \"I\\'ll be back\"'</span>; <span class=\"comment\">// 输出： Arnold once said: \"I'll be back\"   \\' 输出'</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'You deleted C:\\\\*.*?'</span>; <span class=\"comment\">// 输出： You deleted C:\\*.*?</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'You deleted C:\\*.*?'</span>; <span class=\"comment\">// 输出： You deleted C:\\*.*?</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'This will not expand: \\n a newline'</span>; <span class=\"comment\">// 输出： This will not expand: \\n a newline  \\n不会被转义</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Variables do not $expand $either'</span>; <span class=\"comment\">// 输出： Variables do not $expand $either   变量不会被解析</span></div></pre></td></tr></table></figure>\n<h3 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h3><blockquote>\n<p>定义一个字符串还可以包围在双引号(“)中，双引号中PHP会对一些特殊的字符进行解析  \\n,\\r,\\t,\\v,\\e,\\f,\\,\\$,\\”,[0-7]{1,3},\\x[0-9A-Fa-f]{1,2}  <strong>双引号可以解析变量，除了前面的特殊字符其他字符的转义反斜线都会被显示出来</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"this is test\"</span>;   <span class=\"comment\">//this is test</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"this is </span></div><div class=\"line\"><span class=\"string\">test</span></div><div class=\"line\"><span class=\"string\">test \"</span>;  <span class=\"comment\">//this is test test </span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Arnold once said: \\\"I'll be back\\\"\"</span>; <span class=\"comment\">//Arnold once said: \"I'll be back\"</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"You deleted C:\\\\*.*?\"</span>;  <span class=\"comment\">//You deleted C:\\*.*?</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"You deleted C:\\*.*?\"</span>;  You deleted C:\\*.*?</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"This will not expand: \\n a newline\"</span>;  <span class=\"comment\">//This will not expand: a newline</span></div><div class=\"line\">$expand=<span class=\"string\">\"one\"</span>;</div><div class=\"line\">$either=<span class=\"string\">\"two\"</span>;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Variables do not $expand $either\"</span>;  <span class=\"comment\">//Variables do not one two</span></div></pre></td></tr></table></figure>\n<h3 id=\"heredoc\"><a href=\"#heredoc\" class=\"headerlink\" title=\"heredoc\"></a>heredoc</h3><blockquote>\n<p>&lt;&lt;&lt;EOT结构，注意结束标识符这行除了可能有一个分号外，绝对不能包含其他字符，不能缩进，不能有任何空白或制表符 <strong>Heredoc 就像是没有使用双引号的双引号字符串，变量可以解析，转义序列也可以使用，也可以用来初始化静态变量和类的属性和常量</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">&lt;&lt;&lt;EOD</span></div><div class=\"line\"><span class=\"string\">Example of string</span></div><div class=\"line\"><span class=\"string\">spanning multiple lines</span></div><div class=\"line\"><span class=\"string\">using heredoc syntax.</span></div><div class=\"line\"><span class=\"string\">EOD;</span></div><div class=\"line\"><span class=\"comment\">//</span></div></pre></td></tr></table></figure>\n<h3 id=\"Nowdoc\"><a href=\"#Nowdoc\" class=\"headerlink\" title=\"Nowdoc\"></a>Nowdoc</h3><blockquote>\n<p>类似于Heredoc,但是开始必须是&lt;&lt;&lt;’EOT’,标识符要用单引号引起来<strong>变量并不会被解析</strong></p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$str = <span class=\"string\">&lt;&lt;&lt;'EOD'</span></div><div class=\"line\"><span class=\"string\">Example of string</span></div><div class=\"line\"><span class=\"string\">spanning multiple lines</span></div><div class=\"line\"><span class=\"string\">using nowdoc syntax.</span></div><div class=\"line\"><span class=\"string\">EOD;</span></div></pre></td></tr></table></figure>\n<h3 id=\"字符串转换为数值\"><a href=\"#字符串转换为数值\" class=\"headerlink\" title=\"字符串转换为数值\"></a>字符串转换为数值</h3><blockquote>\n<p>当一个字符串被当做一个数值来取值。如果该字符串没有包含’.’,’e’,’E’ 并且其数字值在整型的范围之内，该字符串被当做整型来取值，其他所有情况下都被作为浮点数来取值。字符串的开始部分决定了它的值。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10.5\"</span>;                <span class=\"comment\">// $foo is float (11.5)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"-1.3e3\"</span>;              <span class=\"comment\">// $foo is float (-1299)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob-1.3e3\"</span>;           <span class=\"comment\">// $foo is integer (1)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob3\"</span>;                <span class=\"comment\">// $foo is integer (1)</span></div><div class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10 Small Pigs\"</span>;       <span class=\"comment\">// $foo is integer (11)</span></div><div class=\"line\">$foo = <span class=\"number\">4</span> + <span class=\"string\">\"10.2 Little Piggies\"</span>; <span class=\"comment\">// $foo is float (14.2)</span></div><div class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1</span>;          <span class=\"comment\">// $foo is float (11)</span></div><div class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1.0</span>;        <span class=\"comment\">// $foo is float (11)</span></div></pre></td></tr></table></figure>\n<h3 id=\"转换成字符串\"><a href=\"#转换成字符串\" class=\"headerlink\" title=\"转换成字符串\"></a>转换成字符串</h3><ul>\n<li>布尔型的TRUE被转换成‘1’，FALSE被转换成‘0’</li>\n<li>整型，浮点型 被转换成数字的字面样式的string</li>\n<li>数组总是转换成字符串’Array’</li>\n<li>对象总是被转换成字符串 “Object”</li>\n<li>资源 resource 总会被转变成 “Resource id #1” 这种结构的字符串</li>\n<li>NULL总是被转变成空字符串</li>\n<li>大部分的 PHP 值可以转变成 string 来永久保存，这被称作串行化，可以用函数 serialize() ，json_encode ()， var_export($items, true);都可以实现</li>\n</ul>\n<h3 id=\"字符串编码\"><a href=\"#字符串编码\" class=\"headerlink\" title=\"字符串编码\"></a>字符串编码</h3><p><strong>ASCII编码</strong></p>\n<blockquote>\n<p>我们知道，一个二进制位(Bit)有0、1两种状态，一个字节(Byte)有8个二进制位，有256种状态，每种状态对应一个符号，就是256个符号，从0000000到11111111。计算机诞生于美国，早期的计算机使用者大多使用英文，上世纪60年代，美国制定了一套英文字符与二进制位的对应关系，称为<strong>ASCII码</strong>，沿用至今</p>\n</blockquote>\n<p><strong>GB2312和GBK编码</strong></p>\n<blockquote>\n<p>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气 地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 中国人民看到这样很不错，于是就把这种汉字方案叫做 <strong>“GB2312“</strong>。GB2312 是对 ASCII 的中文扩展。</p>\n<p>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。 后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字 符集里的内容。结果扩展之后的编码方案被称为 <strong>GBK</strong> 标准，GBK包括了GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号</p>\n</blockquote>\n<p><strong>Unicode（万国码，国际码，统一码）</strong></p>\n<blockquote>\n<p>随着计算机的流行，使用计算机的人越来越多，不仅限于美国，整个世界都在使用,因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码。正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号 的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “unicode“。这就是<br><strong>Unicode编码（Unique Code），也称统一码、万国码</strong>。</p>\n</blockquote>\n<p><strong>UTF-8 和 Unicode的关系</strong></p>\n<blockquote>\n<ul>\n<li>Unicode是一种字符编码方法</li>\n<li>实际传输过程中, 不同系统平台的设计不一定一致</li>\n<li>不同的编码空间利用率不同</li>\n<li>UTF-8是为了传输而设计</li>\n<li>UTF-8是一种针对Unicode的可变长度字符编码</li>\n<li>UTF-8是以8位为基本编码单位</li>\n<li>注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节</li>\n</ul>\n</blockquote>\n<p><strong>GB2312和GBK编码</strong></p>\n<blockquote>\n<ul>\n<li>GB2312由中国国家标准总局发布</li>\n<li>古汉语的罕用字和繁体字，GB2312不能处理</li>\n<li>收录的汉字已经覆盖中国大陆99.75%的使用频率。 </li>\n<li>注意GB2312/GBK是定长编码（ascii字符占1个字节）</li>\n<li>GBK不是标准，它对罕见字，繁体字都支持</li>\n</ul>\n</blockquote>\n<p><strong>UTF8，GBK之间的转换与选择</strong></p>\n<blockquote>\n<ul>\n<li>GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换</li>\n<li>优先选择UTF-8，对程序员有利</li>\n<li>为了节省存储空间，选择GBK</li>\n<li>考虑兼容其它系统，选择GBK</li>\n<li>要给外国人看(韩国人)，就选 UTF-8</li>\n<li>需要支持多语言，得选择UTF-8</li>\n</ul>\n</blockquote>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p><strong>多字节转码函数 mbstring 和 iconv</strong></p>\n<ul>\n<li>优先选择mbstring </li>\n<li>为了追求速度，可以用iconv</li>\n<li>mbstring功能更强大，考虑的编码类型更多</li>\n<li>mbstring有55个函数，iconv只有11个</li>\n</ul>\n<p><strong>输入输出函数</strong></p>\n<ul>\n<li>echo —输出一个或多个字符串</li>\n<li>print —输出字符串</li>\n<li>vprintf —输出格式化字符串</li>\n<li>printf —将格式化后的字符串写入到流</li>\n<li>sprintf —返回格式化字符串</li>\n<li>vsprintf —同sprintf，但是接收一个数组参数</li>\n<li>sscanf —根据指定格式解析输入的字符</li>\n</ul>\n<p><strong>查找字符位置函数</strong></p>\n<ul>\n<li>strpos — 查找字符串首次出现的位置</li>\n<li>stripos —不区分大小写</li>\n<li>strrpos — 查找最后一次出现的位置</li>\n<li>strripos —不区分大小写</li>\n</ul>\n<p><strong>字符串替换函数</strong></p>\n<ul>\n<li>str_replace — 子字符串替换</li>\n<li>substr_replace — 替换字符串的子串</li>\n</ul>\n<p><strong>字符串分割和合并相关</strong></p>\n<ul>\n<li>explode — 使用一个字符串分割另一个字符串</li>\n<li>implode — 将一个一维数组的值转化为字符串</li>\n<li>join — 别名 implode</li>\n<li>str_getcsv — 解析 CSV 字符串为一个数组</li>\n<li>str_split — 将字符串转换为数组</li>\n<li>strtok — 标记分割字符串</li>\n<li>chunk_split — 将字符串分割成小块</li>\n<li>parse_str — 将字符串解析成多个变量</li>\n</ul>\n<p><strong>字符串去除空白字符</strong></p>\n<ul>\n<li>trim — 去除字符串首尾处的空白字符</li>\n<li>ltrim — 删除字符串开头的空白字符</li>\n<li>rtrim — 删除字符串末端的空白字符</li>\n</ul>\n<p><strong>HTML代码相关</strong></p>\n<ul>\n<li>nl2br — 换行转为<br></li>\n<li>htmlentities —转化所有可能的html字符(编码)</li>\n<li>html_entity_decode</li>\n<li>htmlspecialchars — 转化html几个特有的字符</li>\n<li>htmlspecialchars_decode</li>\n</ul>\n<p><strong>数据库相关</strong></p>\n<ul>\n<li>addslashes — 使用反斜线引用字符串</li>\n<li>stripslashes — 反引用</li>\n<li>addcslashes — 转义制定字符串中的字符</li>\n<li>stripcslashes — 反引用</li>\n<li>mysql_real_escape_string</li>\n</ul>\n<p><strong>URL字符串函数</strong></p>\n<ul>\n<li>base64_decode — 对使用 base64 编码的数据进行解码</li>\n<li>base64_encode — 使用 MIME base64 对数据进行编码</li>\n<li>http_build_query — 生成 URL-encode 之后的请求字符串</li>\n<li>parse_url — 解析 URL，返回其组成部分</li>\n<li>rawurldecode — 对已编码的 URL 字符串进行解码</li>\n<li>rawurlencode — 按照 RFC 1738 对 URL 进行编码</li>\n<li>urldecode — 解码已编码的 URL 字符串</li>\n<li>urlencode — 编码 URL 字符串</li>\n</ul>\n<p><strong>字符类型函数</strong></p>\n<ul>\n<li>ctype_alpha    是否字母 ，全部是才返回true，否则返回false</li>\n<li>ctype_lower    是否小写 ，全部是才返回true，否则返回false</li>\n<li>ctype_upper   是否大写 ，全部是才返回true，否则返回false</li>\n<li>ctype_digit     是否数字 ，全部是才返回true，否则返回false</li>\n</ul>\n<h3 id=\"字符串安全处理\"><a href=\"#字符串安全处理\" class=\"headerlink\" title=\"字符串安全处理\"></a>字符串安全处理</h3><pre><code class=\"php\"><span class=\"comment\">//过滤危险的HTML(默认级别)</span>\n$str = preg_replace(<span class=\"string\">\"#script:#i\"</span>, <span class=\"string\">\"s c r i p t :\"</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#[\\/]{0,1}(link|meta|ifr|fra|src)[^&gt;]*#isU\"</span>, <span class=\"string\">''</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#[\\r\\n\\t]{1,}#\"</span>, <span class=\"string\">''</span>, $str);\n\n<span class=\"comment\">//完全禁止HTML并转换一些不安全字符串</span>\n$str = addslashes(htmlspecialchars(stripcslashes($str)));\n$str = preg_replace(<span class=\"string\">\"#eval#i\"</span>, <span class=\"string\">'e v a l'</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#union#i\"</span>, <span class=\"string\">'u n i o n'</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#concat#i\"</span>, <span class=\"string\">'c o n c a t'</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#--#\"</span>, <span class=\"string\">'- - '</span>, $str);\n$str = preg_replace(<span class=\"string\">\"#[\\r\\n\\r]{1,}#\"</span>, <span class=\"string\">''</span>, $str);\n</code></pre>\n"},{"title":"UML类图关系总结","date":"2017-09-07T14:18:11.000Z","_content":"在UML类图中，常见的有以下几种关系: 泛化（Generalization）,  实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)\n### 一、泛化（Generalization）\n【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。\n【箭头指向】：带三角箭头的实线，箭头指向父类\n  ![泛化][id]   \n  [id]: /img/generalization.jpg \"泛化\"\n \n### 二、实现（Realization）\n【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.\n【箭头指向】：带三角箭头的虚线，箭头指向接口\n  ![实现][id2]\n  [id2]: /img/realization.jpg \"实现\"\n  \n### 三、关联（Association)\n【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。\n【代码体现】：成员变量\n【箭头及指向】：带普通箭头的实心线，指向被拥有者\n ![关联][id3]\n [id3]: /img/association.jpg \"关联\"\n * 上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。 \n * 下图为自身关联： \n ![关联][id4]\n [id4]: /img/association2.jpg \"关联\"\n\n### 四、聚合（Aggregation）\n【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。\n聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。\n【代码体现】：成员变量\n【箭头及指向】：带空心菱形的实心线，菱形指向整体\n ![聚合][id5]\n [id5]: /img/aggregation.jpg \"聚合\"\n \n### 五、组合(Composition)\n【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。\n【代码体现】：成员变量\n【箭头及指向】：带实心菱形的实线，菱形指向整体\n ![组合][id6]\n [id6]: /img/composition.jpg \"组合\"\n\n### 六、依赖(Dependency)\n【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.\n【代码表现】：局部变量、方法的参数或者对静态方法的调用\n【箭头及指向】：带箭头的虚线，指向被使用者\n\n### 各种关系的强弱顺序：\n 泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖 \n 下面这张UML图，比较形象地展示了各种类图关系：\n ![各种类图关系][id7]\n [id7]: /img/dependency.jpg \"各种类图关系\"\n\n转自：http://blog.csdn.net/tianhai110/article/details/6339565","source":"_posts/uml.md","raw":"---\ntitle: UML类图关系总结\ndate: 2017-09-07 22:18:11\ntags: [UML,设计模式]\ncategories: 设计模式\n---\n在UML类图中，常见的有以下几种关系: 泛化（Generalization）,  实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)\n### 一、泛化（Generalization）\n【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。\n【箭头指向】：带三角箭头的实线，箭头指向父类\n  ![泛化][id]   \n  [id]: /img/generalization.jpg \"泛化\"\n \n### 二、实现（Realization）\n【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.\n【箭头指向】：带三角箭头的虚线，箭头指向接口\n  ![实现][id2]\n  [id2]: /img/realization.jpg \"实现\"\n  \n### 三、关联（Association)\n【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。\n【代码体现】：成员变量\n【箭头及指向】：带普通箭头的实心线，指向被拥有者\n ![关联][id3]\n [id3]: /img/association.jpg \"关联\"\n * 上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。 \n * 下图为自身关联： \n ![关联][id4]\n [id4]: /img/association2.jpg \"关联\"\n\n### 四、聚合（Aggregation）\n【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。\n聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。\n【代码体现】：成员变量\n【箭头及指向】：带空心菱形的实心线，菱形指向整体\n ![聚合][id5]\n [id5]: /img/aggregation.jpg \"聚合\"\n \n### 五、组合(Composition)\n【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。\n【代码体现】：成员变量\n【箭头及指向】：带实心菱形的实线，菱形指向整体\n ![组合][id6]\n [id6]: /img/composition.jpg \"组合\"\n\n### 六、依赖(Dependency)\n【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.\n【代码表现】：局部变量、方法的参数或者对静态方法的调用\n【箭头及指向】：带箭头的虚线，指向被使用者\n\n### 各种关系的强弱顺序：\n 泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖 \n 下面这张UML图，比较形象地展示了各种类图关系：\n ![各种类图关系][id7]\n [id7]: /img/dependency.jpg \"各种类图关系\"\n\n转自：http://blog.csdn.net/tianhai110/article/details/6339565","slug":"uml","published":1,"updated":"2017-09-23T04:12:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb09a001i8a9kwxsvy0fo","content":"<p>在UML类图中，常见的有以下几种关系: 泛化（Generalization）,  实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p>\n<h3 id=\"一、泛化（Generalization）\"><a href=\"#一、泛化（Generalization）\" class=\"headerlink\" title=\"一、泛化（Generalization）\"></a>一、泛化（Generalization）</h3><p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。<br>【箭头指向】：带三角箭头的实线，箭头指向父类<br>  <img src=\"/img/generalization.jpg\" alt=\"泛化\" title=\"泛化\">   </p>\n<h3 id=\"二、实现（Realization）\"><a href=\"#二、实现（Realization）\" class=\"headerlink\" title=\"二、实现（Realization）\"></a>二、实现（Realization）</h3><p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.<br>【箭头指向】：带三角箭头的虚线，箭头指向接口<br>  <img src=\"/img/realization.jpg\" alt=\"实现\" title=\"实现\"></p>\n<h3 id=\"三、关联（Association\"><a href=\"#三、关联（Association\" class=\"headerlink\" title=\"三、关联（Association)\"></a>三、关联（Association)</h3><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。<br>【代码体现】：成员变量<br>【箭头及指向】：带普通箭头的实心线，指向被拥有者<br> <img src=\"/img/association.jpg\" alt=\"关联\" title=\"关联\"></p>\n<ul>\n<li>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。 </li>\n<li>下图为自身关联：<br><img src=\"/img/association2.jpg\" alt=\"关联\" title=\"关联\"></li>\n</ul>\n<h3 id=\"四、聚合（Aggregation）\"><a href=\"#四、聚合（Aggregation）\" class=\"headerlink\" title=\"四、聚合（Aggregation）\"></a>四、聚合（Aggregation）</h3><p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。<br>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。<br>【代码体现】：成员变量<br>【箭头及指向】：带空心菱形的实心线，菱形指向整体<br> <img src=\"/img/aggregation.jpg\" alt=\"聚合\" title=\"聚合\"></p>\n<h3 id=\"五、组合-Composition\"><a href=\"#五、组合-Composition\" class=\"headerlink\" title=\"五、组合(Composition)\"></a>五、组合(Composition)</h3><p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。<br>【代码体现】：成员变量<br>【箭头及指向】：带实心菱形的实线，菱形指向整体<br> <img src=\"/img/composition.jpg\" alt=\"组合\" title=\"组合\"></p>\n<h3 id=\"六、依赖-Dependency\"><a href=\"#六、依赖-Dependency\" class=\"headerlink\" title=\"六、依赖(Dependency)\"></a>六、依赖(Dependency)</h3><p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.<br>【代码表现】：局部变量、方法的参数或者对静态方法的调用<br>【箭头及指向】：带箭头的虚线，指向被使用者</p>\n<h3 id=\"各种关系的强弱顺序：\"><a href=\"#各种关系的强弱顺序：\" class=\"headerlink\" title=\"各种关系的强弱顺序：\"></a>各种关系的强弱顺序：</h3><p> 泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖<br> 下面这张UML图，比较形象地展示了各种类图关系：<br> <img src=\"/img/dependency.jpg\" alt=\"各种类图关系\" title=\"各种类图关系\"></p>\n<p>转自：<a href=\"http://blog.csdn.net/tianhai110/article/details/6339565\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/tianhai110/article/details/6339565</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在UML类图中，常见的有以下几种关系: 泛化（Generalization）,  实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p>\n<h3 id=\"一、泛化（Generalization）\"><a href=\"#一、泛化（Generalization）\" class=\"headerlink\" title=\"一、泛化（Generalization）\"></a>一、泛化（Generalization）</h3><p>【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。<br>【箭头指向】：带三角箭头的实线，箭头指向父类<br>  <img src=\"/img/generalization.jpg\" alt=\"泛化\" title=\"泛化\">   </p>\n<h3 id=\"二、实现（Realization）\"><a href=\"#二、实现（Realization）\" class=\"headerlink\" title=\"二、实现（Realization）\"></a>二、实现（Realization）</h3><p>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.<br>【箭头指向】：带三角箭头的虚线，箭头指向接口<br>  <img src=\"/img/realization.jpg\" alt=\"实现\" title=\"实现\"></p>\n<h3 id=\"三、关联（Association\"><a href=\"#三、关联（Association\" class=\"headerlink\" title=\"三、关联（Association)\"></a>三、关联（Association)</h3><p>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。<br>【代码体现】：成员变量<br>【箭头及指向】：带普通箭头的实心线，指向被拥有者<br> <img src=\"/img/association.jpg\" alt=\"关联\" title=\"关联\"></p>\n<ul>\n<li>上图中，老师与学生是双向关联，老师有多名学生，学生也可能有多名老师。但学生与某课程间的关系为单向关联，一名学生可能要上多门课程，课程是个抽象的东西他不拥有学生。 </li>\n<li>下图为自身关联：<br><img src=\"/img/association2.jpg\" alt=\"关联\" title=\"关联\"></li>\n</ul>\n<h3 id=\"四、聚合（Aggregation）\"><a href=\"#四、聚合（Aggregation）\" class=\"headerlink\" title=\"四、聚合（Aggregation）\"></a>四、聚合（Aggregation）</h3><p>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。<br>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。<br>【代码体现】：成员变量<br>【箭头及指向】：带空心菱形的实心线，菱形指向整体<br> <img src=\"/img/aggregation.jpg\" alt=\"聚合\" title=\"聚合\"></p>\n<h3 id=\"五、组合-Composition\"><a href=\"#五、组合-Composition\" class=\"headerlink\" title=\"五、组合(Composition)\"></a>五、组合(Composition)</h3><p>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。<br>【代码体现】：成员变量<br>【箭头及指向】：带实心菱形的实线，菱形指向整体<br> <img src=\"/img/composition.jpg\" alt=\"组合\" title=\"组合\"></p>\n<h3 id=\"六、依赖-Dependency\"><a href=\"#六、依赖-Dependency\" class=\"headerlink\" title=\"六、依赖(Dependency)\"></a>六、依赖(Dependency)</h3><p>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.<br>【代码表现】：局部变量、方法的参数或者对静态方法的调用<br>【箭头及指向】：带箭头的虚线，指向被使用者</p>\n<h3 id=\"各种关系的强弱顺序：\"><a href=\"#各种关系的强弱顺序：\" class=\"headerlink\" title=\"各种关系的强弱顺序：\"></a>各种关系的强弱顺序：</h3><p> 泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖<br> 下面这张UML图，比较形象地展示了各种类图关系：<br> <img src=\"/img/dependency.jpg\" alt=\"各种类图关系\" title=\"各种类图关系\"></p>\n<p>转自：<a href=\"http://blog.csdn.net/tianhai110/article/details/6339565\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/tianhai110/article/details/6339565</a></p>\n"},{"title":"常用地址","date":"2017-03-17T05:16:04.000Z","updated":"2017-07-23T11:16:04.000Z","_content":"### 学习\n\n* 编程书籍大全 https://github.com/justjavac/free-programming-books-zh_CN\n* 编程书籍2 https://github.com/jobbole/awesome-programming-books\n* 廖雪峰官方网站 https://www.liaoxuefeng.com/\n* 牛客网 https://www.nowcoder.com/\n* PHP之道 https://laravel-china.github.io/php-the-right-way/\n* 啊哈磊算法 http://ahalei.blog.51cto.com/\n* PHP手册 http://php.net/manual/zh/index.php\n* 深入PHP内核 http://www.php-internals.com/book/\n* 实验楼 https://www.shiyanlou.com/\n\n### 工具\n\n* json校验 http://www.bejson.com/\n* 时间戳转换 http://tool.chinaz.com/Tools/unixtime.aspx\n* 正则表达式在线验证 http://regex.zjmainstay.cn/\n* PHP模拟器 https://3v4l.org/BIsAB\n* 在线流程图 https://www.processon.com/\n* 住房公积金 http://www.bjgjj.gov.cn/\n* 社保查询 http://www.bjrbj.gov.cn/csibiz/home/#\n","source":"_posts/used-address.md","raw":"---\ntitle: 常用地址\ndate: 2017-03-17 13:16:04\nupdated: 2017-07-23 19:16:04\ntags: 其他\ncategories: 其他\n\n---\n### 学习\n\n* 编程书籍大全 https://github.com/justjavac/free-programming-books-zh_CN\n* 编程书籍2 https://github.com/jobbole/awesome-programming-books\n* 廖雪峰官方网站 https://www.liaoxuefeng.com/\n* 牛客网 https://www.nowcoder.com/\n* PHP之道 https://laravel-china.github.io/php-the-right-way/\n* 啊哈磊算法 http://ahalei.blog.51cto.com/\n* PHP手册 http://php.net/manual/zh/index.php\n* 深入PHP内核 http://www.php-internals.com/book/\n* 实验楼 https://www.shiyanlou.com/\n\n### 工具\n\n* json校验 http://www.bejson.com/\n* 时间戳转换 http://tool.chinaz.com/Tools/unixtime.aspx\n* 正则表达式在线验证 http://regex.zjmainstay.cn/\n* PHP模拟器 https://3v4l.org/BIsAB\n* 在线流程图 https://www.processon.com/\n* 住房公积金 http://www.bjgjj.gov.cn/\n* 社保查询 http://www.bjrbj.gov.cn/csibiz/home/#\n","slug":"used-address","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cj7xcb09b001k8a9kmi309qyl","content":"<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><ul>\n<li>编程书籍大全 <a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"external\">https://github.com/justjavac/free-programming-books-zh_CN</a></li>\n<li>编程书籍2 <a href=\"https://github.com/jobbole/awesome-programming-books\" target=\"_blank\" rel=\"external\">https://github.com/jobbole/awesome-programming-books</a></li>\n<li>廖雪峰官方网站 <a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"external\">https://www.liaoxuefeng.com/</a></li>\n<li>牛客网 <a href=\"https://www.nowcoder.com/\" target=\"_blank\" rel=\"external\">https://www.nowcoder.com/</a></li>\n<li>PHP之道 <a href=\"https://laravel-china.github.io/php-the-right-way/\" target=\"_blank\" rel=\"external\">https://laravel-china.github.io/php-the-right-way/</a></li>\n<li>啊哈磊算法 <a href=\"http://ahalei.blog.51cto.com/\" target=\"_blank\" rel=\"external\">http://ahalei.blog.51cto.com/</a></li>\n<li>PHP手册 <a href=\"http://php.net/manual/zh/index.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/zh/index.php</a></li>\n<li>深入PHP内核 <a href=\"http://www.php-internals.com/book/\" target=\"_blank\" rel=\"external\">http://www.php-internals.com/book/</a></li>\n<li>实验楼 <a href=\"https://www.shiyanlou.com/\" target=\"_blank\" rel=\"external\">https://www.shiyanlou.com/</a></li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li>json校验 <a href=\"http://www.bejson.com/\" target=\"_blank\" rel=\"external\">http://www.bejson.com/</a></li>\n<li>时间戳转换 <a href=\"http://tool.chinaz.com/Tools/unixtime.aspx\" target=\"_blank\" rel=\"external\">http://tool.chinaz.com/Tools/unixtime.aspx</a></li>\n<li>正则表达式在线验证 <a href=\"http://regex.zjmainstay.cn/\" target=\"_blank\" rel=\"external\">http://regex.zjmainstay.cn/</a></li>\n<li>PHP模拟器 <a href=\"https://3v4l.org/BIsAB\" target=\"_blank\" rel=\"external\">https://3v4l.org/BIsAB</a></li>\n<li>在线流程图 <a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"external\">https://www.processon.com/</a></li>\n<li>住房公积金 <a href=\"http://www.bjgjj.gov.cn/\" target=\"_blank\" rel=\"external\">http://www.bjgjj.gov.cn/</a></li>\n<li>社保查询 <a href=\"http://www.bjrbj.gov.cn/csibiz/home/#\" target=\"_blank\" rel=\"external\">http://www.bjrbj.gov.cn/csibiz/home/#</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><ul>\n<li>编程书籍大全 <a href=\"https://github.com/justjavac/free-programming-books-zh_CN\" target=\"_blank\" rel=\"external\">https://github.com/justjavac/free-programming-books-zh_CN</a></li>\n<li>编程书籍2 <a href=\"https://github.com/jobbole/awesome-programming-books\" target=\"_blank\" rel=\"external\">https://github.com/jobbole/awesome-programming-books</a></li>\n<li>廖雪峰官方网站 <a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"external\">https://www.liaoxuefeng.com/</a></li>\n<li>牛客网 <a href=\"https://www.nowcoder.com/\" target=\"_blank\" rel=\"external\">https://www.nowcoder.com/</a></li>\n<li>PHP之道 <a href=\"https://laravel-china.github.io/php-the-right-way/\" target=\"_blank\" rel=\"external\">https://laravel-china.github.io/php-the-right-way/</a></li>\n<li>啊哈磊算法 <a href=\"http://ahalei.blog.51cto.com/\" target=\"_blank\" rel=\"external\">http://ahalei.blog.51cto.com/</a></li>\n<li>PHP手册 <a href=\"http://php.net/manual/zh/index.php\" target=\"_blank\" rel=\"external\">http://php.net/manual/zh/index.php</a></li>\n<li>深入PHP内核 <a href=\"http://www.php-internals.com/book/\" target=\"_blank\" rel=\"external\">http://www.php-internals.com/book/</a></li>\n<li>实验楼 <a href=\"https://www.shiyanlou.com/\" target=\"_blank\" rel=\"external\">https://www.shiyanlou.com/</a></li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li>json校验 <a href=\"http://www.bejson.com/\" target=\"_blank\" rel=\"external\">http://www.bejson.com/</a></li>\n<li>时间戳转换 <a href=\"http://tool.chinaz.com/Tools/unixtime.aspx\" target=\"_blank\" rel=\"external\">http://tool.chinaz.com/Tools/unixtime.aspx</a></li>\n<li>正则表达式在线验证 <a href=\"http://regex.zjmainstay.cn/\" target=\"_blank\" rel=\"external\">http://regex.zjmainstay.cn/</a></li>\n<li>PHP模拟器 <a href=\"https://3v4l.org/BIsAB\" target=\"_blank\" rel=\"external\">https://3v4l.org/BIsAB</a></li>\n<li>在线流程图 <a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"external\">https://www.processon.com/</a></li>\n<li>住房公积金 <a href=\"http://www.bjgjj.gov.cn/\" target=\"_blank\" rel=\"external\">http://www.bjgjj.gov.cn/</a></li>\n<li>社保查询 <a href=\"http://www.bjrbj.gov.cn/csibiz/home/#\" target=\"_blank\" rel=\"external\">http://www.bjrbj.gov.cn/csibiz/home/#</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj7xcb07o00008a9kwlgypokg","category_id":"cj7xcb07w00038a9kks17ceok","_id":"cj7xcb08f000d8a9k26r1ho5h"},{"post_id":"cj7xcb07t00028a9kn59ttdu2","category_id":"cj7xcb08900088a9ktkuyiopz","_id":"cj7xcb08j000i8a9k08ulwyfy"},{"post_id":"cj7xcb08400058a9ksjs2ricv","category_id":"cj7xcb08f000e8a9ka9xg26w1","_id":"cj7xcb08p000n8a9kydu8wfju"},{"post_id":"cj7xcb08k000l8a9kurrojo2h","category_id":"cj7xcb08900088a9ktkuyiopz","_id":"cj7xcb08t000t8a9kuz5axxit"},{"post_id":"cj7xcb08600068a9k6y1h3hc7","category_id":"cj7xcb08j000j8a9kvc25z40a","_id":"cj7xcb08v000x8a9k0ctwdqgi"},{"post_id":"cj7xcb08700078a9kkjxct757","category_id":"cj7xcb08900088a9ktkuyiopz","_id":"cj7xcb08x00128a9kwbnt1kfc"},{"post_id":"cj7xcb08a000b8a9kjss2gy5q","category_id":"cj7xcb08t000v8a9kwc804uxp","_id":"cj7xcb091001a8a9k80izmfgf"},{"post_id":"cj7xcb08e000c8a9kpbdyskbj","category_id":"cj7xcb08t000v8a9kwc804uxp","_id":"cj7xcb099001g8a9kkd95uzli"},{"post_id":"cj7xcb09000188a9knxzkmpqh","category_id":"cj7xcb08f000e8a9ka9xg26w1","_id":"cj7xcb09a001j8a9kfgkoeq8m"},{"post_id":"cj7xcb08g000g8a9kccesj2ko","category_id":"cj7xcb08t000v8a9kwc804uxp","_id":"cj7xcb09c001l8a9k4h4r7o16"},{"post_id":"cj7xcb09a001i8a9kwxsvy0fo","category_id":"cj7xcb08f000e8a9ka9xg26w1","_id":"cj7xcb09d001p8a9krlcytii5"},{"post_id":"cj7xcb08h000h8a9kso8cc33f","category_id":"cj7xcb099001f8a9kcc1hgh44","_id":"cj7xcb09d001t8a9kyyxa16lg"},{"post_id":"cj7xcb09b001k8a9kmi309qyl","category_id":"cj7xcb08900088a9ktkuyiopz","_id":"cj7xcb09d001u8a9kt92j1iiy"},{"post_id":"cj7xcb08m000m8a9k1rlkg5tk","category_id":"cj7xcb09c001m8a9knwoayah4","_id":"cj7xcb09f001x8a9k1m5wuj8p"},{"post_id":"cj7xcb08q000q8a9k2p7cfkil","category_id":"cj7xcb09d001q8a9kh1ruoseb","_id":"cj7xcb09g00218a9kccrd75pf"},{"post_id":"cj7xcb08s000s8a9kyel38z8s","category_id":"cj7xcb09d001q8a9kh1ruoseb","_id":"cj7xcb09h00248a9k4r9fc8nt"},{"post_id":"cj7xcb08u000w8a9ka2v8qqnk","category_id":"cj7xcb09d001q8a9kh1ruoseb","_id":"cj7xcb09i00298a9k05l8qw39"},{"post_id":"cj7xcb08v00108a9kkmfcnoxf","category_id":"cj7xcb09d001q8a9kh1ruoseb","_id":"cj7xcb09k002d8a9kfjiergo7"},{"post_id":"cj7xcb08x00138a9kry0t4od9","category_id":"cj7xcb09d001q8a9kh1ruoseb","_id":"cj7xcb09m002g8a9kbe0krh6m"},{"post_id":"cj7xcb08z00168a9kmtm1233u","category_id":"cj7xcb09k002c8a9kfqbof3vk","_id":"cj7xcb09n002k8a9kv3nvqdke"},{"post_id":"cj7xcb093001c8a9kyls9nafm","category_id":"cj7xcb09m002h8a9kv4b4ol1v","_id":"cj7xcb09n002o8a9kyfxyi9jq"},{"post_id":"cj7xcb096001e8a9kxcwl5rmu","category_id":"cj7xcb09n002l8a9k9hp1t15x","_id":"cj7xcb09o002r8a9k0cywt5j3"}],"PostTag":[{"post_id":"cj7xcb07o00008a9kwlgypokg","tag_id":"cj7xcb08300048a9krnwjyc3y","_id":"cj7xcb08a000a8a9k3kw6y9fb"},{"post_id":"cj7xcb07t00028a9kn59ttdu2","tag_id":"cj7xcb08900098a9kea27teda","_id":"cj7xcb08s000r8a9kstbqyg6h"},{"post_id":"cj7xcb07t00028a9kn59ttdu2","tag_id":"cj7xcb08f000f8a9kdlo57x6b","_id":"cj7xcb08t000u8a9kmz1wtx8m"},{"post_id":"cj7xcb07t00028a9kn59ttdu2","tag_id":"cj7xcb08j000k8a9kah8mmvkl","_id":"cj7xcb08v000z8a9kei8z5rxc"},{"post_id":"cj7xcb08400058a9ksjs2ricv","tag_id":"cj7xcb08p000p8a9k6ocwl8bh","_id":"cj7xcb08w00118a9k3nikskl8"},{"post_id":"cj7xcb08600068a9k6y1h3hc7","tag_id":"cj7xcb08v000y8a9khfejr5f8","_id":"cj7xcb09000178a9kvziij6n1"},{"post_id":"cj7xcb08700078a9kkjxct757","tag_id":"cj7xcb08900098a9kea27teda","_id":"cj7xcb096001d8a9ksgmj04xm"},{"post_id":"cj7xcb08a000b8a9kjss2gy5q","tag_id":"cj7xcb092001b8a9ko6l1hcfj","_id":"cj7xcb09c001o8a9ktek2rqlc"},{"post_id":"cj7xcb08a000b8a9kjss2gy5q","tag_id":"cj7xcb09a001h8a9klzi5qd34","_id":"cj7xcb09d001r8a9kl4zsiyj3"},{"post_id":"cj7xcb08e000c8a9kpbdyskbj","tag_id":"cj7xcb092001b8a9ko6l1hcfj","_id":"cj7xcb09f001y8a9k3a5aw6d8"},{"post_id":"cj7xcb08e000c8a9kpbdyskbj","tag_id":"cj7xcb09a001h8a9klzi5qd34","_id":"cj7xcb09f001z8a9kt0vqvuq2"},{"post_id":"cj7xcb08g000g8a9kccesj2ko","tag_id":"cj7xcb092001b8a9ko6l1hcfj","_id":"cj7xcb09h00268a9kysq8pfvk"},{"post_id":"cj7xcb08g000g8a9kccesj2ko","tag_id":"cj7xcb09a001h8a9klzi5qd34","_id":"cj7xcb09i00278a9k5b0tgbm2"},{"post_id":"cj7xcb08h000h8a9kso8cc33f","tag_id":"cj7xcb09h00258a9k7gitd7t1","_id":"cj7xcb09k002b8a9k2tuzmx6g"},{"post_id":"cj7xcb08k000l8a9kurrojo2h","tag_id":"cj7xcb09i002a8a9kkmeo5omw","_id":"cj7xcb09m002f8a9kgh7fw1xh"},{"post_id":"cj7xcb08m000m8a9k1rlkg5tk","tag_id":"cj7xcb09k002e8a9keil4cift","_id":"cj7xcb09n002j8a9khf5w0bmk"},{"post_id":"cj7xcb08q000q8a9k2p7cfkil","tag_id":"cj7xcb09m002i8a9k0kl4irfn","_id":"cj7xcb09n002n8a9kxkqp7rdo"},{"post_id":"cj7xcb08s000s8a9kyel38z8s","tag_id":"cj7xcb09m002i8a9k0kl4irfn","_id":"cj7xcb09o002q8a9kms8f3z2z"},{"post_id":"cj7xcb08u000w8a9ka2v8qqnk","tag_id":"cj7xcb09m002i8a9k0kl4irfn","_id":"cj7xcb09p002t8a9kj368nynp"},{"post_id":"cj7xcb08v00108a9kkmfcnoxf","tag_id":"cj7xcb09m002i8a9k0kl4irfn","_id":"cj7xcb09q002v8a9kjp04pmdm"},{"post_id":"cj7xcb08x00138a9kry0t4od9","tag_id":"cj7xcb09m002i8a9k0kl4irfn","_id":"cj7xcb09s002y8a9k30m4ej36"},{"post_id":"cj7xcb08x00138a9kry0t4od9","tag_id":"cj7xcb09s002w8a9kghedbksf","_id":"cj7xcb09s002z8a9k73vxu6ge"},{"post_id":"cj7xcb08z00168a9kmtm1233u","tag_id":"cj7xcb09s002x8a9k36h1wlzn","_id":"cj7xcb09t00318a9kzdo7ju1z"},{"post_id":"cj7xcb09000188a9knxzkmpqh","tag_id":"cj7xcb08p000p8a9k6ocwl8bh","_id":"cj7xcb09t00338a9k2or0bqjl"},{"post_id":"cj7xcb09000188a9knxzkmpqh","tag_id":"cj7xcb09s00308a9k4dkxnzyx","_id":"cj7xcb09u00348a9kcts3lo0v"},{"post_id":"cj7xcb093001c8a9kyls9nafm","tag_id":"cj7xcb09t00328a9kexiwgkye","_id":"cj7xcb09u00368a9kh55i0xrk"},{"post_id":"cj7xcb096001e8a9kxcwl5rmu","tag_id":"cj7xcb09s002w8a9kghedbksf","_id":"cj7xcb09v00398a9kwnzxrt5t"},{"post_id":"cj7xcb096001e8a9kxcwl5rmu","tag_id":"cj7xcb09u00378a9klwuiw5lc","_id":"cj7xcb09v003a8a9k5l3s8yvj"},{"post_id":"cj7xcb09a001i8a9kwxsvy0fo","tag_id":"cj7xcb09v00388a9kikgife2q","_id":"cj7xcb09w003c8a9kqllnruzy"},{"post_id":"cj7xcb09a001i8a9kwxsvy0fo","tag_id":"cj7xcb08p000p8a9k6ocwl8bh","_id":"cj7xcb09w003d8a9k11vilblq"},{"post_id":"cj7xcb09b001k8a9kmi309qyl","tag_id":"cj7xcb09i002a8a9kkmeo5omw","_id":"cj7xcb09w003e8a9kf8r3nil1"}],"Tag":[{"name":"awk","_id":"cj7xcb08300048a9krnwjyc3y"},{"name":"git","_id":"cj7xcb08900098a9kea27teda"},{"name":"github","_id":"cj7xcb08f000f8a9kdlo57x6b"},{"name":"mac","_id":"cj7xcb08j000k8a9kah8mmvkl"},{"name":"设计模式","_id":"cj7xcb08p000p8a9k6ocwl8bh"},{"name":"杂文","_id":"cj7xcb08v000y8a9khfejr5f8"},{"name":"hexo","_id":"cj7xcb092001b8a9ko6l1hcfj"},{"name":"环境搭建","_id":"cj7xcb09a001h8a9klzi5qd34"},{"name":"laravel","_id":"cj7xcb09h00258a9k7gitd7t1"},{"name":"其他","_id":"cj7xcb09i002a8a9kkmeo5omw"},{"name":"MySQL","_id":"cj7xcb09k002e8a9keil4cift"},{"name":"正则表达式","_id":"cj7xcb09m002i8a9k0kl4irfn"},{"name":"PHP","_id":"cj7xcb09s002w8a9kghedbksf"},{"name":"算法","_id":"cj7xcb09s002x8a9k36h1wlzn"},{"name":"单例","_id":"cj7xcb09s00308a9k4dkxnzyx"},{"name":"安全，SQL注入","_id":"cj7xcb09t00328a9kexiwgkye"},{"name":"字符串","_id":"cj7xcb09u00378a9klwuiw5lc"},{"name":"UML","_id":"cj7xcb09v00388a9kikgife2q"}]}}